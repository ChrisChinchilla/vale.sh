[
   {
    "Title": "Integer messages in metrics rules",
    "Body": "This is super nit-picky, but I'll ask. \r\n\r\nI've got this:\r\n\r\n```\r\nextends: metric\r\nmessage: \"This topic has %s H2s in it.\"\r\nlevel: warning\r\nformula: heading_h2\r\ncondition: \"\u003e 6\"\r\n```\r\n\r\nIn the second line, is there any way I could cast the string to an integer so it says \"12\" instead of \"12.00\"?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/439"
   },
   {
    "Title": "Random bug with complex URL in latest version",
    "Body": "@jdkato With Vale 2.17.0 I'm seeing a strange bug. We have one link with a crazy URL:\r\n\r\n`[link title](https://log.gprd.gitlab.net/app/kibana#/discover?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-1d,to:now))\u0026_a=(columns:!(json.type,json.command,json.exec_time_s),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:AWSQX_Vf93rHTYrsexmk,key:json.tag,negate:!f,params:(query:redis.slowlog),type:phrase),query:(match:(json.tag:(query:redis.slowlog,type:phrase))))),index:AWSQX_Vf93rHTYrsexmk)).`\r\n\r\nIf I delete the link title, and use just `[]`, everything is fine. If I put anything in there, even just `[a]`, Vale lints the URL (reporting spelling warnings, sentence length, etc.)\r\n\r\nI would assume it's due to the parens somehow, but I counted just now and I don't think there are any stray/missing parens. The link also works fine, which leads me to think it's correct. Perhaps a regex problem when looking for the end of the link?\r\n\r\nWe've turned off Vale around that link, as it was failing in CI/CD too (https://gitlab.com/gitlab-org/gitlab/-/blob/c67dd64e8d4e1b61aa2ae7d578ee08fe6587fb45/doc/development/redis.md#L121-L129). You can see GitLab's code coloring struggles with the link too, so it's not surprising Vale does too, but worth pointing out if you have an idea for a tweak that can fix it.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/438"
   },
   {
    "Title": "Allow for comments in vocab accept/reject txt files",
    "Body": "The current formatting of the `accept.txt` and `reject.txt` do not easily allow for comments linking to sources as to the context of why the line exists. I haven't found any historic issues that detail if this is an intentional design choice, a limitation, or just something that hasn't been considered.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/437"
   },
   {
    "Title": "Custom package fails to sync",
    "Body": "- OS Linux (Kubuntu LTS 20.04)\r\n- Install method: brew\r\n- Vale version 2.17\r\n\r\nI have an issue with a custom package(complete) that was migrated from a \"package\" predating the package support we see in \u003e2.16. \r\nWhenever I was using the `sync` functionality I got this error: `Get \"\": unsupported protocol scheme \"\"`. When using `sync` for Google everything was fine, but when I added to or replaced with my URL I got the error again. However, the style and vocab got downloaded and placed in the correct folder/structure. It is worth mentioning that it did not update my `.config`.\r\nAfter trial and error, I figured out that my package contained a `meta.json` left in my style directory. In this case, the path could be described as `Test/styles/Test/meta.json`.\r\nThe contents of the meta.json file\r\n```\r\n{\r\n  \"vale_version\": \"\u003e=1.0.0\"\r\n}\r\n```\r\n\r\nI would be more than willing to give more detailed information on my setup if necessary. \r\n\r\nThanks for a great tool!\r\n\r\nBest regards\r\nThomas",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/436"
   },
   {
    "Title": "Custom tokenizer regexp",
    "Body": "Hi,\r\n\r\nI try to add spelling checking to python source code files, which has a lot of doc strings. But to do that I have to be able to filter out variable names from being checked by spellchecker. For exmaple: `example_long_variable` and \\`variableInBackticks\\`.\r\n\r\nIn my opinion simplest way will be to ignore anything inside \\`\\` or having \"_\". I see that in https://github.com/errata-ai/vale/issues/263 there is info that there is no other processing inside of block comments and in code I see that spellchecking rules get words created by tokenizer with hardcoded tokenizer regexp:\r\nhttps://github.com/errata-ai/vale/blob/d1891675adee2994b3cda6f0f8ad2ec2a70c4b6e/internal/nlp/prose.go#L18-L19\r\n\r\nSo my idea is to add possibility of passing tokenizer regexp as a parameter to vale. Having custom tokenizer there will be possibility to change tokenization in such way, that `example_long_variable` and \\`variableInBackticks\\` will be one token, which can be next filtered out by spelling rules.\r\n\r\nWhat do you think about that idea? Would you be ready to accept merge request which will be adding such functionality?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/435"
   },
   {
    "Title": "Vale.sh down for the past couple of days?",
    "Body": "Hi,\r\n\r\nI've not been able to reference any of the docs pages the past couple of days because https://vale.sh is down. Are others also experiencing the issue?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/434"
   },
   {
    "Title": "vale sync fails with invalid cross-device link",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\n- OS: Linux\r\n- Install method: direct download\r\n- Vale version `2.16.1`\r\n\r\nWhen trying to use `vale sync`, every execution (using sample config https://vale.sh/hub/microsoft/) fails with\r\n\r\n```shell\r\nvale sync\r\nDownloading packages [0/1] █                                                                                                           0% | 0s\r\nrename /tmp/Microsoft2055408144/Microsoft /home/(…)/style/Microsoft: invalid cross-device link\r\n```\r\n\r\nAs I understand (I'm not a go programmer) that is actually expected in `os.Rename` because `/tmp` is a `tmpfs` filesystem in my OS.\r\n\r\n```shell\r\ndf -h\r\nFilesystem                Size  Used Avail Use% Mounted on\r\n/dev/mapper/VGsys-LVroot  196G  172G   15G  93% /\r\n/dev/mapper/VGsys-LVhome  262G   37G  212G  15% /home\r\n(…)\r\ntmpfs                      16G   12M   16G   1% /tmp\r\n```\r\n\r\nI assume I'm not the only one who has `/tmp` as `tmpfs` so it would be great if one could pass another directory for temporary download or if `sync` would support moving downloaded files between filesystems.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/432"
   },
   {
    "Title": "panic: runtime error: index out of range [-1] when running Vale against a file with mixed HTML and MD syntax",
    "Body": "When running Vale against one of the files within our repo, we get the following error:\r\n\r\n```\r\npanic: runtime error: index out of range [-1]\r\n\r\ngoroutine 2515 [running]:\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*walker).lastTag(...)\r\n\tgithub.com/errata-ai/vale/v2/internal/lint/walk.go:112\r\ngithub.com/errata-ai/vale/v2/internal/lint.Linter.lintHTMLTokens({0xc003592d40, 0x1, 0x0, 0xc0000ac1b0, 0x1df6e40, {0x0, 0x0, 0x0}, {0x0, 0x0, ...}, ...}, ...)\r\n\tgithub.com/errata-ai/vale/v2/internal/lint/ast.go:71 +0x154d\r\ngithub.com/errata-ai/vale/v2/internal/lint.Linter.lintMarkdown({0xc003592d40, 0x1, 0x0, 0xc0000ac1b0, 0x1df6e40, {0x0, 0x0, 0x0}, {0x0, 0x0, ...}, ...}, ...)\r\n\tgithub.com/errata-ai/vale/v2/internal/lint/md.go:59 +0x194\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFile(0xc000624960, {0xc006c96480?, 0x0?})\r\n\tgithub.com/errata-ai/vale/v2/internal/lint/lint.go:173 +0x2f8\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFiles.func1.1.1({0xc006c96480?, 0x0?})\r\n\tgithub.com/errata-ai/vale/v2/internal/lint/lint.go:118 +0x5b\r\ncreated by github.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFiles.func1.1\r\n\tgithub.com/errata-ai/vale/v2/internal/lint/lint.go:116 +0x218\r\n```\r\n\r\nThis happens with the following file in multiple locations: https://github.com/cockroachdb/docs/blob/master/_includes/releases/v21.2/v21.2.0-beta.1.md\r\n\r\nThe one that I identified Vale doesn't like is as follows (line 166):\r\n\r\n```\r\n- An earlier commit changed CockroachDB to use the value of the `IntervalStyle` session var when interpreting interval to string conversions. However, this made `string::interval` and `interval::string` casts have a volatility of \"stable\" instead of \"immutable\". This has ramifications for items such as computed columns and check clauses, which cannot use immutable expressions. This means that the particular results returned by these queries can become incoherent when `IntervalStyle` is customized to a different value from its default, `postgres`. In order to provide guardrails against this incoherence, CockroachDB now provides a new, separate configuration knob called `intervalstyle_enabled` that applications can use to \"opt in\" the ability to customize IntervalStyle:\u003cul\u003e\u003cli\u003eBy default, this knob is false and applications cannot customize `IntervalStyle`. Interval to string conversions that are already stored in the schema are unaffected and continue to produce results as per the default style `postgres`.\u003c/li\u003e\u003cli\u003eWhen the knob is true, these things happen:\u003c/li\u003e\u003cul\u003e\u003cli\u003eApps can start customizing `IntervalStyle` in SQL sessions.\u003c/li\u003e\u003cli\u003eA SQL session that has a custom `IntervalStyle` will start observing *incoherent results* when accessing tables that already contain a conversion from interval to string.\u003c/li\u003e\u003c/ul\u003e\u003c/ul\u003eThe knob works as follows: The *primary* configuration mechanism is a new [cluster setting](../v21.2/cluster-settings.html) called `sql.defaults.intervalstyle.enabled`. This is the knob that operators and DBAs should customize manually. Then, as a *secondary* configuration mechanism, the value of the [cluster setting](../v21.2/cluster-settings.html) is also copied to each SQL session as a new session var `intervalstyle_enabled`. This is a performance optimization. SQL apps should not modify this session var directly, except for temporary testing purposes. In v22.1, upgrades will be disabled if these stable expressions are found in computed columns, check clauses, etc. [#67792][#67792]\r\n```\r\n\r\n- OS - macOS 12.3.1\r\n- Install method: Homebrew\r\n- Vale version 2.16.0",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/431"
   },
   {
    "Title": "Allow invoking asciidoctor with the --experimental flag",
    "Body": "- OS: Primarily Linux, possibly Mac\r\n- Install method: Currently direct download\r\n- Vale version: 2.15.5\r\n\r\nHi,\r\nWe use `asciidoctor --experimental` so we can use macros such as btn and menu (which allow us to mark up UI elements to get a different style for them, signal that those are bits that should not be translated, etc.).\r\n\r\nHowever, Vale (correctly) invokes `asciidoctor` without that flag. If it does that, then the HTML that Vale sees is:\r\n\r\n```\r\n$ asciidoctor -e -b html -\r\nbtn:[Foo].\r\n^D\r\n\u003cdiv class=\"paragraph\"\u003e\r\n\u003cp\u003ebtn:[Foo].\u003c/p\u003e\r\n\u003c/div\u003e\r\n```\r\n\r\nSo for example, \"btn\" is subject to spell checking.\r\nBy using the `--experimental` option (if the source AsciiDoc is using it), the HTML changes:\r\n\r\n```\r\n$ asciidoctor -e -b html --attribute=experimental -\r\nbtn:[Foo].\r\n^D\r\n\u003cdiv class=\"paragraph\"\u003e\r\n\u003cp\u003e\u003cb class=\"button\"\u003eFoo\u003c/b\u003e.\u003c/p\u003e\r\n\u003c/div\u003e\r\n```\r\n\r\nThe generated HTML does not have a \"btn\" text to spell-check, and also there's an HTML class generated, so we can configure Vale to skip text there if we think that's a good idea.\r\n\r\nProbably this could be an option in `.vale.ini`, disabled by default.\r\n\r\nThanks\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/430"
   },
   {
    "Title": "Multi-document rule support",
    "Body": "Vale appears to not support multi-document YAML inputs:\r\n\r\n```yaml\r\nextends: substitution\r\nmessage: There may not be an objecti...\r\nlevel: error\r\nignorecase: true\r\nswap:\r\n  '(?:perfect|perfected|perfection)': required|necessary|needed|reasonable|agreed|specified|adequate|compliant\r\n\r\n---\r\n\r\nextends: substitution\r\nmessage: The use of this word could imply ...\r\nlevel: error\r\nignorecase: true\r\nswap:\r\n  '(?:experts?|expertise)': skilled|practiced|knowledgeable|proficient|practitioner|consultant|experienced\r\n```\r\n\r\nFrom this rule, it only picks up the first yaml document.\r\n\r\nMost YAML parsers support reading multi-doc inputs. Could vale leverage this too?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/429"
   },
   {
    "Title": "Support alternative inline configuration for Markdown",
    "Body": "- Vale version (the result of `vale -v`)\r\n2.15.2\r\n\r\nThe documentation for [Markup-based configuration](https://docs.errata.ai/vale/scoping#markup-based-configuration) uses HTML-style comments as the comment style for markdown files, but these are then present in the output content.\r\n\r\nThe typical way to write comments in Markdown, such that they are not included in the output is with unused reference links:\r\n```\r\n[\\\\]: # (Comment here)\r\n```\r\nHere's an older discussion on the topic from 2014: https://stackoverflow.com/questions/4823468/comments-in-markdown\r\n\r\nThis seems to be the most widely supported way of adding markdown comments across multiple parsers.\r\n\r\nI'd like to propose that Vale support these in addition to the existing methods:\r\n```\r\n[\\\\]: # (vale Style.Rule = ARGUMENT)\r\nThe content you would like to ignore\r\n[\\\\]: # (vale Style.Rule = YES)\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/426"
   },
   {
    "Title": "Doc: styles folder in this repo vs. https://github.com/errata-ai/styles",
    "Body": "The documentation is not very clear on this in the README.md. It's possible  it could need a doc improvement for newcomers to better understand.\r\n\r\nIn the README.md it has a link to https://github.com/errata-ai/styles which is said to contain all official styles.\r\n\r\nAt the same time, in this library the directory https://github.com/errata-ai/vale/tree/v2/styles exists with several styles.\r\n\r\nIs https://github.com/errata-ai/vale/tree/v2/styles not officially supported then even though it exists in this repo? I am unsure how to grok this.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/425"
   },
   {
    "Title": "Allow disabling colouring ",
    "Body": "It would be great if there was a way to disable coloring output on vale, using it on CI would show me the terminal characters : \r\n\r\n![image](https://user-images.githubusercontent.com/98980/161957570-7e242882-8175-4a85-98e8-2e7909aac8c5.png)\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/424"
   },
   {
    "Title": "Vale doesn't match asterisk (*), underscore (_) and backtick (`)",
    "Body": "Thanks for building vale. It helped me already a lot over the recent days after I learned about it.\r\n\r\nAs technical writer for reStructuredText (RST) markup I want to use Vale as linter during writing to avoid common mistakes.\r\n\r\nUnfortunately, the regex matching seems to be incomplete. Here is the setup and some data for reproduction.\r\n\r\nFiles:\r\n```\r\n$ tree -CRa\r\n.\r\n├── test.rst\r\n├── .vale\r\n│   └── styles\r\n│       └── Test\r\n│           └── Spacing.yml\r\n└── .vale.ini\r\n\r\n3 directories, 3 files\r\n```\r\n\r\nMy style file has the following rules:\r\n```\r\nextends: existence\r\nmessage: \"'%s' should have one space.\"\r\nlevel: error\r\nnonword: true\r\ntokens:\r\n  - '[a-zA-Z*`0-9_][.?!] {2,}[A-Z*`]'   # No more than one space between sentences\r\n  - '[a-zA-Z*`0-9_][,.?!][A-Za-z0-9*`]' # No space between sentences or sentence parts allowed\r\n  - '[,_`] {2,}[A-Za-z0-9*`]'           # No more than one space after comma\r\n  - '[a-zA-Z*`0-9_] {2,}[A-Za-z0-9*`]'  # No more than one space between words\r\n```\r\n\r\nWhen I apply the rules with `grep -nE '\u003cregex\u003e' test.rst` I find much more matches than with `vale test.rst`. I expect ten instead of six matches. The regex with the asterisk (* ), underscore (_) and backtick (`) seem to have a problem. Those characters are important parts of RST syntax. And I not only want to have good looking docs source for usual sentences, but also for sentences with RST markup.\r\n\r\nSee the following output:\r\n\r\n```\r\n$ grep -nE '[a-zA-Z*`0-9_][.?!] {2,}[A-Z*`]' test.rst \r\n7:cubilia.  Facilisi fermentum sociis neque ligula dolor proin suscipit himenaeos\r\n12:nulla porttitor ornare luctus feugiat leo 365.  Aptent ante taciti parturient natoque\r\n25:hendrerit :emphasis:`vivamus ut`.  Etiam parturient auctor varius imperdiet mi\r\n27:magnis hac suscipit quam **ridiculus**.  Nascetur consequat nam montes dis pulvinar\r\n31:nostra magna aenean, nibh urna cum curae arcu `sed nisl \u003csome-link\u003e`_.  Himenaeos\r\n\r\n$ grep -nE '[a-zA-Z*`0-9_][,.?!][A-Za-z0-9*`]' test.rst \r\n16:tempor cras fusce porttitor,urna facilisis ad sociis tristique aenean\r\n17:adipiscing ornare.Lobortis congue metus integer turpis at varius nisi, aliquam\r\n\r\n$ grep -nE '[,_`] {2,}[A-Za-z0-9*`]' test.rst \r\n15:penatibus dignissim id per suspendisse ultrices,  phasellus morbi feugiat cursus\r\n23:ornare aenean cum vivamus dolor quam. `Ad bibendum \u003csome-link\u003e`_  at integer erat imperdiet\r\n\r\n$ grep -nE '[a-zA-Z*`0-9_] {2,}[A-Za-z0-9*`]' test.rst\r\n11:dignissim  est torquent donec aliquam dictum platea senectus, vehicula eget at\r\n23:ornare aenean cum vivamus dolor quam. `Ad bibendum \u003csome-link\u003e`_  at integer erat imperdiet\r\n\r\n$ vale test.rst\r\n\r\n test.rst\r\n 7:7    error  'a. F' should have one space.  Test.Spacing \r\n 11:9   error  'm e' should have one space.   Test.Spacing \r\n 12:45  error  '5. A' should have one space.  Test.Spacing \r\n 15:48  error  ', p' should have one space.   Test.Spacing \r\n 16:27  error  'r,u' should have one space.   Test.Spacing \r\n 17:17  error  'e.L' should have one space.   Test.Spacing \r\n\r\n✖ 6 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nYou find the text attached: [test.rst](https://github.com/errata-ai/vale/files/8425900/test.txt)\r\n\r\nMaybe I'm missing something in my configuration. I'd be happy to get a feedback on this, if so. I guess there is an issue with matching in Vale.\r\n\r\n- OS: Debian / GNU Linux 11 with the latest updates\r\n- Installation method: Direct download of the binary [vale_2.15.5_Linux_64-bit.tar.gz](https://github.com/errata-ai/vale/releases/download/v2.15.5/vale_2.15.5_Linux_64-bit.tar.gz)\r\n- Vale version: 2.15.5\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/423"
   },
   {
    "Title": "Substitution rule for `i.e.` and 'i. e.` does not work as expected.",
    "Body": "## Issue\r\n\r\nVale does not detect `i.e.` or `i. e.` in the test file. \r\n\r\n## Environment\r\n\r\n- OS: macOS Monterey 12.3\r\n- Install method: Brew\r\n- Vale version: 2.15.4\r\n- Rule source: [LatinAbbreviations.yml](https://github.com/vultr/vultr-mdtk/blob/84e2213b281380f45c176b873cdf01cf24152623/styles/Vultr/LatinAbbreviations.yml)\r\n- Test case: [Vultr.LatinAbbreviations.md](https://github.com/vultr/vultr-mdtk/blob/84e2213b281380f45c176b873cdf01cf24152623/tests/Vale/Vultr.LatinAbbreviations.md)\r\n\r\n## Output\r\n```\r\n$ vale --output line Vultr.LatinAbbreviations.md\r\n\r\nVultr.LatinAbbreviations.md:12:35:Vultr.LatinAbbreviations:Please use 'for example' instead of 'e.g.', or consider rewriting the sentence.\r\nVultr.LatinAbbreviations.md:13:35:Vultr.LatinAbbreviations:Please use 'for example' instead of 'e. g.', or consider rewriting the sentence.\r\nVultr.LatinAbbreviations.md:15:51:Vultr.LatinAbbreviations:Please use 'and so on' instead of 'etc.', or consider rewriting the sentence.\r\nVultr.LatinAbbreviations.md:16:51:Vultr.LatinAbbreviations:Please use 'and so on' instead of 'et cetera', or consider rewriting the sentence.\r\nVultr.LatinAbbreviations.md:17:51:Vultr.LatinAbbreviations:Please use 'and so on' instead of 'etcetera', or consider rewriting the sentence.\r\nVultr.LatinAbbreviations.md:21:35:Vultr.LatinAbbreviations:Please use 'foobar testing' instead of 'z.z.', or consider rewriting the sentence.\r\nVultr.LatinAbbreviations.md:22:35:Vultr.LatinAbbreviations:Please use 'foobar testing' instead of 'z. z.', or consider rewriting the sentence.\r\n```\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/422"
   },
   {
    "Title": "Spelling check incorrectly triggers in AsciiDoc with mixed markup",
    "Body": "- OS Linux\r\n- Install method: direct download\r\n- Vale version:  2.15.3\r\n\r\nI'm just getting going using the spelling checker on our AsciiDoc files and have hit the following issue:\r\n~~~\r\n`admin:__clusterset_name__` fails on \"clusterset\". (That is, it's flagged as a typo instead of being skipped.)\r\n`admin:_clusterset_name_` Ditto\r\n`admin_clusterset_name` ditto.\r\n `_clusterset_` ditto.\r\n~~~\r\n\r\nThe following variations are correctly skipped:\r\n~~~\r\nThis is a sentence that includes `clusterset` and it is ok.\r\nThis includes `clusterset_`. OK\r\nThis uses `_clusterset`. OK\r\nAnd this one uses `clusterset:admin`. OK\r\n~~~\r\n\r\nThe term \"clusterset\" is not in the dictionary or allowlist (and shouldn't be). We currently convert AsciiDoc to DocBook XML for publishing, which is why we have this complex markup. This \"double markup\" should never be spell-checked, but we *do* need to spell-check `_emphasis_` terms (underscores only).\r\n\r\nIs this a bug or am I missing something? I've been playing around with TokenIgnores but have yet to find a solution.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/421"
   },
   {
    "Title": "Regex negative lookbehind misbehaviour",
    "Body": "Vale version: latest.\r\n\r\n### Rule\r\n```\r\nextends: existence\r\nmessage: \"Change\"\r\nlevel: warning\r\ntokens:\r\n  - '(?\u003c!automatic\\s+)entr[a-z]*'\r\n```\r\n\r\n### Text\r\n```\r\nThis is a automatic entry example file which\r\njust has to trigger on entry word when there's\r\nno 'automatic' before it.\r\n```\r\n\r\n### Vale output\r\n```\r\n{\r\n  \"testfile.adoc\": [\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"\",\r\n        \"Params\": null\r\n      },\r\n      \"Check\": \"testsuite.testWord\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"Change this\",\r\n      \"Severity\": \"warning\",\r\n      \"Span\": [\r\n        21,\r\n        25\r\n      ],\r\n      \"Match\": \"entry\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Expected behaviour\r\n\r\nIt should mark `entry` word in line 2, because it is not preceded with `automatic `, but it marks the `entry` in the first line and never goes further.\r\n\r\nMaybe I'm doing something wrong here?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/420"
   },
   {
    "Title": "Exclude empty files from the metrics check",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\nI'd like to start using the `metrics` endpoint. We have some Markdown files in a directory that only have frontmatter in them. When running with simple metrics (like `words/sentences`), this results in a `NaN` error, which breaks the Vale run.\r\n\r\nIt would be possible to set up a script to exclude such files, but it would make the workflow a lot more complicated.\r\n\r\nIt'd be great if the `metrics` check could ignore such cases.\r\n\r\n(Using Vale 2.15.3 on Linux installed with Homebrew)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/419"
   },
   {
    "Title": "Update GoReleaser script to provide arm64 support.",
    "Body": "The script at `https://install.goreleaser.com/github.com/ValeLint/vale.sh` includes this code:\r\n\r\n```\r\n get_binaries() {\r\n  case \"$PLATFORM\" in\r\n    darwin/amd64) BINARIES=\"vale\" ;;\r\n    linux/amd64) BINARIES=\"vale\" ;;\r\n    windows/amd64) BINARIES=\"vale\" ;;\r\n    *)\r\n      log_crit \"platform $PLATFORM is not supported.  Make sure this script is up-to-date and file request at https://github.com/${PREFIX}/issues/new\"\r\n      exit 1\r\n      ;;\r\n  esac\r\n}\r\n```\r\n\r\nThat logic appears to be what is preventing the recently-added arm64 build from being installed. I'm not sure where that script comes from, but it would be great if it could be updated!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/418"
   },
   {
    "Title": "Questions: How does Vale comparable to TextLint in Pugins?",
    "Body": "Currently observing https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule#rules-english and it seem to have a bit less of everything.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/417"
   },
   {
    "Title": "Cannot disable Vale.Spelling",
    "Body": "## Setup\r\n- OS: macOS\r\n- Install method: Homebrew\r\n- Vale version: `vale version 2.15.1`\r\n\r\n## Steps to reproduce\r\n\r\n```\r\necho \"Netlify is a company\" \u003e index.md\r\n```\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/416"
   },
   {
    "Title": "Ignore metadata tags like title in HTML",
    "Body": "Is it possible to add to the ignored scopes list individual tags that would be in HTML head metadata? In particular, `title`. Our markdown to HTML transforms auto-generate titles with the contents of H1, but strip out all formatting. So things we have set to be ignored, like code phrases, aren't being ignored properly with the code ticks missing. I would just like to ignore all titles to get around the behavior.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/415"
   },
   {
    "Title": "Incorrect error placing in AsciiDoc when comments with the same error are present.",
    "Body": "Vale version: 2.15.2\r\n\r\nVale correctly skips errors in comments.\r\nBut, when the same error appears in a comment, and then in the content after the comment, then Vale incorrectly reports the error in the comment instead of the error in the content.\r\n\r\nThe following GIF explains the issue better than words:\r\n\r\n![Peek 2022-03-03 08-52](https://user-images.githubusercontent.com/13310156/156522330-1a540b78-af96-46a4-8a75-c607cc079083.gif)\r\n\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/414"
   },
   {
    "Title": "fix: allow `conditional` style to handle unicode",
    "Body": "For instance, when the characters ® or ™ (U+00AE and U+2122) are present\r\nin the text.\r\n\r\nRelated to #410",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/413"
   },
   {
    "Title": "YAML -\u003e Markdown: scopes mapping",
    "Body": "Hey @jdkato \r\n\r\nAs usual, thanks for Vale. \r\n\r\nWould you be able to give me a couple of pointers to where I would start looking at mapping a custom YAML format to vale markdown scopes?\r\n\r\nSomething like given a YAML of \r\n\r\n```\r\nitems:\r\n  - id: 1234\r\n    name: real name\r\n    description: this is some tex\r\n...\r\n```\r\n\r\nI'd need to say ignore `id`, ignore `name`, and lint `description` as paragraph. Does that sound doable? \r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/412"
   },
   {
    "Title": "chore: build darwin_arm64 as well",
    "Body": "In order to ease installs on M1 Macs, this adds darwin_arm64 to\r\ngoreleaser.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/411"
   },
   {
    "Title": "Error matching when characters like `®` are present in the text",
    "Body": "## Summary\r\nCharacters like `®` or `™` (U+00AE and U+2122) seem to cause match offset calculations to go wrong.\r\n\r\nFor instance:\r\n```\r\n$ vale --output=line 'World Health Organization (WHO) (R) and WHO or WHO'\r\n```\r\nbut\r\n```\r\n$ vale --output=line 'World Health Organization (WHO) ® and WHO or WHO'\r\nstdin.txt:1:28:Test.WHO_example:'WHO' has no definition\r\nstdin.txt:1:39:Test.WHO_example:'WHO' has no definition\r\n```\r\n\r\n## Details\r\n\r\nI'm working on macOS 12.1 (Monterey) on an M1 machine.\r\n\r\nI've tested against vale versions 2.11.2, 2.14.0 and a build of v2 (which reports v2.15.1). See the \"**Exploring further**\" section below for some debugging I did using that last.\r\n\r\nWith my `.vale.ini` as:\r\n```\r\nStylesPath = \"styles\"\r\n\r\n[*]\r\nBasedOnStyles = Vale, Test\r\n```\r\nand minimal setup\r\n```\r\n$ tree styles/\r\nstyles/\r\n└─Test/\r\n  └─WHO_example.yml\r\n```\r\nwith `styles/Test/WHO_example.yml` as:\r\n```\r\nextends: conditional\r\nmessage: \"'%s' has no definition\"\r\nlevel: error\r\nscope: text\r\nignorecase: false\r\n\r\nfirst: '\\bWHO\\b'\r\nsecond: '(?:\\b[A-Z][a-z]+ )+\\((WHO)\\)'\r\n```\r\n\r\nI get:\r\n```\r\n$ vale --output=line 'World Health Organization (WHO) (R) and WHO or WHO'\r\n```\r\nwhich is a success (if I don't use `--output=line` it reports no errors/warnings), but\r\n```\r\n$ vale --output=line 'World Health Organization (WHO) ® and WHO or WHO'\r\nstdin.txt:1:28:Test.WHO_example:'WHO' has no definition\r\nstdin.txt:1:39:Test.WHO_example:'WHO' has no definition\r\n```\r\n\r\nOn my mac, I entered the `®` at the command line using `OPT`-`R`, which matches the suggestion at https://en.wikipedia.org/wiki/Registered_trademark_symbol.\r\n\r\nTo double check, I've also done the same by putting the texts into files (`simple-who-good.txt` and `simple-who-bad.txt`) and run `vale simple-who-good.txt` and `vale simple-who-bad.txt`, and that gives the same results.\r\n\r\nI did do a search of the vale repository to see if there were any references to telling vale that text is unicode, but didn't find anything.\r\n\r\n## Exploring further\r\n\r\nI cloned https://github.com/errata-ai/vale.git and edited `internal/check/conditional.go` to add `\"fmt\"` to the `import` block and some diagnostic printing (I'm new to go, so there may have been a better way to do this):\r\n``` go\r\n     77        matches := c.patterns[0].FindAllStringSubmatch(txt, -1)\r\n     78        for _, mat := range matches {\r\n     79                if len(mat) \u003e 1 {\r\n     80                        // If we find one, we store it in a slice associated with this\r\n     81                        // particular file.\r\n     82                        for _, m := range mat[1:] {\r\n     83                                if len(m) \u003e 0 {\r\n     84                                        fmt.Printf(\"second: %v -\u003e %#v\\n\", c.patterns[0], m)    // DEBUG\r\n     85                                        f.Sequences = append(f.Sequences, m)\r\n     86                                }\r\n     87                        }\r\n     88                }\r\n     89        }\r\n     90\r\n     91        // Now we look for the antecedent.\r\n     92        locs := c.patterns[1].FindAllStringIndex(txt, -1)\r\n     93        if len(locs) \u003e 0 {    // DEBUG\r\n     94                 fmt.Printf(\"locs %v\\n\", locs)\r\n     95        }                 \r\n     96        for _, loc := range locs {\r\n     97                 s := txt[loc[0]:loc[1]]\r\n     98                 fmt.Printf(\"first: %v -\u003e %#v | %#v\\n\", c.patterns[1], loc, s)    // DEBUG\r\n     99                 if !core.StringInSlice(s, f.Sequences) \u0026\u0026 !isMatch(c.exceptRe, s) {\r\n    100                         // If we've found one (e.g., \"WHO\") and we haven't marked it as\r\n    101                         // being defined previously, send an Alert.\r\n    102                         alerts = append(alerts, makeAlert(c.Definition, loc, txt))\r\n    103                }\r\n    104       }\r\n```\r\n\r\nand with that I see:\r\n```\r\n$ ~/sw/errata.ai/vale/bin/vale --output=line 'World Health Organization (WHO) (R) and WHO or WHO'\r\nsecond: (?:\\b[A-Z][a-z]+ )+\\((WHO)\\) -\u003e \"WHO\"\r\nlocs [[27 30] [40 43] [47 50]]\r\nfirst: \\bWHO\\b -\u003e []int{27, 30} | \"WHO\"\r\nfirst: \\bWHO\\b -\u003e []int{40, 43} | \"WHO\"\r\nfirst: \\bWHO\\b -\u003e []int{47, 50} | \"WHO\"\r\n```\r\nwhich is what I would expect, but:\r\n```\r\n$ ~/sw/errata.ai/vale/bin/vale --output=line 'World Health Organization (WHO) ® and WHO or WHO'\r\nsecond: (?:\\b[A-Z][a-z]+ )+\\((WHO)\\) -\u003e \"WHO\"\r\nlocs [[27 30] [38 41] [45 48]]\r\nfirst: \\bWHO\\b -\u003e []int{27, 30} | \"WHO\"\r\nfirst: \\bWHO\\b -\u003e []int{38, 41} | \" WH\"\r\nfirst: \\bWHO\\b -\u003e []int{45, 48} | \" WH\"\r\nstdin.txt:1:28:Test.WHO_example:'WHO' has no definition\r\nstdin.txt:1:39:Test.WHO_example:'WHO' has no definition\r\n```\r\nwhere the offset of the `first` match appears to be wrong.\r\n\r\nTrying with `™` is subtly different, presumably because its UTF-8 representation is different:\r\n```\r\n$ ~/sw/errata.ai/vale/bin/vale --output=line 'World Health Organization (WHO) ™ and WHO or WHO'\r\nsecond: (?:\\b[A-Z][a-z]+ )+\\((WHO)\\) -\u003e \"WHO\"\r\nlocs [[27 30] [38 41] [45 48]]\r\nfirst: \\bWHO\\b -\u003e []int{27, 30} | \"WHO\"\r\nfirst: \\bWHO\\b -\u003e []int{38, 41} | \"d W\"\r\nfirst: \\bWHO\\b -\u003e []int{45, 48} | \"r W\"\r\nstdin.txt:1:28:Test.WHO_example:'WHO' has no definition\r\nstdin.txt:1:39:Test.WHO_example:'WHO' has no definition\r\n```\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/410"
   },
   {
    "Title": "TokenIgnores not picking up errors in different lines",
    "Body": "\r\n- OS (e.g., macOS, Windows, Linux, etc.) Mac\r\n- Install method (e.g., Go, Homebrew, direct download, etc.) Homebrew\r\n- Vale version (the result of `vale -v`) 2.14.0\r\n\r\nI have a regex in TokenIgnores to ignore contents in markdown bold. Example: `**term**`. But terms in bold are still picked up as errors. Is there something I am missing to provide for TokenIgnores to not lint terms i bold?  Here is my .vale.ini\r\n\r\n```\r\nStylesPath = vale-styles\r\n\r\n# suggestion, warning or error\r\nMinAlertLevel = warning \r\n\r\nVocab = GitHub\r\n\r\n[*.md]\r\nBasedOnStyles = Vale, GitHub\r\n\r\nTokenIgnores = {%.*?%}, \\ \r\n               {{.*?}}, \\  \r\n               (.|\\/|-)?github(\\/|-)?, \\\r\n               \\(\\/.*?\\), \\\r\n               (\\`{1}((.|\\n)*?)\\`{1}), \\\r\n               (\\*{1}((.|\\n)*?)\\*{1}), \\\r\n               (\\*{2}((.|\\n)*?)\\*{2}), \\\r\n               \\[([^\\[]+)\\](\\(.*\\))\r\n\r\n; \\(\\/.*?\\), \\  url in Markdown link, ex: (/rel/path/foo/bar)\r\n; \\[([^\\[]+)\\](\\(.*\\)) Link name and url in markdown ex : [link](url)\r\n; {%.*?%}, \\  liquid tag\r\n; {{.*?}}, \\    liquid object\r\n; (.|\\/|-)?github(\\/|-)?  github in a relative path\r\n; (\\`{1}((.|\\n)*?)\\`{1}) backticks ex: `term`\r\n; (\\`{3}((.|\\n)*?)\\`{3}) codeblock\r\n; (?s) *\\_{1}((.|\\n)*?)\\_{1}, \\ ignore file format _file_\r\n; \\*\\*(.*)\\*\\*/ terms in bold\r\n; vale --output=line --glob='!content/github/site-policy*.md' content \u003e vale/vale-errors.txt \r\n; vale --glob='!content/github/site-policy*.md' content \r\n```\r\n\r\nThis the error:\r\n\r\n\u003cimg width=\"835\" alt=\"image\" src=\"https://user-images.githubusercontent.com/33761166/154303608-587ff84f-a9d1-4650-bfba-3c4c61f50445.png\"\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/409"
   },
   {
    "Title": "Feature request: output byte position for column",
    "Body": "Now `vale` outputs «visible» text column. It could be useful to have an option to output pure byte-index of a column.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/408"
   },
   {
    "Title": "TokenIgnores not working in DITA",
    "Body": "Hi,\r\n\r\nI have the `TokenIgnores` setting as follows in the .vale.ini:\r\n\r\n```\r\n[*]\r\nTokenIgnores = (\\[.+\\][^(])\r\n```\r\n\r\nThis rule should ignore anything wrapped with the square brackets except markdown links. \r\nIt works for the following content in markdown, but it's not working for the same content in .dita (still reporting errors): `[if it rains, i will not go]`.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/407"
   },
   {
    "Title": "mac centricinstall instructions given for linux.",
    "Body": "- OS Centos 8 stream\r\n\r\ninstall directions are VERY mac os centeric I am not going install homebrew on my centos 8 system and the \"script\" and GitHub version are trying to use shasum which in linux is split into sha\u003cbit\u003esum . causing failures. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/406"
   },
   {
    "Title": "Markdown wiki links support",
    "Body": "Does Vale support wiki links in Markdown or is there a way to configure Vale to at least ignore them?\r\n\r\nWiki links have syntax that looks like:\r\n\r\n```\r\n[[wiki link]]\r\n[[labelled|wiki link]]\r\n```\r\n\r\nSome tools like [Dendron](https://wiki.dendron.so/notes/3472226a-ff3c-432d-bf5d-10926f39f6c2/#wiki-links) and [Obsidian](https://help.obsidian.md/How+to/Internal+link) use this type of syntax.\r\n\r\nUsing Vale version 2.15.0\r\n\r\nThanks",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/405"
   },
   {
    "Title": "Headings: Looking to add a style",
    "Body": "The standard for all Red Hat technical documentation is title case for all headings and titles. Diagram labels, table headings, procedure, and formal paragraph titles all fall under this heading, and consequently, standard title case capitalization rules apply. The currently accepted reference for determining title case is at https://titlecase.com/titlecase\r\nWe use sentence case for captions, legends, diagram labels, and table column headers. They are not classified as titles.\r\n\r\nWe write in asciidoc. How can I write a style (general instructions) to accommodate all these parameters?\r\n\r\n- Linux - RHEL\r\n\r\n\r\nThanks! \r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/404"
   },
   {
    "Title": "[Question] Issue with ignoring files",
    "Body": "- OS (e.g., macOS, Windows, Linux, etc.) - Linux\r\n- Install method (e.g., Go, Homebrew, direct download, etc.) - Homebrew\r\n- Vale version (the result of `vale -v`) - 2.14\r\n\r\nI'm trying to use on vale on `*.md` files but not on `*.fr.md` and I can't seem to be able to do that?\r\n\r\n```yml\r\n[*.fr.md]\r\nGoogle.Exclamation = NO\r\nGoogle.Spelling = NO\r\n```\r\n\r\nis what I tried.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/403"
   },
   {
    "Title": "Unable to ignore URL in YAML with TokenIgnores",
    "Body": "With macOS, Vale installed via Homebrew, Vale version 2.14.0\r\n\r\nWith `.vale.ini`:\r\n```\r\nStylesPath = styles\r\nMinAlertLevel = suggestion\r\n\r\n[*.yaml]\r\nBasedOnStyles = spelling\r\nTokenIgnores = (http[^\\n]+)\r\n```\r\n\r\nWith `styles/spelling/spelling.yml`:\r\n```\r\nextends: spelling\r\nmessage: \"Did you really mean '%s'?\"\r\nlevel: error\r\n```\r\n\r\nAnd `file.yaml`:\r\n```\r\nreferences:\r\n  - https://docs.aws.amazon.com/workspaces/latest/adminguide/data-protection.html\r\n```\r\n\r\nWhen running `vale file.yaml`:\r\n```\r\n file.yaml\r\n 2:5   error  Did you really mean 'https'?    spelling.spelling\r\n 2:51  error  Did you really mean             spelling.spelling\r\n              'adminguide'?\r\n 2:78  error  Did you really mean 'html'?     spelling.spelling\r\n ```\r\n \r\n Expected that `TokenIgnores = (http[^\\n]+)` would result in 0 errors as the URL would be ignored.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/402"
   },
   {
    "Title": "Can't add words with spaces to exceptions",
    "Body": "- OS (e.g., macOS, Windows, Linux, etc.) - Linux\r\n- Install method (e.g., Go, Homebrew, direct download, etc.) - Homebrew\r\n- Vale version (the result of `vale -v`) - 2.14\r\n\r\nI'm trying to add an exception to https://developers.google.com/style/pronouns#personal-pronouns for these two:\r\n\r\n```\r\n**My Templates**\r\n**My Scripts**\r\n```\r\n\r\nbut it does not seem to work, also it won't let me use * in general because that has search implications, but it's also commonly used in Markdown. Any suggestions?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/401"
   },
   {
    "Title": "Assuming that [this](https://github.com/github/docs/blob/main/content/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions.md) is the file in question, you're not using a standard flavor of Markdown -- it looks like you're making significant use of Liquid-like template tags along with mixing nested Markdown inside raw HTML.",
    "Body": "Assuming that [this](https://github.com/github/docs/blob/main/content/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions.md) is the file in question, you're not using a standard flavor of Markdown -- it looks like you're making significant use of Liquid-like template tags along with mixing nested Markdown inside raw HTML.\r\n\r\nThis means that, as you've seen, there's no guarantee that Vale will be able to correctly parse and lint your content (GitHub itself, as you can see in the file preview I linked above, cannot render it correctly).\r\n\r\nIt's possible to work around these issues by using a combination of `BlockIgnores` and `TokenIgnores`, but it's not necessarily straightforward.\r\n\r\nAnother option would be to run Vale on your site's generated HTML, which should just work as you'd expect.\r\n\r\n_Originally posted by @jdkato in https://github.com/errata-ai/vale/issues/387#issuecomment-990191932_",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/399"
   },
   {
    "Title": "TokenIgnores are not registered",
    "Body": "I am trying to ignore issues in FIGNOS figure definitions. Something like this: `{#fig:a-b-c-d-e}`\r\n\r\nThough, adding *any* `TokenIgnores` directives to my ` .vale.ini` file does not get picked up when using `vale ls-config`:\r\n\r\n`.vale.ini`\r\n\r\n```\r\nTokenIgnores = (#\\+.+$)\r\n#TokenIgnores = (\\$+[^\\n$]+\\$+)\r\n#TokenIgnores = (\\*\\*\\{\\w*\\}\\*\\*)\r\n#TokenIgnores = (?s) *{.*fig.*}\r\n```\r\n\r\n`vale ls-config`\r\n\r\n```\r\n{\r\n...\r\n  \"TokenIgnores\": {},\r\n...\r\n}\r\n\r\n```\r\n\r\n- OS CENTOS8/WSL2\r\n- Install method: direct download\r\n- Vale version: 2.14.0\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/398"
   },
   {
    "Title": "metric styles don't seem to work with 2.13.0",
    "Body": "Thanks so much for adding metric styles, as this is exactly what my team is looking for. \r\n\r\nI can get other styles to work great locally, however running the metric styles in the Readability repo (https://github.com/errata-ai/readability/releases) seem to be giving me bad results. I've tried to adjust the config and some of the styles, but nothing seems to work. \r\n\r\nI have a file named `markdowntest.md` with this content: \r\n\r\n```\r\nThe frog jumped on the stool. \r\n\r\nThey were a gloomy suite of rooms, in a lowering pile of building up a yard, where it had so little business to be, that one could scarcely help fancying it must have run there when it was a young house, playing at hide-and-seek with other houses, and forgotten the way out again.\r\n\r\nFurther support for the view that educational expansion would reduce inequality was derived from the dualistic nature of developing societies. The economic structures of developing societies were said to consist of two sectors: a traditional sector that uses little capital, is relatively unproductive, does not require an educated labor force, and places a great emphasis on subsistence farming, small workshops and small commercial enterprises; a modern sector that uses advanced technology and capital, is far more productive, and requires a labor force with at least some schooling.\r\n\r\nAs he crossed toward the pharmacy at the corner he involuntarily turned his head because of a burst of light that had ricocheted from his temple, and saw, with that quick smile with which we greet a rainbow or a rose, a blindingly white parallelogram of sky being unloaded from the van—a dresser with mirrors across which, as across a cinema screen, passed a flawlessly clear reflection of boughs sliding and swaying not arboreally, but with a human vacillation, produced by the nature of those who were carrying this sky, these boughs, this gliding façade.\r\n``` \r\n\r\nThe results from running `vale markdowntest.md` at the command line are: \r\n\r\n```\r\nmarkdowntest.md\r\n 1:1  warning  Try to keep the Flesch reading  Readability.FleschReadingEase    \r\n               ease score (23.12) above 70.                                     \r\n 1:1  warning  Try to keep the Gunning-Fog     Readability.GunningFog           \r\n               index (24.44) below 10.                                          \r\n 1:1  warning  Try to keep the LIX score       Readability.LIX                  \r\n               (73.80) below 35.                                                \r\n 1:1  warning  Try to keep the Coleman–Liau    Readability.ColemanLiau          \r\n               Index grade (12.15) below 19.                                    \r\n 1:1  warning  Try to keep the Flesch–Kincaid  Readability.FleschKincaid        \r\n               grade level (22.16) below 8.                                     \r\n 1:1  warning  Try to keep the Automated       Readability.AutomatedReadability \r\n               Readability Index (25.84)                                        \r\n               below 8.                                                         \r\n 1:1  warning  Try to keep the SMOG grade      Readability.SMOG                 \r\n               (18.03) below 10.\r\n```\r\n\r\nAll the checks are all coming back at line 1, position 1. If I delete the first sentence (grade 5 according to an online Flesch–Kincaid calculator) it gives different results, but they are all at 1:1, and not at other lines in the file.  \r\n\r\nThe contents of my `.vale.ini` is: \r\n\r\n```\r\n# Vale configuration file.\r\n#\r\n# For more information, see https://errata-ai.gitbook.io/vale/getting-started/configuration.\r\n\r\nStylesPath = styles\r\nMinAlertLevel = suggestion\r\n\r\n[*.{md,txt}]\r\nBasedOnStyles = Readability\r\n```\r\n\r\nHere is my setup: \r\n\r\n- OS: macOS\r\n- Installed with Homebrew\r\n- Vale version: 2.13.0\r\n- Running locally (no Vale server) \r\n\r\nThanks! I really appreciate your help on this.  \r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/396"
   },
   {
    "Title": "Problem with spam ",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/395"
   },
   {
    "Title": "fix: allow regex with multiple groups",
    "Body": "Fix for #392 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/393"
   },
   {
    "Title": "'conditional' style rule fails on patterns with multiple regex groups",
    "Body": "### Discussed in https://github.com/errata-ai/vale/discussions/391\r\n\r\n\u003cdiv type='discussions-op-text'\u003e\r\n\r\n\u003csup\u003eOriginally posted by **Jc-L** December 13, 2021\u003c/sup\u003e\r\nI would like to extend a conditional rule so that a term can be defined in two ways:\r\n\r\n1. World Health Organization (WHO)\r\n2. WHO: World Health Organization\r\n\r\nA working regex for the second case is `([A-Z]{3,5})\\s*\\:\\s*(?:\\b[A-Z][a-z]+ )+`. This regex works when used alone, but when grouping both regex only the first part (before the `|`) matches, never the second part. Is there a way to make this work ?\r\n\r\n```\r\nfirst: \\b([A-Z]{3,5})\\b\r\nsecond: (?:\\b[A-Z][a-z]+ )+\\(([A-Z]{3,5})\\)|([A-Z]{3,5})\\s*\\:\\s*(?:\\b[A-Z][a-z]+ )+\r\n```\r\n\r\nI assume that this have to to with capture groups and having both using the same identifier, but unclear if this is possible at all ?\u003c/div\u003e\r\n\r\n`conditional.go` consider than the first regex group will contain the acronym. This assumption may not be correct with a regex containing a `|`.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/392"
   },
   {
    "Title": "TokenIgnores -- only one statement working at a time.",
    "Body": "\r\n## Env \r\n\r\nWindows \r\nVale Server 1.13.0\r\nAtom\r\n\r\n\r\n## Problem\r\n\r\nMultiple TokenIgnore statements don't work when added to the Vale.ini. However, they work on their own.\r\n\r\nFor example, here is my config. In this case, Token1 works, but not Token2\r\n\r\n```\r\nStylesPath = \"C:/Users/username/Desktop/styles\"\r\n\r\n[*.{md}]\r\n\r\n# List of styles to load. \r\n\r\nBasedOnStyles =  warning, error\r\n\r\n# Token1\r\nTokenIgnores = (\\{\\% include user-speech-inline.html .*\\%\\})\r\n\r\n# Token2\r\nTokenIgnores = (\\{\\% include image.html .*\\%\\})\r\n```\r\n\r\nIf I swap them... Token2 works, but Token1 stops working\r\n\r\n```\r\nStylesPath = \"C:/Users/username/Desktop/styles\"\r\n\r\n[*.{md}]\r\n\r\n# List of styles to load. \r\n\r\nBasedOnStyles =  warning, error\r\n\r\n# Token2\r\nTokenIgnores = (\\{\\% include image.html .*\\%\\})\r\n\r\n# Token1\r\nTokenIgnores = (\\{\\% include user-speech-inline.html .*\\%\\})\r\n\r\n```\r\n\r\n## Reference\r\n\r\nExample screenshots\r\n\r\n![test-case-1](https://user-images.githubusercontent.com/55214086/145652567-aa398ede-521d-46f2-926c-d95764c1c2b2.JPG)\r\n\r\n![test-case-2](https://user-images.githubusercontent.com/55214086/145652576-384819ce-5b99-4e32-a817-2f0ec10beeb7.JPG)\r\n\r\nText used \r\n\r\n```\r\n## Test\r\n\r\nHere is some text.  \r\n\r\n{% include user-speech-inline.html content=\"Who is Suprman\"%}\r\n\r\nHere is some text.\r\n\r\n{% include image.html file=\"filepath\" type=\"png\" max-width=\"90%\" url=\"https://myfile.com\" border=\"true\" %}\r\n```\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/389"
   },
   {
    "Title": "+# Auto detect text files and perform LF normalization",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/388"
   },
   {
    "Title": "Vale is picking up errors for stuff in code blocks in GitHub markdown",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\n- OS: macOS\r\n- Install method: Homebrew\r\n- vale version 2.11.2\r\n\r\nHere is my `.vale.ini`\r\n\r\n```\r\nStylesPath = vale\r\n\r\n# suggestion, warning or error\r\nMinAlertLevel = warning \r\n\r\nVocab = Docs\r\n\r\nIgnoredScopes = code,tt, em\r\n\r\n[*.md]\r\nBasedOnStyles = Vale,Vocab\r\n\r\nTokenIgnores = \\(\\/.*?\\), \\\r\n               {%.*?%}, \\\r\n               {{.*?}}, \\\r\n               (.|\\/|-)?github(\\/|-)?, \\\r\n               (\u003chttp[^\\n]+\u003e+?)\r\n```\r\n\r\nThere are the types of errors it is picking up:\r\n\r\n`content/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions.md:152:53:Vale.Terms:Use 'hostname' instead of 'HOSTNAME'.`\r\n`\r\n\u003cimg width=\"835\" alt=\"image\" src=\"https://user-images.githubusercontent.com/33761166/145460369-14e10663-219f-4d3a-900d-7c56fb738624.png\"\u003e\r\n\r\n`content/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions.md:236:21:Vale.Terms:Use 'npm' instead of 'NPM'.`\r\n\r\n\u003cimg width=\"487\" alt=\"image\" src=\"https://user-images.githubusercontent.com/33761166/145460429-f08204cf-2cbb-44ab-ba01-e6a6e9c57d5c.png\"\u003e\r\n\r\nNot sure what I am missing.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/387"
   },
   {
    "Title": "[Feedback Wanted] Vale-related asset management ",
    "Body": "Easily one of the most discussed aspects of Vale is how to best share, sync, and update its assets (`.vale.ini`, Styles, Vocab, ...).\r\n\r\nI've wanting to streamline this process for a while, but I have a few conditions that I'd like to meet:\r\n\r\n1. No VCS (Git, submodules, subtrees, ...).\r\n2. No symlinking or other filesystem-dependent methods.\r\n3. It should work for both editor plugins and CI testing.\r\n\r\n## The proposal: `packages`\r\n\r\nA `package` is simply a `.zip` file that contains a `.vale.ini` file and, optionally, a `StylesPath` directory. That's it.\r\n\r\nYou can host a `package` anywhere: as a GitHub release asset, on your own domain, as a local file, on a file sharing service, etc.\r\n\r\nUsing `packages` would look something like this:\r\n\r\n```ini\r\n[packages]\r\n# An example of a style-based package. It would include the Microsoft style\r\n# and a `.vale.ini` file that uses it.\r\nMicrosoft = \u003clink to release\u003e\r\n\r\n# An example of a config-based package. It would only include a `.vale.ini`\r\n# file that defines a configuration relevant for Hugo (such as ignoring\r\n# shortcodes).\r\nHugo = \u003clink to release\u003e\r\n\r\n# An example of both package with a style and configuration specific to\r\n# SomeOrg.\r\nSomeOrg = \u003clink to release\u003e\r\n\r\n[SomeOrg]\r\n# override/append configuration to the SomeOrg package.\r\nTokenIgnores = \r\n\r\n[*.md]\r\nPackages = Microsoft, Hugo, SomeOrg\r\n# ^ Package keys are merged; effectively \"inheriting\" the configuration\r\n# and `StylesPath`. \r\n\r\n# ... normal configuration: all keys merge with inherited packages; it's \r\n# effectively the local package.\r\n```\r\n\r\nThis system would allow for sharing, syncing, updating, and overriding of Vale-related assets. All configuration is contained to a single `.vale.ini`, so it would \"just work\" like a current local configuration (in both editors and CI).\r\n\r\n## Feedback\r\n\r\nThis is probably going to be the single biggest feature introduction in Vale's history, so I'd like to try to get it right.\r\n\r\nPlease feel free to leave your comments, suggestions, or other ideas entirely.\r\n\r\nRelated: #176, #273, #348, #384 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/386"
   },
   {
    "Title": "Migration to `filepath.WalkDir` breaks symlinked Style directories",
    "Body": "# Issue Encountered\r\n\r\nThe changes implemented [here](https://github.com/errata-ai/vale/commit/8fd4450dfc2bec763ac9a2c8a897908eb0850a4f) by @jdkato in order to migrate off of `godirwalk` to `filepath.WalkDir` break Vale for any users who have symbolic links in place for their Style directories.\r\n\r\nThis is because of intentional design in the the underlying library ([filepath.WalkDir](https://pkg.go.dev/path/filepath#WalkDir)):\r\n\u003e WalkDir does not follow symbolic links.\r\n\r\nAlso see this comment by an author https://github.com/golang/go/issues/4759#issuecomment-66074349\r\n\r\n## Use Case for Symlinks\r\n\r\nThe use case for having symbolic links to your Style directories is to allow multiple upstream Styles to be kept synced via Git in their respective file system locations. Then you symlink the different Git managed style directories into the Styles directory specified in `.vale.ini`.\r\n\r\n# Examples and Details\r\n\r\nVale CLI doesn't provide any output to the user to indicate this failure is happening, it completes successfully but simply shows no errors/warnings/suggestions. Example shown below.\r\n\r\n## Vale Version\r\n\r\n```shell\r\n$ vale --version\r\nvale version 2.13.0\r\n```\r\n\r\n## Vale INI\r\n\r\n```ini\r\nStylesPath = /opt/venv/vale_styles/styles\r\nMinAlertLevel = suggestion\r\n\r\n[*.md]\r\nBasedOnStyles = Microsoft, write-good, proselint, alex\r\nwrite-good.E-Prime = NO\r\n```\r\n\r\n## Styles Directory Output\r\n\r\nThis is the directory with all 4 configured styles symlinked to the Git repositories where they are being pulled from upstream.\r\n\r\n```shell\r\n$ ll /opt/venv/vale_styles/styles\r\ntotal 0\r\ndrwxr-xr-x  6 lykinsbd  admin   192B Sep 13 15:56 ./\r\ndrwxr-xr-x  8 lykinsbd  admin   256B Sep 15 20:44 ../\r\nlrwxr-xr-x  1 lykinsbd  admin    22B Sep 13 15:55 Microsoft@ -\u003e ../Microsoft/Microsoft\r\nlrwxr-xr-x  1 lykinsbd  admin    12B Sep 13 15:55 alex@ -\u003e ../alex/alex\r\nlrwxr-xr-x  1 lykinsbd  admin    22B Sep 13 15:56 proselint@ -\u003e ../proselint/proselint\r\nlrwxr-xr-x  1 lykinsbd  admin    24B Sep 13 15:56 write-good@ -\u003e ../write-good/write-good\r\n```\r\n\r\n## Example Failure\r\n\r\n```shell\r\nvale --config /opt/venv/vale_styles/.vale.ini README.md\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n## Prove symlinks are the problem\r\n\r\nI made a copy of the Microsoft style into the styles directory (instead of symlinking the directory), and re-ran vale:\r\n\r\n```shell\r\n$ rm Microsoft\r\nremove Microsoft? y\r\n$ cp -r ../Microsoft/Microsoft .\r\n$ ll \r\ntotal 0\r\ndrwxr-xr-x   6 lykinsbd  admin   192B Dec  2 10:15 ./\r\ndrwxr-xr-x   8 lykinsbd  admin   256B Sep 15 20:44 ../\r\ndrwxr-xr-x  45 lykinsbd  admin   1.4K Dec  2 10:15 Microsoft/\r\nlrwxr-xr-x   1 lykinsbd  admin    12B Sep 13 15:55 alex@ -\u003e ../alex/alex\r\nlrwxr-xr-x   1 lykinsbd  admin    22B Sep 13 15:56 proselint@ -\u003e ../proselint/proselint\r\nlrwxr-xr-x   1 lykinsbd  admin    24B Sep 13 15:56 write-good@ -\u003e ../write-good/write-good\r\n$ vale --config /opt/venv/vale_styles/.vale.ini README.md\r\n\u003csnip many problems!\u003e\r\n✖ 11 errors, 5 warnings and 26 suggestions in 1 file.\r\n```\r\n\r\n# Proposed Solutions\r\n\r\nI see two possible solutions, as outlined below.\r\n\r\n1. Implement a check for if a directory contains symlinks. If the directory does contain symlinks, utilize a slower/less optimized walk method to gather the styles.\r\n2. Document that symbolic links for Style directories are not supported in Vale.\r\n\r\nI am happy to take a pass at a PR for option number 1 if it is desired.  But if the desire is simply to document that thou-shalt-not-use-symlinks in the documentation somewhere, I'm fine with that too.\r\n\r\nThank you!\r\n\r\n-Brett",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/384"
   },
   {
    "Title": "Add support for ignores for JSON and YAML files",
    "Body": "We'd like to be able to leverage our Vale styles to check for content outside of the docs, namely UI strings in JSON and YAML files. To clean up the results, particularly around spelling, we'd like to be able to configure in the `.vale.ini` file to ignore the keys in the files using regex.\r\n\r\n```json\r\n{\r\n    \"section_devtools\": {\r\n        \"api\": \"Learn all about the Acme Test API.\",\r\n        \"cli\": \"Run commands to manage your anvils by using the Acme Test CLI.\"\r\n    },\r\n    \"section_recommended\": [\r\n        {\r\n            \"title\": \"Create an anvil\",\r\n            \"description\": \"Create an anvil to drop on an unsuspecting passerby.\",\r\n            \"href\": \"https://example.com/anvils\"\r\n        },\r\n        {\r\n            \"title\": \"Create a sign\",\r\n            \"description\": \"Create a sign to bamboozle your adversary.\",\r\n            \"href\": \"https://example.com/signs\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nWhile Vale can currently run on JSON and YAML files, through our testing, it seems that token ignores are not currently supported for these file types. For example, even if I set an ignore that's simply for `devtools` exactly (no real regex), this is still flagged in the JSON but not if I put it in a Markdown file. \r\n\r\nAfter some troubleshooting, I searched around in the existing issues and found a comment from about a year ago that noted that token ignores only work for the supported Markup languages: https://github.com/errata-ai/vale/issues/289#issuecomment-742284453 So, if this is currently unsupported (and not just a goof on my part trying to get this configured), this issue is to request support for ignores in JSON and YAML files.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/383"
   },
   {
    "Title": "refactor: move from io/ioutil to io and os packages",
    "Body": "The `io/ioutil` package has been deprecated in Go 1.16 (See https://golang.org/doc/go1.16#ioutil). Since vale has been upgraded to Go 1.17 (662d889ce6acf942f4636075c592ee8722c6776c), this PR replaces the existing `io/ioutil` functions with their new definitions in `io` and `os` packages.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/381"
   },
   {
    "Title": "Improve our Hunspell implementation",
    "Body": "#372 exposed some weaknesses in our implementation (and some ambiguities in Hunspell) and I think the entire `pkg/spell` package could use some re-thinking in terms of both performance and accuracy.\r\n\r\nWe may be able to learn something from the [spylls](https://spylls.readthedocs.io/en/latest/) project.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/380"
   },
   {
    "Title": "feat: Support Severity in line output",
    "Body": "This adds severity to the line output. \r\n\r\n```\r\n.../hybrids.md:25:270:warning:Google.Will:Avoid using 'will'.\r\n.../hybrids.md:25:291:error:Vale.Spelling:Did you really mean 'squrriels'?\r\n```\r\n\r\nPrevious\r\n\r\n```\r\n.../hybrids.md:25:270:Google.Will:Avoid using 'will'.\r\n.../hybrids.md:25:291:Vale.Spelling:Did you really mean 'squrriels'?\r\n```\r\n\r\nThis **will break** support for previous matches so maybe a better approach to adding this to the line output. Maybe adding another version of the line output for backwards compat. \r\n\r\n```\r\nvale --output=line-severity\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/379"
   },
   {
    "Title": "Vale seems to have somewhat irregular behavior on AsciiDoc",
    "Body": "Given the following `~/.vale.ini`:\r\n\r\n```\r\nStylesPath = .vale-styles\r\n\r\n[*.adoc]\r\nBasedOnStyles = FooBarBranding\r\n```\r\n\r\nand the following rule  at `~/.vale-styles/FooBarBranding/FooBar.yml`:\r\n\r\n```\r\nextends: substitution\r\nmessage: \"Use '%s' instead of '%s'.\"\r\nlink: 'https://style.google.com/style/word-list'\r\nlevel: error\r\nignorecase: false\r\naction:\r\n  name: replace\r\nswap:\r\n  Foobar: FooBar\r\n  foobar: FooBar\r\n```\r\n\r\nI get the following behavior. On this file, links are not properly skipped...\r\n\r\n```\r\n$ cat foo.adoc \r\nAt https://cloud.example.com/.\r\n\r\nAnsible collection from https://cloud.example.com/foobar.\r\n\r\nInstall the `foo.bar` Thing collection from.\r\nIt requires that python3-foobar modules are installed.\r\n$ vale foo.adoc \r\n\r\n foo.adoc\r\n 3:51  error  Use 'FooBar' instead of         FooBarBranding.FooBar \r\n              'foobar'.                                             \r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nBut if I remove the last line from that file (!), it seems they are...\r\n\r\n```\r\n$ cat bar.adoc\r\nAt https://cloud.example.com/.\r\n\r\nAnsible collection from https://cloud.example.com/foobar.\r\n\r\nInstall the `foo.bar` Thing collection from.\r\n$ vale bar.adoc\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file.\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/376"
   },
   {
    "Title": "Substitution extension message: reverse `%s` order",
    "Body": "Is it correct behaviour that `%s` in a message first outputs the observed string, and not the expected string?\r\n\r\n```\r\nextends: substitution\r\nmessage: \"Was '%s' instead of '%s'\"\r\nlevel: suggestion\r\nnonword: false\r\naction:\r\n  name: replace\r\nswap:\r\n  1: 2\r\n```\r\n\r\nMessage is `Was '2' instead of '1'`. Expected `Was '1' instead of '2'`. If only one `%s` is used, it probably should output the observed text first, and not the expected text (which is not in the document yet).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/374"
   },
   {
    "Title": "Severity of Vale.Terms cannot be adjusted",
    "Body": "It does not appear to be possible to adjust the severity of `Vale.Terms`. Setting it to 'NO' suppresses the output altogether, but regardless of its setting of 'suggestion', 'warning', 'error', it still shows up as an error.\r\n\r\nI have a rather simple `.vale.ini`:\r\n```\r\n# This goes in a file named either `.vale.ini` or `_vale.ini`.\r\nStylesPath = .vale/styles\r\nVocab = MyVocab\r\nMinAlertLevel = warning # suggestion, warning or error\r\n\r\n# Only Markdown and .txt files; change to whatever you're using.\r\n[{,!(node_modules)/**/}*.md]\r\n# List of styles to load.\r\nBasedOnStyles = Vale, Microsoft\r\nVocab = MyVocab\r\n\r\nMicrosoft.HeadingAcronyms = suggestion\r\nMicrosoft.Contractions = suggestion\r\nVale.Terms = suggestion\r\n```\r\n\r\nInstall information:\r\n- OS (e.g., macOS, Windows, Linux, etc.): MacOS 11.6\r\n- Install method (e.g., Go, Homebrew, direct download, etc.): `brew install vale`\r\n- Vale version (the result of `vale -v`): `vale version 2.11.1`\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/373"
   },
   {
    "Title": "Dictionaries: `FLAG stanza not supported` and `SFX stanza had 11 fields, expected 4 or 5`",
    "Body": "It seems Vale cannot use some Hunspell dictionaries for now?\r\n\r\n```\r\ndir\r\n│   .vale.ini\r\n│   testdoc.rst\r\n│\r\n├───dicts\r\n│       ru_RU.aff\r\n│       ru_RU.dic\r\n│\r\n└───styles\r\n    └───base\r\n            ru-dictionary.yml\r\n```\r\n### ru-dictionary.yml\r\n```\r\nextends: spelling\r\nmessage: \"'%s' is a typo\"\r\ndicpath: dicts\r\ndictionaries:\r\n  - ru_RU\r\n```\r\n\r\n### Command\r\n```\r\n$ vale testdoc.rst\r\n```\r\n\r\n### Result\r\n```\r\nE201 Invalid value provided [N:/repo/vale-linter/styles/base/ru-dictionary.yml:1:1]:\r\n\r\n   1* extends: spelling\r\n   2  message: \"'%s' is a typo\"\r\n   3  dicpath: dicts\r\n\r\nFLAG stanza not yet supported\r\n\r\nExecution stopped with code 1.\r\n```\r\n\r\n### If `FLAG …` stanza deleted…\r\n\r\n```\r\nE201 Invalid value provided [N:/repo/vale-linter/styles/base/ru-dictionary.yml:1:1]:\r\n                                                                                    \r\n   1* extends: spelling                                                             \r\n   2  message: \"'%s' is a typo\"                                                     \r\n   3  dicpath: dicts                                                                \r\n                                                                                    \r\nSFX stanza had 11 fields, expected 4 or 5\r\n```\r\n\r\n## `ru_RU.aff` [1:20]\r\n\r\n```\r\nSET UTF-8\r\nTRY оаитенрсвйлпкьыяудмзшбчгщюжцёхфэъАВСМКГПТЕИЛФНДОЭРЗЮЯБХЖШЦУЧЬЫЪЩЙЁ\r\n\r\nFLAG long\r\n\r\nSFX II Y 61\r\nSFX II а и [гкхжчшщ]а #сорока --\u003e сороки (е.ч.р.п. и мн.ч.и.п.+в.п.)\r\nSFX II а ы [^гкхжчшщ]а #шуба --\u003e шубы (е.ч.р.п. и мн.ч.и.п.+в.п.)\r\nSFX II а е а #сорока --\u003e сороке (е.ч.д.п.+п.п.)\r\nSFX II а у а #сорока --\u003e сороку (е.ч.в.п.)\r\nSFX II а ам а #сорока --\u003e сорокам (мн.ч.д.п.)\r\nSFX II а ами а #сорока --\u003e сороками (мн.ч.т.п.)\r\nSFX II а ах а #сорока --\u003e сороках (мн.ч.п.п.)\r\nSFX II я и я #баня --\u003e бани (е.ч.р.п.+д.п.(слова на -ия) и мн.ч.и.п.+в.п.)\r\nSFX II я е [^и]я #баня --\u003e бане (е.ч.д.п.+п.п.)\r\nSFX II я ю я #баня --\u003e баню (е.ч.в.п.)\r\nSFX II я ей я #баня --\u003e баней (е.ч.т1.п.)\r\nSFX II я ею я #баня --\u003e банею (е.ч.т2.п.)\r\nSFX II я ям я #баня --\u003e баням (мн.ч.д.п.)\r\nSFX II я ями я #баня --\u003e банями (мн.ч.т.п.)\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/372"
   },
   {
    "Title": "2.11.x update flags Japanese characters on Linux",
    "Body": "Here there — I've run into a strange problem after upgrading to 2.11.x. \r\n\r\nFor years now, we've been successfully using Vale to check all of our documentation in both English and Japanese. The spelling test ignored the Japanese characters, as documented. After upgrading to version 2.11.x, Vale still ignores those characters when run on macOS. But when version 2.11.x is run on TravisCI, the spelling test flags all of the Japanese characters. We didn't change anything in the configuration files, so we're not sure what could be causing this other than the update to 2.11.x.\r\n\r\n### Spelling.yml\r\n\r\n```yaml\r\nextends: spelling\r\nmessage: \"Did you really mean '%s'?\"\r\nlevel: error\r\nignore: .vale/dictionary.txt\r\n```\r\n\r\n### macOS output\r\n\r\n```bash\r\nlobo:fastly-docs mcone$ vale --v\r\nvale version 2.11.1\r\nlobo:fastly-docs mcone$ rake vale\r\nTesting vale structure... Ok!\r\nTesting vale command... Ok!\r\n./bin/vale collections/_changelog collections/_changelog_archive collections/_changelog_significant collections/_en_guides collections/_ja_guides collections/_en_guides_primary collections/_en_guides_secondary collections/_products collections/_products_primary collections/_waf_rule_sets\r\n✔ 0 errors, 0 warnings and 0 suggestions in 792 files.\r\n```\r\n\r\n### Install script for TravisCI\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\ncurl -sfL https://install.goreleaser.com/github.com/ValeLint/vale.sh | sh -s v2.11.1\r\nexport PATH=\"./bin:$PATH\"\r\nvale -v\r\n```\r\n\r\n### Excerpt from TravisCI output with Vale 2.11.x\r\n\r\n```\r\nscript/install_vale\r\nValeLint/vale info checking GitHub for tag 'v2.11.1'\r\nValeLint/vale info found version: 2.11.1 for v2.11.1/Linux/64-bit\r\nValeLint/vale info installed ./bin/vale\r\nvale version 2.11.1\r\nTesting vale structure... Ok!\r\nTesting vale command... Ok!\r\n./bin/vale collections/_changelog collections/_changelog_archive collections/_changelog_significant collections/_en_guides collections/_ja_guides collections/_en_guides_primary collections/_en_guides_secondary collections/_products collections/_products_primary collections/_waf_rule_sets\r\n\r\ncollections/_changelog/2020-04-01-changes.md\r\n62:25  error  Did you really mean '日本語'?   Fastly.Spelling \r\n64:4   error  Did you really mean             Fastly.Spelling \r\n            'よくある'?                                     \r\n64:13  error  Did you really mean 'エラー'?   Fastly.Spelling \r\n65:4   error  Did you really mean '無料'?     Fastly.Spelling \r\n65:11  error  Did you really mean 'の設定'?   Fastly.Spelling \r\n66:8   error  Did you really mean             Fastly.Spelling \r\n            'オプション'?   \r\n```\r\n\r\n### Excerpt from TravisCI output with Vale 2.10.7\r\n\r\n```\r\nscript/install_vale\r\nValeLint/vale info checking GitHub for tag 'v2.10.7'\r\nValeLint/vale info found version: 2.10.7 for v2.10.7/Linux/64-bit\r\nValeLint/vale info installed ./bin/vale\r\nvale version 2.10.7\r\nTesting vale structure... Ok!\r\nTesting vale command... Ok!\r\n./bin/vale collections/_changelog collections/_changelog_archive collections/_changelog_significant collections/_en_guides collections/_ja_guides collections/_en_guides_primary collections/_en_guides_secondary collections/_products collections/_products_primary collections/_waf_rule_sets\r\n✔ 0 errors, 0 warnings and 0 suggestions in 790 files.\r\n```\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/371"
   },
   {
    "Title": "Vale exits with panic: runtime error: slice bounds out of range [:53] with capacity 52",
    "Body": "On Linux, using 2.11.0 (downloaded binary), I'm testing Vale on our documentation source that's written in MadCap Flare (which is, basically, HTML plus some Flare-specific tags). It works fine on most files, but on a few it crashes:\r\n\r\n```\r\npanic: runtime error: slice bounds out of range [:53] with capacity 52\r\n\r\ngoroutine 13 [running]:\r\ngithub.com/errata-ai/vale/v2/internal/check.re2Loc(...)\r\n\t/home/runner/work/vale/vale/internal/check/definition.go:132\r\ngithub.com/errata-ai/vale/v2/internal/check.makeAlert({{{0x0, 0x0}, {0x0, 0x0, 0x0}}, {0x0, 0x0}, {0xc00160e0b0, 0xe}, {0xc00160e0f0, ...}, ...}, ...)\r\n\t/home/runner/work/vale/vale/internal/check/definition.go:136 +0x29b\r\ngithub.com/errata-ai/vale/v2/internal/check.Capitalization.Run({{{{0x0, 0x0}, {0x0, 0x0, 0x0}}, {0x0, 0x0}, {0xc00160e0b0, 0xe}, {0xc00160e0f0, ...}, ...}, ...}, ...)\r\n\t/home/runner/work/vale/vale/internal/check/capitalization.go:95 +0x10c\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintBlock(0xc0005198c0, 0xc00080c160, {{0xc0015e6870, 0xef}, 0x5, {0xc00064bda0, 0x13}, {0xc0006eb200, 0x35}}, 0x9, ...)\r\n\t/home/runner/work/vale/vale/internal/lint/lint.go:225 +0x229\r\ngithub.com/errata-ai/vale/v2/internal/lint.Linter.lintScope({0xc00050c400, 0x0, 0x0, 0xc000360630, 0x12a48e0, {0x0, 0x0, 0x0}, {0x0, 0x0, ...}, ...}, ...)\r\n\t/home/runner/work/vale/vale/internal/lint/ast.go:133 +0x44b\r\ngithub.com/errata-ai/vale/v2/internal/lint.Linter.lintHTMLTokens({0xc00050c400, 0x0, 0x0, 0xc000360630, 0x12a48e0, {0x0, 0x0, 0x0}, {0x0, 0x0, ...}, ...}, ...)\r\n\t/home/runner/work/vale/vale/internal/lint/ast.go:105 +0xad0\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintHTML(0xc0006d3980, 0xc00080c160)\r\n\t/home/runner/work/vale/vale/internal/lint/html.go:27 +0xcb\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFile(0xc0006d3980, {0x7ffc680962b3, 0xc0017103c0})\r\n\t/home/runner/work/vale/vale/internal/lint/lint.go:182 +0x405\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFiles.func1.1.1({0x7ffc680962b3, 0x1})\r\n\t/home/runner/work/vale/vale/internal/lint/lint.go:119 +0x5b\r\ncreated by github.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFiles.func1.1\r\n\t/home/runner/work/vale/vale/internal/lint/lint.go:117 +0x21d\r\n```\r\n\r\nI'm using the Microsoft ruleset:\r\n\r\n```\t\r\n        StylesPath = /home/myhome/git/styles\r\n\tMinAlertLevel = suggestion\r\n\r\n\t[*.htm]\r\n\tBasedOnStyles = Microsoft\r\n```\r\n\r\nAfter commenting out lines in one of the problematic source files to narrow down the issue, I was able to isolate the crash (at least in one case) to an HTML entity (`\u0026#160;` aka non-breaking space) within a heading that will trigger the Microsoft.Headings  rule for sentence-style capitalization. Here's a minimal reproducer:\r\n\r\n``` \r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003chtml xmlns:MadCap=\"http://www.madcapsoftware.com/Schemas/MadCap.xsd\"\u003e\r\n    \u003chead\u003e\r\n    \u003c/head\u003e\r\n    \u003cbody\u003e\r\n        \u003ch1\u003eSomething\u0026#160;Weird is happening With Vale With Entities\u003c/h1\u003e\r\n    \u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\nThe bug seems sensitive to the content of the heading (perhaps its length?), in addition to the entity in the line. Specifically, if I delete some text after the entity in the heading, the error does not trigger. I.e. delete the word \"Entities\" from the h1 tag, and vale doesn't crash. Also, it doesn't trigger the heading capitalization rule suggestion. Deleting the entity has vale flag the heading with the sentence-style capitalization rule.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/370"
   },
   {
    "Title": "Vale 2.11 produces unexpected repetition warnings",
    "Body": "- OS: GitHub action\r\n- Vale version 2.11.0\r\n\r\nVale has started producing what seems like incorrect warnings in a PR of a file we didn't change (upgraded from 2.10.2 to 2.11.0).\r\n\r\nFor example where we have the text:\r\n\r\n```\r\nFor multi-node clusters, Aiven for OpenSearch automatically increases the ``number_of_replicas`` value to 1 if it is set to 0. This is done to avoid data loss if one node is lost.\r\n```\r\n\r\nThe error says:\r\n```\r\n [error] Vale.Repetition\r\n\r\n'i' is repeated!\r\n```\r\nIt says one character is repeated, but in the text it doesn't seem to be. I've disabled the `Vale.Repetition` rule for now but I'd appreciate some advice on this (it's a public repo if that helps https://github.com/aiven/devportal)\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/369"
   },
   {
    "Title": "Set up GitHub Actions",
    "Body": "Hello @jdkato! 👋 \r\nWould you welcome a PR that sets up CI to do its job? Release on tags, test on each commit?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/368"
   },
   {
    "Title": "occurrence: `panic: runtime error: index out of range [0] with length 0` when min \u003e 0",
    "Body": "* macOS\r\n* homebrew\r\n* 2.10.6\r\n\r\n\r\nWhen specifying an `occurrence` style with a `min` \u003e 0 and a `token` and the token not in the text being processed, the following panic happens:\r\n\r\n```\r\npanic: runtime error: index out of range [0] with length 0\r\n\r\ngoroutine 13 [running]:\r\ngithub.com/errata-ai/vale/v2/internal/check.Occurrence.Run({{{{0x0, 0x0}, {0x0, 0x0, 0x0}}, {0x0, 0x0}, {0xc000988720, 0xa}, {0xc000988828, ...}, ...}, ...}, ...)\r\n        github.com/errata-ai/vale/v2/internal/check/occurrence.go:66 +0x24b\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintBlock(0xc000a81918, 0xc00063e160, {{0xc0019fa900, 0x451}, 0xffffffffffffffff, {0xc001659860, 0x7}, {0xc0019fa900, 0x451}}, 0x21, ...)\r\n        github.com/errata-ai/vale/v2/internal/lint/lint.go:225 +0x229\r\ngithub.com/errata-ai/vale/v2/internal/lint.Linter.lintSizedScopes({0xc000620cc0, 0x0, 0x0, 0xc0004f9188, 0x1ea97a0, {0x0, 0x0, 0x0}, {0x0, 0x0, ...}, ...}, ...)\r\n        github.com/errata-ai/vale/v2/internal/lint/ast.go:164 +0x411\r\ngithub.com/errata-ai/vale/v2/internal/lint.Linter.lintHTMLTokens({0xc000620cc0, 0x0, 0x0, 0xc0004f9188, 0x1ea97a0, {0x0, 0x0, 0x0}, {0x0, 0x0, ...}, ...}, ...)\r\n        github.com/errata-ai/vale/v2/internal/lint/ast.go:118 +0xb45\r\ngithub.com/errata-ai/vale/v2/internal/lint.Linter.lintMarkdown({0xc000620cc0, 0x0, 0x0, 0xc0004f9188, 0x1ea97a0, {0x0, 0x0, 0x0}, {0x0, 0x0, ...}, ...}, ...)\r\n        github.com/errata-ai/vale/v2/internal/lint/md.go:59 +0x194\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFile(0xc001097c80, {0x7ffeefbff525, 0xc0001081e0})\r\n        github.com/errata-ai/vale/v2/internal/lint/lint.go:174 +0x2f8\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFiles.func1.1.1({0x7ffeefbff525, 0x1})\r\n        github.com/errata-ai/vale/v2/internal/lint/lint.go:119 +0x5b\r\ncreated by github.com/errata-ai/vale/v2/internal/lint.(*Linter).lintFiles.func1.1\r\n        github.com/errata-ai/vale/v2/internal/lint/lint.go:117 +0x21d\r\n```\r\n\r\nLooking at the [source](https://github.com/errata-ai/vale/blob/v2/internal/check/occurrence.go#L66), it looks like `loc` is empty since no match is found. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/367"
   },
   {
    "Title": "Inverse of `existence`?",
    "Body": "- macOS\r\n- homebrew\r\n- 2.10.6\r\n\r\n\r\nI'm wondering if there's a way to ensure certain patterns/tokens **DO** exist in a document. For instance, ensuring there is a heading called \"Installation\".\r\n\r\nIs this possible, if so how?  \r\n\r\nI also was wondering if there was a reference for the available fields in style .yaml files. The documentation is missing some field explanations that are in some examples. For instance, `level` or `scope` don't have a list of possible values.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/366"
   },
   {
    "Title": "Support code-climate output",
    "Body": ":wave: it would be great if support for [code-climate](https://github.com/codeclimate/codeclimate) reports was added in the [`--output` option](https://docs.errata.ai/vale/cli#--output)!\r\n\r\nSure, you could do this using a template, but it would be nice if this was a built-in option. I see https://github.com/golangci/golangci-lint has this option, so you might get an idea how this is implemented.\r\n\r\nMy current hack is to use a template:\r\n\r\n```golang\r\n{{- /* Modify Vale's output https://docs.errata.ai/vale/cli#--output */ -}}\r\n\r\n{{- /* Keep track of our various counts */ -}}\r\n\r\n{{- $e := 0 -}}\r\n{{- $w := 0 -}}\r\n{{- $s := 0 -}}\r\n{{- $f := 0 -}}\r\n\r\n{{- /* Range over the linted files */ -}}\r\n\r\n{{- range .Files}}\r\n\r\n{{- $f = add1 $f -}}\r\n{{- $path := .Path -}}\r\n\r\n{{- /* Range over the file's alerts */ -}}\r\n[\r\n\r\n{{- range .Alerts -}}\r\n\r\n{{- $error := \"\" -}}\r\n{{- if eq .Severity \"error\" -}}\r\n    {{- $error = .Severity -}}\r\n    {{- $e = add1 $e  -}}\r\n{{- else if eq .Severity \"warning\" -}}\r\n    {{- $error = .Severity -}}\r\n    {{- $w = add1 $w -}}\r\n{{- else -}}\r\n    {{- $error = .Severity -}}\r\n    {{- $s = add1 $s -}}\r\n{{- end}}\r\n\r\n{{- /* Variables setup */ -}}\r\n\r\n{{- $path = $path -}}\r\n{{- $loc := printf \"%d\" .Line -}}\r\n{{- $check := printf \"%s\" .Check -}}\r\n{{- $message := printf \"%s\" .Message -}}\r\n{{- $link := printf \"%s\" .Link -}}\r\n\r\n{{- /* Output */ -}}\r\n\r\n  {\r\n    \"description\": \"{{ $message }}\",\r\n    \"fingerprint\": \"{{ $path }}-{{ $loc }}\",\r\n    \"severity\": \"{{ $error }}\",\r\n    \"location\": {\r\n      \"path\": \"{{ $path }}\",\r\n      \"lines\": {\r\n        \"begin\": {{ $loc }}\r\n      }\r\n    }\r\n  },\r\n{{end -}}\r\n{{end -}}\r\n]\r\n```\r\n\r\nI don't know how to omit the last comma for the last object though :thinking: ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/365"
   },
   {
    "Title": "Fix typo",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/364"
   },
   {
    "Title": "Difficulties in using regex filters in spelling.yml",
    "Body": "Hi,\r\n\r\nI use Vale for quite a long time now, and it works really great.\r\nI want to update one of our style guide by adding filters to the spelling yml. After the change, I'm still getting errors referring to the lines I try to ignore.\r\n\r\nThe content of the `spelling.yml` file:\r\n\r\n```yml\r\nextends: spelling\r\nmessage: \"'%s' is a typo!\"\r\ncustom: true\r\nlevel: error\r\nfilters:\r\n- '`[a-zA-Z0-9_\\/\\.\\-\"\\{\\} :@\u003c\u003e%$_,\\.;\\(\\)]+`' # to ignore inline codes\r\n- '\\x60\\x60\\x60[0-9A-Za-z]+\\n[ 0-9A-Za-z!\\x60\"#$%\u0026\\(\\)\\*\\+,\\-.\\/:;\u003c=\u003e?@\\[\\\\\\]^_{|}~\\]\\n]+?\\x60\\x60\\x60' # to ignore fenced code blocks\r\n- '\\[[ 0-9A-Za-z!\"#$%\u0026\\(\\)\\*\\+,\\-.\\/:;\u003c=\u003e?@\\[\\\\\\]^_\\x60{|}~\\]]+\\]\\([ 0-9A-Za-z!\"#$%\u0026\\(\\)\\*\\+,\\-.\\/:;\u003c=\u003e?@\\[\\\\\\]^_\\x60{|}~\\]]+\\)' # to ignore md links\r\n- 'uid[0-9]*'\r\n- '[0-9]+[\\.0-9]*px'\r\n- 'group[0-9]*'\r\n- 'alpha[\\.0-9]*'\r\n- 'q[1-4]+'\r\n- 'tab[0-9]*'\r\n- 'header[0-9]*'\r\n- 'h[0-9]*'\r\n- 'heading[0-9]*'\r\nignore:\r\n  - Internal/ignore/base.txt\r\n```\r\n\r\n**Example:**\r\n\r\n_Source file (MD):_\r\n\r\n```md\r\nAdd the following:\r\n\r\n    ```md\r\n    Host code.company-name.net\r\n    User your-gerrit-username1\r\n    Port 123456\r\n    ```\r\n\r\n    ```bash\r\n    for i in $PWD/git-hooks/*; do ln -s $i .git/hooks/; done\r\n    ```\r\n```\r\n_Output:_\r\n\r\n`error       'username1' is a typo!             Internal.Spelling`\r\n`error       'PWD' is a typo!                       Internal.Spelling`\r\n\r\n_Expected behaviour:_\r\n\r\nDon't list the errors in lines that match with the given regex patterns.\r\n\r\nThe regex patterns work as expected outside Vale. I tested them with [Rego](https://regoio.herokuapp.com/) and [regex101](https://regex101.com/). Please help me find out what could cause the problem. Thank you for your help in advance.\r\n\r\n- OS: macOS Catalina 10.15\r\n- Install method: Homebrew\r\n- Vale version: 1.7.1\r\n- Usage method: from CLI, `vale --ignore-syntax`\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/363"
   },
   {
    "Title": "Struggling with regular expression matching",
    "Body": "I've been struggling with regular expression matching for few days now trying to get the following to work:\r\n\r\nIPv6Addresses.yml:\r\n```\r\nextends: existence\r\nmessage: \"Use only RFC3849 IPv6 addresses.\"\r\nlink: 'https://saltstack.gitlab.io/open/docs/salt-user-guide/topics/style-guide.html#samples-code-commands-and-ip-addresses'\r\nlevel: error\r\nscope: raw\r\ntokens:\r\n  - '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:[0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){5}(:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|((:[0-9A-Fa-f]{1,4}){1,2})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,3})|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,4})|:))|(([0-9A-Fa-f]{1,4}:){2}((((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|(:[0-9A-Fa-f]{1,4}){1,5})|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,6})|:))|(:((((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|(:[0-9A-Fa-f]{1,4}){1,7})|:)))'\r\nraw:\r\n  - '(?!(2001:0?[Dd][Bb]8:([0-9A-Fa-f]{1,4}:){5}([0-9A-Fa-f]{1,4}|:))|(2001:0?[Dd][Bb]8:([0-9A-Fa-f]{1,4}:){4}(((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:[0-9A-Fa-f]{1,4}|:))|(2001:0?[Dd][Bb]8:([0-9A-Fa-f]{1,4}:){3}(:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|((:[0-9A-Fa-f]{1,4}){1,2})|:))|(2001:0?[Dd][Bb]8:([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,3})|:))|(2001:0?[Dd][Bb]8:([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,4})|:))|(2001:0?[Dd][Bb]8:((((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|(:[0-9A-Fa-f]{1,4}){1,5})|:))|([Ff][Ee][8-9A-Ba-b][0-9A-Fa-f]:([0-9A-Fa-f]{1,4}:){6}([0-9A-Fa-f]{1,4}|:))|([Ff][Ee][8-9A-Ba-b][0-9A-Fa-f]:([0-9A-Fa-f]{1,4}:){5}(((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:[0-9A-Fa-f]{1,4}|:))|([Ff][Ee][8-9A-Ba-b][0-9A-Fa-f]:([0-9A-Fa-f]{1,4}:){4}(:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|((:[0-9A-Fa-f]{1,4}){1,2})|:))|([Ff][Ee][8-9A-Ba-b][0-9A-Fa-f]:([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,3})|:))|([Ff][Ee][8-9A-Ba-b][0-9A-Fa-f]:([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,4})|:))|([Ff][Ee][8-9A-Ba-b][0-9A-Fa-f]:([0-9A-Fa-f]{1,4}:){1}((((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|(:[0-9A-Fa-f]{1,4}){1,5})|:))|([Ff][Ee][8-9A-Ba-b][0-9A-Fa-f]:(((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|((:[0-9A-Fa-f]{1,4}){1,6})|:)))'\r\n```\r\n\r\ntest.md:\r\n```\r\nfe80:0000:0000:0000:0204:61ff:fe9d:f156\r\n\r\nfe80:0:0:0:204:61ff:fe9d:f156\r\n\r\nfe80::204:61ff:fe9d:f156\r\n\r\nfe80:0000:0000:0000:0204:61ff:254.157.241.86\r\n\r\nfe80:0:0:0:0204:61ff:254.157.241.86\r\n\r\nfe80::204:61ff:254.157.241.86\r\n\r\n2001:db8::111a\r\n\r\n2001:0db8:0000:0000:0000:0000:0000:0001\r\n\r\n2001:db8:0:0:0:0:0:1\r\n\r\n2001:db8::204:61ff:254.157.241.86\r\n\r\n2001:4860:4860::8888 \r\n\r\n::1\r\n\r\n 2001:db8:0:0:0:0:0:1\r\n\r\n\"2001:db8:0:0:0:0:0:1\"\r\n\r\n'2001:db8:0:0:0:0:0:1'\r\n\r\n \"2001:4860:4860::8888\"\r\n\r\n2001:4860:4860:0:0:0:0:8888\r\n\r\n2001:4860:4860:0000:0000:0000:0000:8888\r\n\r\n2001:4860::204:61ff:254.157.241.86\r\n\r\n2001:4860:4860:0000:204:61ff:254.157.241.86\r\n```\r\n\r\nExpected output:\r\n```\r\n$ vale --output=line --sort --normalize --relative test.md\r\ntest.md:21:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:31:3:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:33:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:35:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:37:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:39:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\n\r\n```\r\n\r\nActual output:\r\n```\r\n$ vale --output=line --sort --normalize --relative test.md\r\ntest.md:5:5:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:11:5:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:13:6:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:19:6:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:21:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:31:3:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:33:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:35:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:37:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\ntest.md:39:1:Salt.IPv6Addresses:Use only RFC3849 IPv6 addresses.\r\n```\r\n\r\nI've tried playing around with `nonword: true` and adding ([^\\\\''\\\\\"\"]) to the beginning of the the regular expressions but no matter what I do, I can't get the the matches I need (either it matches too much, like substrings of the exceptions, or not enough). It would probably be much easier if the `Exceptions` functionality was restored so that matched tokens could be further compared to the exceptions rather than trying to parse exceptions out of the whole text.\r\n\r\nThat being said, I'd appreciate any help in trying to get this working, I've been beating my head against it for quite some time.\r\n\r\n- OS: Fedora 31 on WSL\r\n- Install method: Direct download\r\n- Vale version: 2.10.5",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/362"
   },
   {
    "Title": "TokenIgnores not working",
    "Body": "I am trying to make `TokenIgnores` work on\r\n\r\n```\r\nbash-5.1$ vale -v\r\nvale version 2.10.5\r\n```\r\n\r\nIn [the documentation](https://docs.errata.ai/vale-server/concepts/scoping#non-standard-markup), I found a `TokenIgnores` regexp that matches inline math`$...$`.\r\n\r\nI added the regexp to my `.vale.ini`:\r\n\r\n```\r\nbash-5.1$ vale ls-config\r\n{\r\n\u003csnip\u003e\r\n  \"TokenIgnores\": {\r\n    \"*\": [\r\n      \"($+[^\\\\n$]+$+)\"\r\n    ]\r\n  },\r\n\u003csnip\u003e\r\n}\r\n```\r\n\r\nThen, I tested:\r\n\r\n```\r\nbash-5.1$ echo 'This $is very interesting$!' | vale --ext=.md\r\n\r\n stdin.md\r\n 1:6  warning  'very' is a weasel word!   write-good.Weasel \r\n\r\n✖ 0 errors, 1 warning and 0 suggestions in stdin.\r\n```\r\n\r\nWhy is `vale` not ignoring the text between `$...$`?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/361"
   },
   {
    "Title": "[Feature request]: Create a default `.vale.ini` configuration on install",
    "Body": "Looked like a cool tool, so I thought I would give it a try.\r\n\r\nI followed the [Installation instructions]( https://docs.errata.ai/vale/install), and installed via `brew install vale`\r\n\r\nThen I glanced at [Usage](https://docs.errata.ai/vale/cli) and tried to run some commands:\r\n\r\n```\r\n❯ vale -v\r\nvale version 2.10.4\r\n```\r\n\r\n```\r\n❯ vale SomeValidFileNameHere.md\r\nE100 [.vale.ini] Runtime error\r\n\r\nopen : no such file or directory\r\n\r\nExecution stopped with code 1.\r\n```\r\n\r\n```\r\n❯ vale ls-config\r\nE100 [.vale.ini] Runtime error\r\n\r\nopen : no such file or directory\r\n\r\nExecution stopped with code 1.\r\n```\r\n\r\nOkay... slightly cryptic error message. But I could see `.vale.ini` + `no such file` there, so I tried:\r\n\r\n```\r\n❯ touch ~/.vale.ini\r\n❯ vale SomeValidFileNameHere.md\r\n✔ 0 errors, 0 warnings and 0 suggestions in 0 files.\r\n```\r\n\r\nProgress... but strange that it says `0 files`. At this point I ran `vale -h` and saw the info about  `.vale.ini`\r\n\r\n```\r\n❯ echo \"[*]\\nBasedOnStyles = Vale\" \u003e\u003e ~/.vale.ini\r\n❯ vale SomeValidFileNameHere.md\r\n\r\n SomeValidFileNameHere.md\r\n XXX:XXX  error  Did you really mean 'repo'?  Vale.Spelling\r\n```\r\n\r\nSo that got it working 👍 \r\n\r\nMy feedback after going through this process as a new user would be this: \r\n\r\nIf the tool depends on a configuration to work I think it would be an improvement if a default was created on install. More meaningful feedback/error messages (e.g. something similar to the `.vale.ini` info from `vale -h`) when running commands without the config file would also be useful.\r\n\r\nAs a temporary measure, I think it would help to update the 'Installation' instructions to include a step on adding a configuration. Or to make that clearer and prominently featured on the 'Usage' page.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/360"
   },
   {
    "Title": "Vale.Spelling does not run with bracketed Vocab accept word",
    "Body": "- **OS** MacOS 11.4 (x86)\r\n- **Install** Homebrew\r\n- **Vale Version** 2.10.4\r\n\r\nA simple example of this can be seen in this repo:\r\nhttps://github.com/plumbis/vale-test\r\n\r\nIf a vocab `accept.txt` has a line that is enclosed in brackets Vale.Spelling does not run. \r\n\r\n**Examples:**\r\n- no accept.txt content:\r\n```\r\ncat .vale/styles/Vocab/Docs/accept.txt                                                                                                                                 \r\n\r\nvale  --config .vale/.vale.ini test.md                                                                                                                                \r\n test.md\r\n 5:11  error  Did you really mean             Vale.Spelling\r\n              'missspelling'?\r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n- add `[test|TEST]` to accept.txt\r\n```\r\ncat .vale/styles/Vocab/Docs/accept.txt                                                                                                                                 \r\n[test|TEST]\r\n\r\nvale**  --config .vale/.vale.ini test.md\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file\r\n```\r\n\r\n\r\n- replace with single character match in accept.txt. \r\n```\r\ncat .vale/styles/Vocab/Docs/accept.txt                                                                                                                                 \r\n[t|T]est\r\n\r\nvale  --config .vale/.vale.ini test.md                                                                                                                                \r\n test.md\r\n 5:11  error  Did you really mean             Vale.Spelling\r\n              'missspelling'?\r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n**Additional Notes:**\r\n* This does not happen with words in `reject.txt`. Behavior is normal.\r\n* This does not happen when using parenthesis `( )` instead of brackets `[  ]`. Behavior is normal.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/359"
   },
   {
    "Title": "Can't get regex to check spacing after a paren to work",
    "Body": "Hey there, thanks in advance for fielding a quick question. I believe I've created a regex to check for lack of spacing after a paren (e.g., `[my link](example.com)another phrase`) but I can't get this to fire when it involves Markdown links. Other instances that don't involve Markdown links work fine, but I'd like to find a way to make it work when it involves Markdown links too. Any tips or tricks?\r\n\r\nRegEx and example text: https://regex101.com/r/TQoU0p/1\r\n\r\nTrying with this:\r\n\r\n```yaml\r\nextends: existence\r\nmessage: '\"%s\" must contain one and only one space.'\r\nlevel: error\r\nnonword: true\r\ntokens:\r\n  - '[\\S][)][a-zA-Z0-9]'\r\n```\r\n\r\nReally appreciate your work on Vale! Thanks for creating this great tool.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/357"
   },
   {
    "Title": "[WIP] Multilingual, spaCy-powered NLP",
    "Body": "All of the required pieces are finally in place to offer integration with [spaCy](https://spacy.io/):\r\n\r\n\u003e spaCy is a library for advanced Natural Language Processing in Python and Cython. It's built on the very latest research, and was designed from day one to be used in real products.\r\n\r\nThis allows Vale to support (1) rules written for any of spaCy's [supported languages](https://spacy.io/usage/models#languages) and (2) highly accurate (custom-trained, even) NLP.\r\n\r\nIf implemented well, I think this has the potential to easily 2x Vale's usefulness.\r\n\r\n## Getting Started\r\n\r\nThe current version of Vale (v2.10.4) has unofficial support (since the implementation details are still a WIP) for this integration.\r\n\r\nTo get started, you'll need Vale (v2.10.4), Python 3.9, and [Pipenv](https://pipenv.pypa.io/en/latest/) installed. Next, follow the steps below:\r\n\r\n1. Start the [`spacy-vale`](https://github.com/errata-ai/spacy-vale) API locally.\r\n\r\n2. Create a `.vale.ini` file:\r\n\r\n    ```ini\r\n    StylesPath = styles\r\n    MinAlertLevel = suggestion\r\n    \r\n    # This is the API started in step 1. \r\n    #\r\n    # You'll need to change this value to the URL provided in uvcorn's output.\r\n    NLPEndpoint = http://0.0.0.0:5000\r\n\r\n    [*.md]\r\n    # This is the language of the documents matched by the above glob pattern \r\n    # (`*.md`, in this case).\r\n    Lang = en\r\n\r\n    ...\r\n    ``` \r\n\r\n3. Create a style/rules (see next section).\r\n\r\n## Creating, testing, and debugging rules\r\n\r\nThe main entry point for NLP-based rules will be the [`sequence`](https://docs.errata.ai/vale/styles#sequence-v230) extension point. For example, an implementation of LanguageTool's [`WOULD_BE_JJ_VB`](https://community.languagetool.org/rule/show/WOULD_BE_JJ_VB?lang=en\u0026subId=1) rule:\r\n\r\n```yml\r\n---\r\nextends: sequence\r\nmessage: \"The infinitive '%[4]s' after 'be' requires 'to'. Did you mean '%[2]s %[3]s *to* %[4]s'?\"\r\ntokens:\r\n  - tag: MD\r\n  - pattern: be\r\n  - tag: JJ\r\n  - tag: VB|VBN\r\n```\r\n\r\nTo help the testing process, you can use Vale Studio's _View Tags_ feature, which currently supports Markdown content written in Chinese, English, German, Russian, or Spanish.\r\n\r\n![Screen Shot 2021-07-07 at 6 58 04 PM](https://user-images.githubusercontent.com/8785025/124850321-46532380-df55-11eb-832e-0a19c152d942.png)\r\n\r\nFinally, you'll be able to use these NLP-based rules with all existing integrations\u0026mdash;such as VS Code shown below.\r\n\r\n![Screen Shot 2021-07-07 at 6 33 46 PM](https://user-images.githubusercontent.com/8785025/124850503-916d3680-df55-11eb-8ec3-62e6d5464c8a.png)\r\n\r\n## Feedback\r\n\r\nPlease report any issues you encounter: linting speed, Vale Studio usability, `sequence` limitations, etc. \r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/356"
   },
   {
    "Title": "Vale Plugin for Obsidian Text Editor?",
    "Body": "[Obsidian ](https://obsidian.md/)is a text editor designed for writing with markdown files, built using Electron. Would it be possible to make something like the VScode extension that would [bring Vale to Obsidian](https://forum.obsidian.md/t/vale-plugin/20528)?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/355"
   },
   {
    "Title": "Finding single quotes in regex",
    "Body": "I'm trying to find single quotation marks in combination with Abbriviations e.g. `ABC's `  \r\nFor this I'm using the following rule:\r\n\r\n```\r\nextends: existence\r\nmessage: \"\u003clong text\u003e\"\r\nlevel: error\r\ntokens:\r\n  - '\\b(?:[A-Z]{2,}\\'s)'\r\n```\r\n\r\nBut I always receive a parsing error: `Invalid value provided`\r\n\r\nThings I've tried:\r\n```\r\n- \"\\b(?:[A-Z]{2,}'s)\" -\u003e doesn't detect anything\r\n- '\\b(?:[A-Z]{2,}\\\\'s)' -\u003e same parsing error\r\n- '\\b(?:[A-Z]{2,}[[:graph:]]s)' -\u003e doesn't detect anything\r\n```\r\n\r\nAm I missing something? Or is it currently impossible to search for a single quote within a regex?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/354"
   },
   {
    "Title": "Parts-of-speech tagging for substitution rules?",
    "Body": "Hi, \r\n\r\nThe documentation doesn't mention the `pos:` option for substitution rules, but it's mentioned in the code in `substition.go`. So, I'm assuming parts-of-speech tagging works for substitutions. I can't figure out how to use it. For example, the (now removed) Microsoft `Backend.yml` rule: \r\n\r\n```\r\npos: 'back-end/NN|backend/(?:JJ|NN)|back/\\w+ end/JJ|back/(?:JJ|RB) end/\\w+'\r\n```\r\n\r\nI'd like to troubleshoot a rule of ours, which always seems to flag `back end` as nouns incorrectly.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/353"
   },
   {
    "Title": "Trouble ignoring slack channel names with hash/pound symbol",
    "Body": "I'd like to ignore all slack channel names like `#testthedocs` in my text (not marked as code).\r\n\r\nI can't ignore the in the spellcheck, because the tokenizer doesn't include the `#`, and I can't ignore it as a token ignore because the `#` is treated as a comment in the `ini` format. Even `\\x{23}`. \r\n\r\nAm I missing something? \r\n ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/352"
   },
   {
    "Title": "Vale hangs indefinitely when processing Asciidoc file",
    "Body": "When trying to run vale on Asciidoc, vale just hangs. It looks like it's trying to call an internal adoc service defined in adoc.go on 127.0.0.1 on port 7070, but that never service never seems to comes up. So it just keeps trying to reconnect in a loop. I have been unable to figure out why. There doesn't seem to be any way to get output from vale, so it's hard to get additional information. \r\n\r\nvale does work when you pass `--ignore-syntax` and asciidoctor works just fine outside of vale.\r\n\r\n* Ubuntu\r\n* Vale version 2.10.2\r\n* Asciidoctor version 2.0.15\r\n\r\nBelow I have attached an strace from a run.\r\n[out.txt](https://github.com/errata-ai/vale/files/6649549/out.txt)\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/351"
   },
   {
    "Title": "Add severity to `vale --output=line` output",
    "Body": "OK, I know for special needs `--output=JSON` and Go-template-based output-styles (see below) exist already, but maybe this output style may still be expanded.\r\n\r\nFor example currently one gets:\r\n\r\n```\r\nREADME.md:72:71:write-good.Weasel:'likely' is a weasel word!\r\n```\r\n\r\nMore useful would be:\r\n\r\n```\r\nREADME.md:72:71: [warning] write-good.Weasel: 'likely' is a weasel word!\r\n```\r\n\r\nOr for better backwards-compatibility (the message is the last part and not structured =\u003e unlikely to be parsed):\r\n\r\n```\r\nREADME.md:72:71:write-good.Weasel: [warning] 'likely' is a weasel word!\r\n```\r\n----\r\nA workaround is indeed possible using a Go template file:\r\n```\r\n{{- /* Very much like `vale --output=line`, but with the severities too! -}}\r\n{{- /* See also https://docs.errata.ai/vale/cli#template-examples */ -}}\r\n{{- range .Files}}\r\n{{- $p := .Path -}}\r\n{{- range .Alerts -}}\r\n{{- printf \"%s:%d:%d: [%s] %s: %s\" $p .Line (index .Span 0) .Severity .Check .Message }}\r\n{{end -}}\r\n{{end}}\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/350"
   },
   {
    "Title": "Exceptions for \"existence\" rules no longer work",
    "Body": "I use a modified version of the [HeadingAcronyms](https://github.com/errata-ai/Microsoft/blob/master/Microsoft/HeadingAcronyms.yml) from the Microsoft ruleset, but I want to exclude a few acronyms that I find acceptable in headings.\r\nThis used to be supported by adding a list of `exceptions` to the yml file.\r\nAs far as I can tell, this was removed without a replacement in this [commit](https://github.com/errata-ai/vale/commit/4dfe2880fcf7ce4aadc8fcfd3cdddef5ca0bc58f).\r\nIs there any way to change the rule to support the old behavior (preferably without a really long regex)?\r\n\r\nVale version: 2.10.2\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/349"
   },
   {
    "Title": "Running Vale with the write-good, Microsoft, or Google styles seems to produce an E201 error,",
    "Body": "- OS: Fedora 34\r\n- Install method: brew\r\n- Vale version 2.10.2\r\n\r\nRunning Vale with the write-good, Microsoft, or Google styles produces a E201 error, and complains about \"Missing the required 'extends' key\", like the example shown here:\r\n\r\n```\r\n(base) [rolfedh@fedora-desktop studious-fortnight]$ vale README.md \r\nE201 Invalid value provided [/home/rolfedh/studious-fortnight/styles/write-good/.travis.yml:1:1]:\r\n\r\n   1* language: python\r\n   2  cache: bundler\r\n   3  python:\r\n\r\nMissing the required 'extends' key.\r\n\r\nExecution stopped with code 1.\r\n(base) [rolfedh@fedora-desktop studious-fortnight]$ \r\n```\r\nYou can see the full contents of my doc project, including the current `.vale.ini` file which is configured for write-good, at https://github.com/rolfedh/studious-fortnight.\r\n\r\nPrevious attempts with Google and Microsoft styles made similar complaints about their respective `/coverage/bias-free.yml` files missing the extends key even though none of their `/coverage/*` files contain extends keys. Those only appear in the rules files.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/348"
   },
   {
    "Title": "Option to ignore specific files that should not be changed (eg licenses)",
    "Body": "Hi folks!\r\n\r\nI have read the previous issues regarding excluding specific files and wanted to share a use case where I feel this is valid.\r\n\r\nWe have Vale set up on a WIP PR on our Grav-based docs, and it is running on .md files which is perfect. On our docs, one of these pages is the Apache license relating to our documentation, rendered on the front end in an .md file, which we cannot and should not modify.  Furthermore, that license itself is triggering errors:\r\n\r\n\u003e Don't use plurals in parentheses such as in 'Contribution(s)'.\r\n\r\nDespite trying to [add that to our vocab](https://github.com/mautic/mautic-documentation/pull/147/files#diff-0c78a72bedc3a28cc07414a92bf4e984be7776e79202899cd0117095ecb9af88R13) it continues to throw errors (maybe an error on our part - if so please do let me know!).\r\n\r\nI want to keep that (valid) rule in Vale, however we do **not** want to even be checking licences because they should not be modified by the linter, yet they are required to be present and in the same format as our docs pages.\r\n\r\nI guess that we could hack around it by adding a class to the page and ignoring on that basis however I feel it would be a more elegant solution to simply provide a path that should be ignored by the linter.\r\n \r\n\r\n \r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/347"
   },
   {
    "Title": "Is it possible to add words with dashes to the whitelist?",
    "Body": "Is it possible to add words with dashes to the accept.txt?\r\n\r\nI added \"matter-of-factly\", but still get a spellcheck error:\r\n\r\n```\r\n# echo \"matter-of-factly\" | ./vale\r\n\r\n stdin.txt\r\n 1:11  error  Did you really mean 'factly'?  Vale.Spelling\r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in stdin.\r\n```\r\n\r\nThanks!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/346"
   },
   {
    "Title": "Compound words (phrases) in spell-check",
    "Body": "It  ~appears~ (confirmed in #200) phrases in `vocab.txt` don't work for spelling checks. This makes compound words and names difficult. For I only want `vu` to flag as a misspelling if it's not part of `déjà vu`, I only want `La` to flag as a misspelling if it's not part of `La Scala`, etc.. \r\n\r\nI ~assume~ (confirmed in #200) this is due to the spell-check parsing word-by-word and matching against the vocab lines for exclusions, so it would only see `vu` and not `déjà vu`, etc.\r\n\r\nBased on your response to #200 this is by design so I'll abort trying to add it.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/345"
   },
   {
    "Title": "\"Recreationally\" is marked as wrong by Vale Spelling",
    "Body": "\"Recreationally\" is marked as wrong by Vale Spelling.\r\n--\r\nMac OS",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/344"
   },
   {
    "Title": "publish latest released docker image in hub.docker",
    "Body": "Hello,\r\nIt looks like the `latest` tag doesn't have the corresponding version tag in https://hub.docker.com/r/jdkato/vale/tags?page=1\u0026ordering=last_updated\r\nWould it be possible to publish the latest released with the tags named `v2.10.1` ? the last named version tag is `v2.9.1`.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/343"
   },
   {
    "Title": "Publish latest versions in the dockerhub",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\nThe latest tag in the https://hub.docker.com/r/jdkato/vale/tags is `v2.9.1`. Two latest versions are missing in the dockerhub.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/342"
   },
   {
    "Title": "Regex capture groups behave differently between vocab and rules",
    "Body": "I tried to make regex use consistent between my vocab `accept.txt` file and a custom substitution rule I wrote to warn about the use of some words.\r\nI noticed that capture groups are not working the same way in these two contexts.\r\n\r\n## Example\r\n\r\nIn `accept.txt` I can have `cryptocurrenc(y|ies)` with a capture group or better `cryptocurrenc(?:y|ies)` with a non capturing group.\r\n\r\nBut in `substitution` extending rule, I can only use the non capturing syntax or otherwise it doesn't take the swap into account:\r\n\r\n```yaml\r\nextends: substitution\r\nmessage: Consider using %s instead of \"%s\"\r\nignorecase: true\r\nlevel: error\r\nswap:\r\n  'cryptocurrenc(?:y|ies)': crypto #works\r\n  'cryptocurrenc(y|ies)': crypto #doesn't work\r\n```\r\n\r\n## Vale infos\r\n\r\nOS: Linux\r\nVale 2.10.2 installed from `https://install.goreleaser.com/github.com/ValeLint/vale.sh`\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/341"
   },
   {
    "Title": "Vale on/off comments do not work on titles in RST",
    "Body": "This RST:\r\n\r\n```\r\n.. vale off\r\n\r\nthis text should be fine\r\n------------------------\r\n\r\n.. vale on\r\n```\r\n\r\nwith a style that forbids the word \"text\", still generates an error:\r\n```\r\n 3:6  error  Use 'words' instead of 'text'  example-styles.example \r\n```\r\nIn my understanding, no error should be raised in this case.\r\n\r\nWith the exact same setup, this file (correctly) does not generate an error.\r\n```\r\n.. vale off\r\n\r\nthis text should be fine\r\n\r\n.. vale on\r\n```\r\n\r\nTested with .vale.ini as:\r\n```\r\n[*.{md,rst,txt,json}]\r\nBasedOnStyles = example-styles\r\n```\r\nand the only style in example-styles being:\r\n```\r\nextends: substitution\r\nmessage: Use '%s' instead of '%s'\r\nlevel: error\r\nswap:\r\n  text: words\r\n```\r\n\r\nSeen on Mac OS 11.2.1, vale 2.9.1 installed through homebrew. It's a bit too complicated (and I don't know Go) to debug further on my own.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/340"
   },
   {
    "Title": "Update test.md",
    "Body": "Testing the sentence case check",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/339"
   },
   {
    "Title": "[RFC] Moving to Docker-only installation",
    "Body": "I'm looking for thoughts on moving Vale to a Docker-only installation. In other words, instead of uploading the pre-built binaries to GitHub, I'd just publish the Docker image.\r\n\r\nThe motivation behind this is that I'd like to have more freedom to incorporate non-Go dependencies without having to worry about complicating the installation process. For example, as I stated in my [call for funding](https://jdkato.medium.com/the-future-of-vale-announcing-the-3x10-funding-campaign-5e665bac974a), I want to add support for multiple languages via spaCy (a Python library).\r\n\r\nThe idea of distributing a CLI tool through Docker isn't novel\u0026mdash;both [Code Climate](https://github.com/codeclimate/codeclimate) and [AWS](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-docker.html) use similar techniques.\r\n\r\nThis will require changes to the way Vale is currently distributed with package managers, such as Homebrew and Chocolatey, but doesn't necessarily mean it will no longer be possible (Code Climate, for example, uses  Homebrew to distribute a bash wrapper script).\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/338"
   },
   {
    "Title": "v2.10.0: CI installation not working due to name change",
    "Body": "Hi! The installation method described in https://docs.errata.ai/vale/install#using-vale-with-a-continuous-integration-ci-service doesn't work with v2.10.0.\r\n\r\nThe reasons seems to be the name of the files. Up to v2.9.1 they were for example `vale_2.9.1_Linux_64-bit.tar.gz`, now it's `vale_2.10.0_Linux_amd64.tar.gz`.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/337"
   },
   {
    "Title": "Vocab doesn't overrule other styles",
    "Body": "Hi,\r\n\r\nwe are trying to implement the vocabularies but seem to run into an issue. It looks like the accept.txt and reject.txt only overrule the Vale style. However, we would like to use it to keep the other styles (eg. write-good and Microsoft) as clean as possible so that we can update them regularly without having to re-apply our changes.\r\n\r\nIs it possible to make the the Vocab overrule the other styles aswell?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/336"
   },
   {
    "Title": "Huge memory consuption on simple rulesets",
    "Body": "I’m trying to make use of Vale to stylecheck [some documentation](https://gitlab.apertis.org/docs/apertis-website/-/tree/master/content/) and I’m running into frequent out of memory issues.\r\nInitially I thought I’d feed the whole content directory at once, but even with `Vale` ruleset only enabled, I’d get a crash in GitLab, while on my local machine I’d get at least about 2 GB RAM and 5 GB virt eaten and all four cores 100% busy for pretty long time, making the GUI unusable. I then made it run through each subdirectory separately, and it worked, but only until I added `write-good` ruleset, when it started crashing on `concepts` subdirectory in GitLab. Since `write-good` gives a lot of false positive on this one due to a different style, I thought I might use a separate config, but it turns out Vale doesn’t support combining multiple config files to avoid repetition.\r\n\r\nI’m using the official Vale Docker images on Linux, but I’ve also tried building from the source with the same results.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/335"
   },
   {
    "Title": "Create MSIX file",
    "Body": "Moving here so I remember to do it… Can you assign me @jdkato ?\r\n\r\nhttps://docs.microsoft.com/en-us/windows/msix/packaging-tool/create-app-package\r\nhttps://helpdeskgeek.com/free-tools-review/4-tools-to-create-windows-installer-packages/",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/334"
   },
   {
    "Title": "Problem with TokenIgnores not ignoring certain content",
    "Body": "I'm currently evaluating using Vale to lint the GitHub documentation at https://github.com/github/docs but I'm running into a problem with `TokenIgnores` seemingly not ignoring content it should be. I have a minimal repro case at https://github.com/lee-dohm/vale-test. Is there something I'm doing wrong?\r\n\r\n## Steps to reproduce\r\n\r\n1. [Clone the repo](https://docs.github.com/en/github/using-git/which-remote-url-should-i-use) at https://github.com/lee-dohm/vale-test\r\n1. Execute the command: `vale test.md`\r\n\r\n**Expected:** No errors \\\r\n**Actual:** 1 error\r\n\r\nNotice that the first Liquid tag containing the text is flagged as an error, but the second identical Liquid tag on the same line is not.\r\n\r\n## Extra info\r\n\r\n* I've created [a test case at regex101](https://regex101.com/r/Zy0Dv1/2/) that shows that the pattern that I'm using for `TokenIgnores` is ignoring what I expect, no more, no less\r\n* Using `vale ls-config` shows that there doesn't seem to be a parsing error in the configuration file\r\n\r\n## Configuration\r\n\r\n* **OS:** macOS 11.2.1\r\n* **Installation method:** Homebrew\r\n* **Vale version:** vale version 2.9.1\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/333"
   },
   {
    "Title": "Feat: Org mode support",
    "Body": "Hello!\r\n\r\nIt would be great if this supported Org mode.\r\n\r\nI'd guess that Hugo's Org parsing library should make this a lot easier to implement 🙂.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/330"
   },
   {
    "Title": "Feature Request: Auto Fix Issues",
    "Body": "I may have missed this, but this tool is super helpful (Just getting exposed!) so want to see if I am or what the thoughts on this are.\r\n\r\nI got suggestions for things to fix like \r\n```\r\n 5:103  error  Did you really mean             Vale.Spelling \r\n               'serrvice'?                                   \r\n```\r\n\r\nI know each case isn't the same, but it would be nice to have a way to specify that I want Vale to turn it into the word it thinks it is, or even specify common misspellings, and thee word that it should be. Maybe similar things are in other places that I haven't seen, but having some form of \"auto fix\" would be super helpful for large scale use cases.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/329"
   },
   {
    "Title": "Question: Non-English Dictionaries",
    "Body": "I ran into issues when trying to use a non-English Hunspell dictionary. When configuring German, Portuguese or Swiss dictionaries for testing, error messages like `Unable to process \"Abarbeitungs/hij\": unable to find affix key 104` occur. Are there any known issues with other languages than English? Does anyone have experience with non-English dictionaries? I tried dictionaries from https://github.com/wooorm/dictionaries.\r\n\r\nThanks in advance!\r\nHans-Jörg\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/328"
   },
   {
    "Title": "Linting edge case: Pipe (|) in backticks in a table causes linting within the code",
    "Body": "@jdkato An edge case we just discovered, is that the `|` character causes vale to lint within backtick sections by accident, if it's in a table:\r\n\r\n```markdown\r\n| Table | Table |\r\n|-------|-------|\r\n| Word  | `Notword|` |\r\n```\r\n\r\n\u003cimg width=\"695\" alt=\"Screen Shot 2021-02-10 at 10 29 18\" src=\"https://user-images.githubusercontent.com/36979740/107451816-6be92600-6b8b-11eb-8559-9cc6b5e64e09.png\"\u003e\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/327"
   },
   {
    "Title": "Vale 2.9.0 fails with .rst files on Windows",
    "Body": "Windows 10, version 20H2\r\nInstalled version 2.9.0 via `choco install vale`\r\n\r\nVale fails on scanning RST files, e.g.:\r\n\r\n`vale file.rst`\r\n\r\nproduces\r\n\r\n```\r\nE100 [lintRST] Runtime error\r\n\r\nrst2html not found\r\n```\r\n\r\nI did try installing rst2html via pip3 but still get the same error.\r\n\r\nCould the choco package be missing something?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/326"
   },
   {
    "Title": "Upgrade from 2.5.1 to 2.9.0 causes spelling errors for \"iframe\"",
    "Body": "- macOS 11 (Big Sur)\r\n- Install method: goreleaser\r\n- Vale version:\r\n  ```\r\n  $ bin/vale -v\r\n  vale version 2.9.0\r\n  ```\r\n\r\nWith Vale 2.5.1, I used this style to perform spell checking:\r\n```yaml\r\nextends: spelling\r\nmessage: \"'%s'?\"\r\naff: ../../dictionaries/en_US-large.aff\r\ndic: ../../dictionaries/en_US-large.dic\r\nlevel: error\r\nignore:\r\n  - ../dictionaries/custom_words.txt\r\n```\r\n\r\nWith Vale 2.9.0, I updated the style to use the new keys for the `spelling` definition (I hope to take advantage of multiple dictionaries):\r\n```yaml\r\nextends: spelling\r\nmessage: \"'%s'?\"\r\ndicpath: ci/dictionaries\r\ndictionaries:\r\n  - en_US-large\r\nlevel: error\r\nignore:\r\n  - ci/dictionaries/custom_words.txt\r\n```\r\n\r\nWith Vale 2.5.1, my result from Vale processing is:\r\n```\r\n✔ 0 errors, 0 warnings and 0 suggestions in 3949 files.\r\n```\r\n\r\nWith Vale 2.9.0, my result from Vale processing is:\r\n```\r\n✖ 692 errors, 0 warnings and 0 suggestions in 3949 files.\r\n```\r\n\r\nThe vast majority of the errors are:\r\n```\r\n build/some_page.html\r\n 56:12  error  'iframe'?  MyOrg.Spelling \r\n 57:65  error  'iframe'?  MyOrg.Spelling \r\n```\r\n\r\nThose lines correspond with this HTML:\r\n```html\r\n56: \u003cnoscript\u003e\u003ciframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-*******\"\r\n57:   height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"\u003e\u003c/iframe\u003e\u003c/noscript\u003e\r\n```\r\n\r\nIf I use the 2.5.1 style for spelling with Vale 2.9.0, my result from Vale processing is:\r\n```\r\n✔ 0 errors, 0 warnings and 0 suggestions in 3949 files.\r\n```\r\n\r\nIf I use the 2.9.0 style for spelling, but use invalid paths for the dictionary, I get this error:\r\n```\r\nE201 Invalid value provided [ci/vale/MyOrg/Spelling.yml:1:1]:\r\n\r\n   1* extends: spelling\r\n   2  message: \"'%s'?\"\r\n   3  dicpath: ci/dictionary\r\n\r\nopen /Users/me/repos/fixes/ci/dictionary/en_US-large.dic: no such file or directory\r\n```\r\n\r\nSo, it would seem that Vale 2.9.0 is finding/using the specified dictionary when using the new keys for the `spelling` style, but there's some additional change that results from using the new keys themselves.\r\n\r\nYou might suggest \"just use the old `spelling` keys\", but that would prevent me from using multiple dictionaries, which is the reason that I would upgrade to 2.9.0.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/325"
   },
   {
    "Title": "Spelling.yml bug -- false positive due to a preceding dash character \"-\"",
    "Body": "I am getting a false positive with the spelling rule because of an earlier dash (-) in the sentence. \r\n\r\n\u003cimg width=\"1508\" alt=\"fp\" src=\"https://user-images.githubusercontent.com/55214086/105762136-da31b580-5f08-11eb-81f8-579e7593883c.PNG\"\u003e\r\n\r\n\r\n**Text to replicate problem** \r\n\r\n```\r\nContains information about the `mediaplayer` running on the device.\r\n\r\nThe unique name of a software component running on the device, limited to 256 characters. Use reverse-DNS notation for component names to guarantee global uniqueness. For example, you might report a custom media player as `mediaplayer` \r\n```\r\n\r\n**If I delete the dash in \"reverse-DNS\", the error goes away**\r\n\r\n```\r\nThe unique name of a software component running on the device, limited to 256 characters. Use reverse DNS notation for component names to guarantee global uniqueness. For example, you might report a custom media player as `mediaplayer` \r\n```\r\n\r\nI am just using the default spelling rule.\r\n\r\n```\r\nextends: spelling\r\nmessage: \"Did you really mean '%s'?\"\r\nlevel: error\r\ncode: false\r\nfilters:\r\n  - ...\r\n```\r\n\r\n**Example of fixed**\r\n\r\n\u003cimg width=\"1504\" alt=\"fix\" src=\"https://user-images.githubusercontent.com/55214086/105762281-0baa8100-5f09-11eb-8a66-a0b042ed8bc6.PNG\"\u003e\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/324"
   },
   {
    "Title": "scope: code not working",
    "Body": "Hey folks,\r\n\r\nI'm looking at linting *within* codeblocks, but the following is turning up code that isn't in code blocks as well. \r\n\r\n```yml\r\nextends: existence\r\nmessage: You need to escape emoji colons in codeblocks\r\nlevel: error\r\nnonword: True\r\nscope: code\r\ntokens:\r\n    - ':[a-z]*:'\r\n ```\r\n\r\nAm I missing something on the selection side? Because codeblocks are ignored by default? But `scope: code` isn't much use if you have to explicitly include the code elsewhere as well.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/321"
   },
   {
    "Title": "Have an issue with URLs? Read this first.",
    "Body": "# About\r\n\r\nSince URL handling is one of the most discussed topics on this issue tracker, I've made a guide to explain some of the most common problems.\r\n\r\n## URLs in markup (HTML, Markdown, AsciiDoc, reStructuredText, ...)\r\n\r\nIn all supported markup formats, Vale lints URLs according to the following structure:\r\n\r\n```html\r\n\u003ca href=\"url\"\u003etext\u003c/a\u003e\r\n```\r\nwhere `url` is ignore and `text` is linted. This behavior is consistent with Vale's practice of linting all user-facing text. Additionally, URLs may appear in two scopes: `link` and `text`.\r\n\r\nThe `link` scope targets *only* a given link's text, while the `text` scope targets the URL's text within its greater context. For example,\r\n\r\n```markdown\r\n# A simple Markdown document\r\n\r\nPlease [visit this page](https://example.com) to learn more.\r\n```\r\nGiven this document, the third line consists of two scopes: `visit this page` (`link`) and `Please visit this page to learn more.` (`text`).\r\n\r\nThe following sections will explain some common cases on a per-format basis.\r\n\r\n### Markdown\r\n\r\n```markdown\r\n[this is a link](https://example.com)\r\n```\r\n\r\n`this is a link` is linted; `https://example.com` is not.\r\n\r\n```markdown\r\n[example.com](https://example.com)\r\n```\r\n\r\n`example.com` is linted; `https://example.com` is not.\r\n\r\n```markdown\r\n\u003c!-- These links are syntactically equivalent --\u003e\r\n\r\n\u003chttps://example.com\u003e\r\n\r\n[https://example.com](https://example.com)\r\n```\r\n\r\n`https://example.com` (the text) is linted; `https://example.com` (the URL) is not.\r\n\r\n```markdown\r\n[`https://example.com`](https://example.com)\r\n```\r\n\r\nNeither `https://example.com` (the code span) nor `https://example.com` (the URL) are linted.\r\n\r\n### AsciiDoc\r\n\r\n```asciidoc\r\nHead over to xref:ruby.adoc[our page on Ruby].\r\n```\r\n\r\n`our page on Ruby` is linted; `xref:ruby.adoc` is not.\r\n\r\n```asciidoc\r\nhttps://example.com[Click here]\r\n```\r\n\r\n`Click here` is linted; `https://example.com` is not.\r\n\r\n```asciidoc\r\n// These links are syntactically equivalent \r\n\r\nhttps://github.com/asciidoctor/asciidoctor\r\n\r\n\u003ca href=\"https://github.com/asciidoctor/asciidoctor\" class=\"bare\"\u003ehttps://github.com/asciidoctor/asciidoctor\u003c/a\u003e\r\n```\r\n`https://github.com/asciidoctor/asciidoctor` (the text) is linted; `https://github.com/asciidoctor/asciidoctor` (the URL) is not. In this case, you choose to [ignore the class `bare`](https://docs.errata.ai/vale/config#ignoredclasses-v22).\r\n\r\n```asciidoc\r\nhttps://example.com[`https://example.com`]\r\n```\r\nNeither `https://example.com` (the code span) nor `https://example.com` (the URL) are linted.\r\n\r\n## URLs in source code\r\n\r\nThere is currently no support for ignoring URLs in source code. #249 tracks adding this feature.\r\n\r\n## Still having issues?\r\n\r\nIf you still believe Vale is mishandling a URL, please open an issue with your `.vale.ini` and the file in question (the entire file, if possible).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/320"
   },
   {
    "Title": "Supporting symlinks when using BasedOnStyles",
    "Body": "I appreciate this is a super niche use case and there might even be technical reasons it isn't supported.\r\n\r\nBut for a degree of flexibility and the ability to share one folder of styles into multiple paths, I have often use symlinks in project local styles directories.\r\n\r\nI noticed after much experimentation that you can enable individual rules that are in symlinked directories, but not folders of rules brought in by `BasedOnStyles`, is there any way to add support for that without breaking something else? I've often recommended this as a way to set Vale up, which may not have been correct, but it made a vague sort of sense at the time… if not, I should probably find a better method instead ;)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/319"
   },
   {
    "Title": "Android works... and doesn't",
    "Body": "Greetings,\r\n\r\nI was able to successfully compile Vale for Android with this command:\r\n`GOOS=android GOARCH=arm GOARM=7 CGO_ENABLED=1 CC=~/Desktop/android-ndk-r21d/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi23-clang go build -o valeAndroid ./cmd/vale`\r\n\r\nWhen I run \"./valeAndroid -h\" on Android, I get the expected output:\r\n```\r\nvale - A command-line linter for prose.\r\n\r\nUsage:\tvale [options] [input...]\r\n\tvale myfile.md myfile1.md mydir1\r\n\tvale --output=JSON [input...]\r\n\r\nVale is a syntax-aware linter for prose...\r\n```\r\n\r\nBut when I try to actually run it on either a text file or stdin, I get the following error:\r\n```\r\n$ echo \"Test sdf\" | ./valeAndroid\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x4 pc=0xb60b5480]\r\n\r\ngoroutine 101 [running]:\r\ngithub.com/jdkato/regexp/internal/dfa.(*DFA).analyzeSearchHelper(0x85d760f0, 0x86bc3a4c, 0x85d7c0f0, 0x15, 0x85815900)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/vendor/github.com/jdkato/regexp/internal/dfa/dfa.go:157 +0x44\r\ngithub.com/jdkato/regexp/internal/dfa.(*DFA).analyzeSearch(0x85d760f0, 0x86bc3a4c, 0x4ae)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/vendor/github.com/jdkato/regexp/internal/dfa/dfa.go:141 +0xf0\r\ngithub.com/jdkato/regexp/internal/dfa.search(0x85d760f0, 0x85d761e0, 0x853a72f0, 0x867c6c3c, 0x0, 0x8684ac01, 0x0, 0x259, 0xb626b4f0, 0x861a28c0)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/vendor/github.com/jdkato/regexp/internal/dfa/search.go:107 +0x80\r\ngithub.com/jdkato/regexp/internal/dfa.(*Searcher).Search(0x8618bdc8, 0xb6971eb0, 0x867c6c3c, 0x0, 0x0, 0x867c6c24, 0x0, 0x0, 0x0, 0x0)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/vendor/github.com/jdkato/regexp/internal/dfa/search.go:71 +0x100\r\ngithub.com/jdkato/regexp.(*Regexp).doExecute(0x8618bd80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x867d03b0, 0x9, 0x0, 0x0, ...)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/vendor/github.com/jdkato/regexp/exec.go:442 +0x240\r\ngithub.com/jdkato/regexp.(*Regexp).MatchString(...)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/vendor/github.com/jdkato/regexp/regexp.go:292\r\ngithub.com/errata-ai/vale/v2/internal/check.Substitution.Run(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x86179c90, 0xc, 0x86179cd0, ...)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/internal/check/substitution.go:89 +0x58\r\ngithub.com/errata-ai/vale/v2/internal/lint.(*Linter).lintBlock.func1(0x867da500, 0x867d03c0, 0x867d03b0, 0x9, 0x861a8980, 0x11, 0x867c6900, 0xb6970b70, 0x8618be00)\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/internal/lint/lint.go:236 +0x60\r\ncreated by github.com/errata-ai/vale/v2/internal/lint.(*Linter).lintBlock\r\n\t/Users/mrandrey/Desktop/vale-2.8.1/internal/lint/lint.go:234 +0x19c\r\n```\r\n\r\nDo you have any ideas on what this might be about or how to fix it?\r\n\r\nThanks,\r\nAndrey",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/318"
   },
   {
    "Title": "URL handling",
    "Body": "Suppose we want to enforce that `Google` (as product and company) is always with uppercase G , but it's domain may be written in lowercase.\r\nI fact, we want all readable URLs to be in lowercase.\r\n\r\nSo I add `Google` to my `accept.txt` vocabulary.\r\nBut this means that this:\r\n\r\n```\r\nVisit Google on [www.google.com](https://www.google.com).\r\n```\r\nwill throw a `Use 'Google' instead of 'google'` on the url text.\r\n\r\nWhat is the recommended way to handle this?\r\n\r\nI know that [it is common to use text as links](www.dummy.com), but sometimes the bare hostname is a better option.\r\n\r\n```\r\n=== .vale.ini ===\r\nStylesPath = styles\r\nMinAlertLevel = suggestion\r\n\r\nVocab = myVocabulary\r\n\r\n[*.{md,rst}]\r\nBasedOnStyles = Vale\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/317"
   },
   {
    "Title": "Support for mixed md/rst files",
    "Body": "We use [Sphinx](https://www.sphinx-doc.org/en/master/) together with the [m2r2 extension](https://pypi.org/project/m2r2/).\r\nOur documentation is primarily Markdown, but with RestructuredText elements here and there. For example [directives](https://www.sphinx-doc.org/en/1.8/usage/restructuredtext/basics.html#directives) for references, images etc.\r\n\r\nThe docs are precompiled from `.md` to `.rst`, then to `.html`.\r\n\r\nVale is run on the `.md` files but throws a lot of false warnings due to the RestructuredText parts. Can I tell Vale to ignore this?\r\n\r\nI don't consider `\u003c!-- vale off --\u003e...\u003c!-- vale on --\u003e` a solution, it would be required on each and every place and clutter up the code completely.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/316"
   },
   {
    "Title": "A bug with spellcheck in Asciidoctor links",
    "Body": "Hi all,\r\n\r\nHere is a screenshot:\r\n\r\n![2021-01-17_21-26](https://user-images.githubusercontent.com/2750775/104853650-e1eeca00-590a-11eb-8cfa-662941e17778.png)\r\n\r\nI don't understand why `https` is flagged as a spelling mistake? Its part of Asciidoctor syntax for links, it should not be checked for spelling error. I think its a bug.\r\n\r\nThanks all.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/315"
   },
   {
    "Title": "Is it possible to run Vale in Android shell?",
    "Body": "Thanks for this incredible tool. I'm a long-time proselint user and this takes it to another level.\r\n\r\nWould it be possible to run Vale in an Android shell?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/314"
   },
   {
    "Title": "Vale throws \"lstat : no such file or directory\"",
    "Body": "I'm trying Vale for the first time, following the official guide, but keep getting:\r\n```\r\n`lstat : no such file or directory`\r\n```\r\n\r\n- OS: Ubuntu 20.04.1 (WSL 2).\r\n- Install method: Installed homebrew (on ~/.linuxbrew), added `brew` to `$PATH`, then `brew install vale`.\r\n- Testing install: `vale -v` -\u003e `vale version 2.8.0`\r\n- `git clone git@github.com:errata-ai/vale-boilerplate.git`\r\n- `cd vale-boilerplate`\r\n- `vale README.md` -\u003e `lstat : no such file or directory`\r\n- `cat README.md | vale ` -\u003e `lstat : no such file or directory`\r\n ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/313"
   },
   {
    "Title": "Vale repetition span incorrect",
    "Body": "In the sentence \"Pickles pickles pickles pickles pickles hopefully pickles pickles pickles.\" the span is 1,74, which highlights the entire sentence, even though there is a non-matching word in the middle of it.\r\n\r\nBoth write-good.Illusions and Vale.Repetition do it in the first two results below:\r\n\r\n```\r\nvale# echo \"Pickles pickles pickles pickles pickles hopefully pickles pickles pickles.\" | ./vale -output JSON\r\n{\r\n  \"stdin.txt\": [\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"write-good.Illusions\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"warning\",\r\n      \"Span\": [\r\n        1,\r\n        74\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"Vale.Repetition\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"error\",\r\n      \"Span\": [\r\n        1,\r\n        74\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"Vale.Repetition\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"error\",\r\n      \"Span\": [\r\n        9,\r\n        23\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"write-good.Illusions\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"warning\",\r\n      \"Span\": [\r\n        9,\r\n        23\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"write-good.Illusions\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"warning\",\r\n      \"Span\": [\r\n        25,\r\n        39\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"Vale.Repetition\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"error\",\r\n      \"Span\": [\r\n        25,\r\n        39\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"\",\r\n        \"Params\": null\r\n      },\r\n      \"Check\": \"proselint.Skunked\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'hopefully' is a bit of a skunked term — impossible to use without issue.\",\r\n      \"Severity\": \"error\",\r\n      \"Span\": [\r\n        41,\r\n        49\r\n      ],\r\n      \"Match\": \"hopefully\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"write-good.Illusions\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"warning\",\r\n      \"Span\": [\r\n        51,\r\n        65\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    },\r\n    {\r\n      \"Action\": {\r\n        \"Name\": \"edit\",\r\n        \"Params\": [\r\n          \"truncate\",\r\n          \" \"\r\n        ]\r\n      },\r\n      \"Check\": \"Vale.Repetition\",\r\n      \"Description\": \"\",\r\n      \"Line\": 1,\r\n      \"Link\": \"\",\r\n      \"Message\": \"'pickles' is repeated!\",\r\n      \"Severity\": \"error\",\r\n      \"Span\": [\r\n        51,\r\n        65\r\n      ],\r\n      \"Match\": \"pickles pickles\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nvale version 2.8.0",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/312"
   },
   {
    "Title": "Vale spelling catching \"ve\" on You've",
    "Body": "Vale.Spelling seems to be catching \"ve\" in \"You've\" in the following text:\r\n\"You've had your turn. I--I've not.\"\r\n\r\nTo reproduce:\r\n\r\n```\r\nvale# echo \"You've had your turn. I--I've not.\" | ./vale\r\n\r\n stdin.txt\r\n 1:5  error  Did you really mean 've'?  Vale.Spelling\r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in stdin.\r\n```\r\n\r\nOddly, removing the second sentence makes the error go away.\r\n\r\nvale version 2.8.0",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/311"
   },
   {
    "Title": "Running vale on Alpine Linux",
    "Body": "I was trying to update vale to latest (2.8.0) in our Alpine Linux (using the tar.gz from the github releases page), but I get errors saying \"not found\". Doing `ldd vale` showed that it seems dynlinked to libc. However the vale image on docker hub is based on Alpine and works just fine. (I extracted it from the image and put it in ours: works!)\r\nWhat am I missing here?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/310"
   },
   {
    "Title": "No spelling errors are reported",
    "Body": "Hi all,\r\n\r\nAccording to this [table](https://github.com/errata-ai/vale#functionality) from the README, this tool should also report spelling errors. Well, it does not happens to me, no reports on spelling errors.\r\nIs this a bug or am I missing some setting?\r\n\r\nThanks all.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/309"
   },
   {
    "Title": "Some errors and warnings are marked in incorrect places, after Asciidoc source code blocks",
    "Body": "macOS, Vale 2.8.0 (via Homebrew), Atom 1.53.0, atomic-vale 1.9.0\r\n\r\nI think this is a regression in 2.8.0. Haven’t had such issues before.\r\n\r\nInput:\r\n\r\n```asciidoc\r\n\r\nThere are problems with this.\r\n\r\n[source, typescript]\r\n----\r\n----\r\n\r\nThere are problems with this.\r\n\r\n```\r\n\r\nOutput – notice where the second error indicator appears, on the same line as the source code block:\r\n\u003cimg width=\"417\" alt=\"Screen Shot 2021-01-13 at 12 31 42\" src=\"https://user-images.githubusercontent.com/66382/104440658-4c1a0e80-559b-11eb-9228-72444a6a63bc.png\"\u003e\r\n\r\nIf I change the source block to use backticks (Markdown syntax), then the errors are marked in the correct place:\r\n\u003cimg width=\"371\" alt=\"Screen Shot 2021-01-13 at 12 33 29\" src=\"https://user-images.githubusercontent.com/66382/104440856-8c798c80-559b-11eb-94db-c5cff029672d.png\"\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/308"
   },
   {
    "Title": "Bug with 'occurrence' causing warnings in wrong place ",
    "Body": "Occurrence rules seem to trigger the warning in the wrong place. They used to work fine, but I noticed it changed in one of the recent updates.\r\n\r\nFor example, this rule is straight out of your docs.\r\n\r\n```\r\nextends: occurrence\r\nmessage: \"More than 3 commas. Can you reduce the complexity of the sentence?\"\r\nlevel: suggestion\r\n# Here, we're counting the number of times a comma appears\r\n# in a sentence.\r\n#\r\n# If it occurs more than 3 times, we'll flag it.\r\nscope: sentence\r\nignorecase: false\r\nmax: 3\r\ntoken: ','\r\n```\r\n\r\nHowever, it's flagging the first comma in an unrelated sentence (when it should be flagging the next sentence).\r\n\u003cimg width=\"1585\" alt=\"example1\" src=\"https://user-images.githubusercontent.com/55214086/104221024-310d9a00-53f5-11eb-921f-fdcf1531fe93.PNG\"\u003e\r\n\r\nExample text\r\n\r\nFlagging (in bold)\r\n\r\nThe ASP isn't actually a component of the SDK. It's software that lives on a chip (SOC) or firmware on a dedicated digital signal processor (DSP). Its job is to clean up the audio and create a single audio strea**m, e**ven if your device uses a multimicrophone array. Techniques used to clean the audio include acoustic echo cancellation (AEC), noise suppression, beam forming, voice activity detection (VAD), dynamic range compression (DRC), and equalization.\r\n\r\nExpected flagging \r\n\r\nThe ASP isn't actually a component of the SDK. It's software that lives on a chip (SOC) or firmware on a dedicated digital signal processor (DSP). Its job is to clean up the audio and create a single audio stream, even if your device uses a multimicrophone array. **Techniques used to clean the audio include acoustic echo cancellation (AEC), noise suppression, beam forming, voice activity detection (VAD), dynamic range compression (DRC), and equalization.**\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/307"
   },
   {
    "Title": "Vale existence rule with backticks no longer works",
    "Body": "An `existence` rule that tries to catch, for example, `` ```sh `` no longer works.\r\n\r\nVersion 2.6.2 would catch such a string. Version 2.6.3 (and presumably later) doesn't. Neither `` \\` `` nor `\\x60` work.\r\n\r\nHere is some context: https://gitlab.com/gitlab-org/gitlab-development-kit/-/issues/1144#note_482235607.\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/306"
   },
   {
    "Title": "docker image 2.7.0 not working",
    "Body": "Hi, just trying out vale. looks promising so far. only, i had start difficulties with the newest docker image:\r\n\r\n1. clone the [boilerplate project](https://github.com/errata-ai/vale-boilerplate)\r\n2. go into the cloned directory\r\n3. run `docker run --rm -v $(pwd)/styles:/styles --rm -v $(pwd):/docs -w /docs jdkato/vale:v2.7.0 .`\r\n\r\nerror message: `lstat : no such file or directory`\r\n\r\nwith docker image `v2.3.3` it works. \r\n\r\npossibly related: https://github.com/errata-ai/vale/issues/303",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/305"
   },
   {
    "Title": "Auto update for styles",
    "Body": "Hi all,\r\n\r\nAs far as I can understand from the docs (and please correct me if I am wrong), I need to manually download styles (can it made automatic please?). Since its manual, how can they be automatically updated?\r\nIts a kind of a bother to go and check manually wether the styles were update and download them manually again.\r\n\r\nThanks all.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/304"
   },
   {
    "Title": "Update Docker builds",
    "Body": "As part of https://github.com/errata-ai/vale-action/issues/29, new Docker builds would need to be published to Docker Hub. Reading through the Makefile, it looks like `@jdkato` would need to do this, under their account. That being said, let me know if there's anything I can do to help.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/303"
   },
   {
    "Title": "Package restructure",
    "Body": "One of the first things I want to do in the new year is stabilize Vale's packages. I'm planning on adopting the basic layout used for GitHub's new [`cli/cli`](https://github.com/cli/cli) project:\r\n\r\n- `cmd`: The CLI-related code. I don't want to introduce any breaking changes to the interface, but I'd like to roughly follow the guidelines at https://clig.dev/. Especially as the the CLI becomes more advanced with the additions I outlined in the [funding announcement](https://opencollective.com/vale/contribute/3x10-funding-campaign-22663).\r\n\r\n- `internal`: The overly Vale-specific packages that shouldn't be used by other projects. Currently, I basically view all of Vale's packages are \"internal\" in terms of implementation changes but this should be made more clear.\r\n\r\nThe other packages will move a `pkg` folder and I'll commit to making these stable for use independent of Vale itself. I currently have plans for 3 such packages:\r\n\r\n- `pkg/spell`: A pure-Go, high-performance spell checker based on Hunspell-compatible dictionaries. Key issues / features:\r\n    - [x] #98\r\n\r\n- `pkg/fetch`: A tool-agnostic package for collecting CLI input. It should handle things like:\r\n   - [ ] Support common ignore files.\r\n   - [ ] Support VCS-related filtering (e.g., only *changed files*). \r\n\r\n- `pkg/glob`: A full-featured globbing library in pure Go comparable to [`fast-glob`](https://github.com/mrmlnc/fast-glob) in Node.js.\r\n   - [ ] Act as the first introduction of PCRE-flavored regex into Vale. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/302"
   },
   {
    "Title": "Ignore link text when the text is equals to href",
    "Body": "Ignore the text of a link when the value is equals to the href attribute. As a result, the linter will ignore the following occurrences:\r\n\r\n```html\r\n\u003ca href=\"https://www.google.fr\"\u003ehttps://www.google.fr\u003c/a\u003e\r\n```\r\n\r\n```html\r\n\u003ca href=\"file.html\"\u003efile.html\u003c/a\u003e\r\n```\r\n\r\nIn the above case, I believe that Vale should not lint the text since the value is actually an URL. Vale will still lint the text when the value is not equals to the href. For instance:\r\n\r\n```html\r\n\u003ca href=\"https://www.google.fr\"\u003ewww.google.fr\u003c/a\u003e\r\n```\r\n\r\n```html\r\n\u003ca href=\"foo.html\"\u003ebar.html\u003c/a\u003e\r\n```\r\n\r\nUsing [`url.Parse`](https://golang.org/pkg/net/url/#Parse) to check that the text is an URL could produce false positive.\r\n\r\nI think this change is reasonable since we know that the text of the link is actually an URL (since the value is equals to the `href` attribute). As mentioned in #297, it should be possible to define a `BlockIgnores` to explicitly ignore bare links but I think it should be built-in.\r\n\r\nref #297 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/301"
   },
   {
    "Title": "By default, Vale should ignore AsciiDoc attribute references",
    "Body": "- OS: Linux \r\n- Install method: Direct download\r\n- Vale version: `vale version 2.6.8`\r\n\r\n\r\n`.vale.ini`\r\n\r\n```ini\r\nStylesPath = docs/.vale\r\nMinAlertLevel = suggestion\r\n\r\n[*.adoc]\r\nBasedOnStyles = test\r\n```\r\n\r\n`docs/.vale/test/Substitutions.yml`\r\n\r\n```yml\r\nextends: substitution\r\nmessage: Consider using '%s' instead of '%s'\r\nlevel: error\r\nignorecase: true\r\nnonword: false\r\nscope: text\r\nswap:\r\n  asciidoctor: Asciidoctor\r\n```\r\n\r\n`docs/test.adoc`\r\n\r\n```adoc\r\n= Document Title\r\n\r\nAsciidoctor is great!\r\nRead the {asciidoctor-project-name} documentation.\r\n\r\nUnlike AsciiDoc, Asciidoctor is spelled with a lowercase \"d\".\r\nPlease do not use this incorrect capitalization: AsciiDoctor.\r\n```\r\n\r\n#### Current result\r\n\r\n```console\r\n$ vale docs/test.adoc                            \r\n\r\n docs/test.adoc\r\n 4:11  error  Consider using 'Asciidoctor'    test.Substitutions \r\n              instead of 'asciidoctor'                           \r\n 7:50  error  Consider using 'Asciidoctor'    test.Substitutions \r\n              instead of 'AsciiDoctor'                           \r\n\r\n✖ 2 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n#### Expected result\r\n\r\nAttribute references should be ignored.\r\n\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/300"
   },
   {
    "Title": "Ignore tokens from the capitalization",
    "Body": "The `capitalization` rule is really helpful but I wonder if it would be possible to ignore some tokens from the match.\r\n\r\nFor instance, some words should always be written in lowercase even if I want to use a `$title` capitalization on my document title.\r\n\r\nA few examples:\r\n\r\n```\r\n= Run Commands Using npm Scripts\r\n```\r\n\r\n```\r\n= reveal.js Options\r\n```\r\n\r\n```\r\n= Combine XMLHttpRequest Requests With HTML (HyperText Markup Language) \r\n```\r\n\r\nIn the above examples, \"npm\" and \"reveal.js\" must be lowercase. Similarly, \"HTML\", \"XMLHttpRequest\" and \"HyperText\" are using a specific casing and should be ignored.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/299"
   },
   {
    "Title": "Invalid match when using bare links in a list in AsciiDoc",
    "Body": "- OS: Linux \r\n- Install method: Direct download\r\n- Vale version: `vale version 2.6.8`\r\n\r\n\r\n`.vale.ini`\r\n\r\n```ini\r\nStylesPath = docs/.vale\r\nMinAlertLevel = suggestion\r\n\r\n[*.adoc]\r\nBasedOnStyles = test\r\n```\r\n\r\n`docs/.vale/test/Substitutions.yml`\r\n\r\n```yml\r\nextends: substitution\r\nmessage: Consider using '%s' instead of '%s'\r\nlevel: error\r\nignorecase: true\r\nnonword: false\r\nscope: text\r\nswap:\r\n  asciidoctor: Asciidoctor\r\n```\r\n\r\n`docs/test.adoc`\r\n\r\n```adoc\r\n= Document Title\r\n\r\n* https://github.com/asciidoctor/asciidoctor\r\n* http://pryrepl.org/\r\n* http://discuss.asciidoctor.org/page.html\r\n```\r\n\r\n#### Current result\r\n\r\n```console\r\n$ vale docs/test.adoc\r\n\r\n docs/test.adoc\r\n 5:18  error  Consider using 'Asciidoctor'    test.Substitutions \r\n              instead of 'asciidoctor'                           \r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n#### Expected result\r\n\r\nMost of the time, Vale ignores URLs but in this particular case it finds a violation.\r\nIf I remove one item in the list then it's working... :thinking: \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/298"
   },
   {
    "Title": "Vale should ignore xref target (even when the macro has no attribute)",
    "Body": "- OS: Linux \r\n- Install method: Direct download\r\n- Vale version: `vale version 2.6.8`\r\n\r\n\r\n`.vale.ini`\r\n\r\n```ini\r\nStylesPath = docs/.vale\r\nMinAlertLevel = suggestion\r\n\r\n[*.adoc]\r\nBasedOnStyles = test\r\n```\r\n\r\n`docs/.vale/test/Substitutions.yml`\r\n\r\n```yml\r\nextends: substitution\r\nmessage: Consider using '%s' instead of '%s'\r\nlevel: error\r\nignorecase: true\r\nswap:\r\n  ruby: Ruby\r\n```\r\n\r\n`docs/test.adoc`\r\n\r\n```adoc\r\n= Document Title\r\n\r\nHead over to xref:ruby.adoc[].\r\n```\r\n\r\n#### Current result\r\n\r\n```console\r\n$ vale docs/test.adoc\r\n\r\n docs/test.adoc\r\n 3:19  error  Consider using 'Ruby' instead   test.Substitutions \r\n              of 'ruby\r\n```\r\n\r\n#### Expected result\r\n\r\nI would expect the target of the `xref` to be ignored by Vale.\r\n\r\n`xref` does not necessarily have attribute. In some context, the xref text can be inferred so it's actually a good practice to not explicitly define a cross reference text.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/297"
   },
   {
    "Title": "By default, Vale should ignore AsciiDoc block attributes",
    "Body": "- OS: Linux \r\n- Install method: Direct download\r\n- Vale version: `vale version 2.6.8`\r\n\r\n\r\n`.vale.ini`\r\n\r\n```ini\r\nStylesPath = docs/.vale\r\nMinAlertLevel = suggestion\r\n\r\n[*.adoc]\r\nBasedOnStyles = test\r\n```\r\n\r\n`docs/.vale/test/Substitutions.yml`\r\n\r\n```yml\r\nextends: substitution\r\nmessage: Consider using '%s' instead of '%s'\r\nlevel: error\r\nignorecase: true\r\nswap:\r\n  asciidoc: AsciiDoc\r\n```\r\n\r\n`docs/test.adoc`\r\n\r\n```adoc\r\n= Document Title\r\n\r\nHere's a sample Asciidoc document:\r\n\r\n[source,asciidoc]\r\n----\r\nsome asciidoc\r\n----\r\n\r\nAsciidoctor is a fast, open source text processor and publishing toolchain\r\nfor converting asciidoc content to HTML5, DocBook, PDF, and other formats.\r\n```\r\n\r\n#### Current result\r\n\r\n```console\r\n$ vale docs/test.adoc\r\n\r\n docs/test.adoc\r\n 3:17  error  Consider using 'AsciiDoc'       test.Substitutions \r\n              instead of 'Asciidoc'                              \r\n 5:9   error  Consider using 'AsciiDoc'       test.Substitutions \r\n              instead of 'asciidoc'                              \r\n\r\n✖ 2 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n#### Expected result\r\n\r\nThe language attribute in the source block should be ignored by default.\r\nArguably, it could be useful to apply style rules on block attributes but that should definitely be a dedicated scope.\r\n\r\nInterestingly, `vale` does not see the last violation line 11 (after the source block): \"for converting asciidoc content to HTML5, DocBook, PDF, and other formats.\". Should I open a dedicated issue?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/296"
   },
   {
    "Title": "default StylesPath",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\nI think it would be beneficial to have StylesPath set to a specific string if the user did not overwrite it with a config file. Default could be `/usr/share/vale/`, but it should be a compile time option. This would allow Linux distributions to ship styles without the user having to figure out where the styles were installed.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/295"
   },
   {
    "Title": "How to use vale with Sphinx?",
    "Body": "Hi,\r\n\r\nI don't know if this is a problem with Vale (v2.6.6), or in the way I use Sphinx, but I don't understand how to configure Vale such, that it works with my setup.\r\n\r\nMy Sphinx command is: \r\n\r\n```\r\nsphinx-build docs docs/public\r\n```\r\n\r\nIn `.vale.ini`, I set `SphinxBuildPath` to `docs/public`. \r\n\r\nI see the following error message:\r\n\r\n```\r\nE100 [docs/demo/contents.rst] Runtime error\r\n\r\nopen /home/user1/docs/public/html/contents.html: no such file or directory\r\n```\r\n\r\nSo, it seems like Vale expects the output for Sphinx to be in `{SphinxBuildPath}/html`.\r\n\r\nIf I change my Sphinx command to:\r\n\r\n```\r\nsphinx-build docs docs/public/html\r\n```\r\n\r\nusing the same `.vale.ini` file, I get this error: \r\n\r\n```\r\nE100 [docs/demo/auto.rst] Runtime error\r\n\r\nopen /home/user1/docs/public/html/auto.html: no such file or directory\r\n```\r\n\r\nwhich indicates that Vale expects all HTML files in the `{SphinxBuildPath}/html` directory, which doesn't work if you have content inside subfolders. \r\n\r\nCould you help me out? ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/294"
   },
   {
    "Title": "Small problem with error handling for CLI edge cases",
    "Body": "Just something we noticed recently, and I finally figured out how to reproduce it.\r\n\r\nIf you pass a non-existent file to Vale by accident, it doesn't fail, but at least it doesn't crash:\r\n\r\n```shell\r\n$ vale --config ../.vale.ini --minAlertLevel error nofile.md\r\n✔ 0 errors, 0 warnings and 0 suggestions in stdin.\r\n```\r\n\r\nIf you combine it with a file that DOES exist, it fails silently again:\r\n\r\n```shell\r\n$ vale --config ../.vale.ini --minAlertLevel error README.md          \r\n README.md\r\n 28:3  error  Link \"[**User                       gitlab.InternalLinkExtension \r\n              documentation**](user/index.html)\"                               \r\n              must use the .md file extension.                                 \r\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n\r\n$ vale --config ../.vale.ini --minAlertLevel error nofile.md README.md\r\n✔ 0 errors, 0 warnings and 0 suggestions in stdin.\r\n```\r\n\r\nFinally, if you combine it with a file that does exist, but put the file names in the opposite order (existing file first, non-existing file second), it will completely crash:\r\n\r\n```shell\r\n$ vale --config ../.vale.ini --minAlertLevel error README.md nofile.md\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x18 pc=0x173e9ad]\r\ngoroutine 632 [running]:\r\ngithub.com/errata-ai/vale/v2/lint.(*Linter).lintFiles.func1.1(0x7ffeefbff8b3, 0x9, 0x0, 0x0, 0x1ad61a0, 0xc000f60a50, 0xc0001cd680, 0x18a7000)\r\n        github.com/errata-ai/vale/v2/lint/lint.go:124 +0x4d\r\npath/filepath.Walk(0x7ffeefbff8b3, 0x9, 0xc0010ad778, 0x0, 0x0)\r\n        path/filepath/path.go:404 +0x6b\r\ngithub.com/errata-ai/vale/v2/lint.(*Linter).lintFiles.func1(0x7ffeefbff8b3, 0x9, 0xc0005b1940, 0xc0001cd620, 0xc000200480, 0xc00036c660)\r\n        github.com/errata-ai/vale/v2/lint/lint.go:123 +0x114\r\ncreated by github.com/errata-ai/vale/v2/lint.(*Linter).lintFiles\r\n        github.com/errata-ai/vale/v2/lint/lint.go:120 +0xb6\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/292"
   },
   {
    "Title": "DITA performance issues",
    "Body": "The goal of this issue is to track Vale's performance on DITA files. \r\n\r\nAt the moment, it's pretty bad: Vale can lint, for example, a reasonably large Markdown file (~2k lines) in under 1 second but takes ~5s to lint even the simplest of DITA files. This level of performance (or lack thereof) makes it difficult to run Vale on both DITA projects as a whole (from the CLI) and even single files from an editor.\r\n\r\nThe bottleneck here is the `dita` command from the DITA OT, which takes up *most* of the processing time.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/291"
   },
   {
    "Title": "Add 'inline rule scoping'",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/290"
   },
   {
    "Title": "Escaping `#` in TokenIgnores",
    "Body": "I had a similar problem, I tried ignoring `org-mode` comments that start with `#+` and so I tried to use \r\n`TokenIgnores = (#\\+.+)`\r\n\r\nI Also try to escaping it like `(\\#\\+.+)` or `\"(#\\+.+)\"` but none of them worked. So I tried using `vale ls-config` to see the output of the **TokenIgnores** in JSON that look like \r\n``` json\r\n  \"TokenIgnores\": {\r\n    \"*.org\": [\r\n      \"(\"\r\n    ]\r\n  },\r\n``` \r\nI realized it wasn't escaping it so after a bit of looking around I find that it was not escaping because Go-ini thought it was an inline comment. Luckily there was an easy fix, that was replacing a line [ini.go#L208](https://github.com/errata-ai/vale/blob/v2/source/ini.go#L208) \r\n\r\n``` go \r\nuCfg, err = ini.ShadowLoad(base)\r\n``` \r\n``` go\r\nuCfg, err = ini.LoadSources(ini.LoadOptions{\r\n\t\tAllowShadows:             true,\r\n\t\tSpaceBeforeInlineComment: true}, base)\r\n```\r\n\r\nThat **SpaceBeforeInlineComment** requires a space before `#` or `;` to count as an inline comment.\r\n\r\nUsing this build of vale and `TokenIgnores = (#\\+.+$)` results in \r\n``` json\r\n  \"TokenIgnores\": {\r\n    \"*.org\": [\r\n      \"(#\\\\+.+$)\"\r\n    ]\r\n  },\r\n```\r\n\r\nUnfortunately, even though I've managed the fix this little parsing problem I'm still unable to ignore the whole line that starts with `#+` but I hope someone might find this useful anyway.\r\n\r\n_Originally posted by @Thourum in https://github.com/errata-ai/vale/issues/281#issuecomment-739613852_",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/289"
   },
   {
    "Title": "Bug with `\u003c\u003e` markdown links causing warnings in wrong place",
    "Body": "@jdkato A user reported a small bug caused by using `\u003chttps://example.com\u003e` style links: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/49636#what-does-this-mr-do\r\n\r\nI know the problem with these, as you can consider them the same as `[https://example.com](https://example.com)`, so the text between `[]` is linted. The problem is that the warning is in the wrong place, almost as if code/text gets inverted in the eyes of Vale after it hits a warning in that type of link.\r\n\r\nFor example, we have a rule that checks for `config` by itself (should be `configure/configuration`). But when you have a `\u003c\u003e` link, the warning can slip out to the wrong place:\r\n\r\n\u003cimg width=\"730\" alt=\"Screen Shot 2020-12-10 at 14 25 55\" src=\"https://user-images.githubusercontent.com/36979740/101725725-7ee06b00-3af4-11eb-8f78-b3ee1d8efb8a.png\"\u003e\r\n\r\nRemove the `config` from the URL, and it's fine:\r\n\r\n\u003cimg width=\"730\" alt=\"Screen Shot 2020-12-10 at 14 26 09\" src=\"https://user-images.githubusercontent.com/36979740/101725812-a800fb80-3af4-11eb-9ecb-550239a97f98.png\"\u003e\r\n\r\nOr keep the URL unchanged, but use a normal `[link](URL)` markdown link:\r\n\r\n\u003cimg width=\"730\" alt=\"Screen Shot 2020-12-10 at 14 26 28\" src=\"https://user-images.githubusercontent.com/36979740/101725846-bc44f880-3af4-11eb-8ed5-7aaf9b00d8a6.png\"\u003e\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/288"
   },
   {
    "Title": "Panic error in Vale related to Vocab accept.txt",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n## Summary\r\n\r\nThe Markdown file `testPanic.md` causes Vale to error with `panic: runtime error: index out of range [1] with length 1`\r\n\r\n## Environment\r\n\r\n- OS: Windows 10\r\n- Install via: Chocolatey\r\n- Vale version: 2.6.4\r\n- Run under PowerShell\r\n\r\n## Test Case\r\nFull test environment: \u003chttps://github.com/dfinr/vale-test-cases/tree/main/heading%20panic%20error\u003e\r\n\r\n* `test.md` contains **pizza-pizza** in heading. \r\n* `testPanic.md` contains **hubba-hubba** in heading. \r\n* The term **hubba** appears in Vocab accept.txt:  `.vale/Vocab/MyRules/accept.txt`\r\n\r\n**Note:**  Removing **hubba** from Vocab accept.txt resolves the error.\r\n\r\nCorrect test result for `test.md`:\r\n\r\n    PS \u003e vale .\\test.md\r\n\r\n     .\\test.md\r\n     1:4  error  Heading level two should use    MyRules.HeadingsH2\r\n             title case.\r\n\r\n    ✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n\r\nPanic test result for `testPanic.md`:\r\n\r\n    PS \u003e vale .\\testPanic.md\r\n    panic: runtime error: index out of range [1] with length 1\r\n\r\n    goroutine 54 [running]:\r\n    github.com/errata-ai/vale/v2/check.title(0xc000c25250, 0xb, 0xc0002b2070, 0x1, 0x1, 0xc00008aa80, 0xc000006568, 0xc976a0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/check/variables.go:42 +0x31c\r\n    github.com/errata-ai/vale/v2/check.NewCapitalization.func3(0xc000c25250, 0xb, 0xc0002b2070, 0x1, 0x1, 0xc00008aa80, 0xc000356750)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/check/capitalization.go:64 +0x6d\r\n    github.com/errata-ai/vale/v2/check.Capitalization.Run(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc000c249a0, 0xe, 0xc000c249c8, ...)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/check/capitalization.go:88 +0x93\r\n    github.com/errata-ai/vale/v2/lint.(*Linter).lintBlock.func1(0xc0000650e0, 0xc000c25270, 0xc000c25250, 0xb, 0xc000bb9880, 0x12, 0xc000863400, 0xf99ec0, 0xc00049c7e0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/lint/lint.go:253 +0xb4\r\n    created by github.com/errata-ai/vale/v2/lint.(*Linter).lintBlock\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/lint/lint.go:251 +0x265\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/287"
   },
   {
    "Title": "Thoughts about improving error handling",
    "Body": "Dear Joseph,\r\n\r\nfirst things first: Thanks a stack for conceiving and maintaining this fabulous tool. You are doing an excellent job here.\r\n\r\n## Introduction\r\nI am a first-time user of Vale coming here from [1] conceived by @mechanomi and currently work on https://github.com/crate/crate-docs/pull/42 and https://github.com/crate/crate-docs/pull/43. So, please apologize if I am getting something wrong.\r\n\r\nAs we are currently upgrading from Vale 1.4.2 to Vale 2.6.5, I believe it would be a good idea to share some of our observations with you.\r\n\r\n[1] https://github.com/crate/crate-docs\r\n\r\n## Error message when configuration file is missing\r\nWith Vale 1.4.2, the message was\r\n```\r\nWARNING: Missing or invalid config file.\r\n\r\nSee https://github.com/errata-ai/vale#usage for information about creating a config file.\r\n```\r\n\r\nWith Vale 2.6.5, the message is\r\n```\r\nE100 [.vale.ini] Runtime error\r\n\r\nopen : no such file or directory\r\n\r\nExecution stopped with code 1.\r\n```\r\n\r\nMaybe you want to restore the message like it was with Vale 1.x. The message _Missing or invalid config file_ as well as directly referring to the documentation makes things a bit more clear to the user. As this program is about clear and concise language in general, I hope this reasoning will resonate with you.\r\n\r\n## Error reporting with empty or missing `StylesPath`\r\nThis report is exclusively about Vale 2.6.5. I didn't check how the situation was with Vale 1.4.2.\r\n\r\n1. So, everything is fine when using a minimal configuration file like\r\n   ```\r\n   StylesPath = \"styles\"\r\n\r\n   [*]\r\n   BasedOnStyles = proselint, write-good\r\n   ```\r\n\r\n2. When using a configuration file like\r\n   ```\r\n   StylesPath = \"styles\"\r\n\r\n   [*]\r\n   BasedOnStyles = foobar\r\n   ```\r\n   Vale croaks as expected:\r\n   ```\r\n   E100 [loadStyles] Runtime error\r\n\r\n   style 'foobar' does not exist on StylesPath\r\n\r\n   Execution stopped with code 1.\r\n   ```\r\n\r\n3. Also, when configuring an invalid `StylesPath`, Vale croaks appropriately:\r\n   ```\r\n   E201 Invalid value provided [vale.test.ini:1:15]:\r\n\r\n      1* StylesPath = \"styles\"\r\n      2\r\n\r\n   The path 'styles' does not exist.\r\n\r\n   Execution stopped with code 1.\r\n   ```\r\n\r\n4. However, when omitting the `StylesPath` setting like\r\n   ```\r\n   [*]\r\n   BasedOnStyles = proselint, write-good\r\n   ```\r\n   Vale silently skips this misconfiguration and will report\r\n   ```\r\n   ✔ 0 errors, 0 warnings and 0 suggestions in stdin.\r\n   ```\r\n   without signalling any error or warning whatsoever and exits with return code `0`.\r\n\r\n5. The same happens when omitting the `StylesPath` setting and configuring an invalid style like\r\n   ```\r\n   [*]\r\n   BasedOnStyles = foobar\r\n   ```\r\n\r\nI believe that is an important detail which might be improved in order to prevent users accidentally tripping into this. I have been running into it before knowing anything about Vale and assuming that the configuration file [2] would actually have been valid. In turn, while it pretended to be valid, Vale did not apply any style checks at all and did not even warn about that the configured styles would not exist on the (unconfigured) `StylesPath`.\r\n\r\nI hope my report helps in order to slightly improve the quality of this program.\r\n\r\nKeep up the spirit and with kind regards,\r\nAndreas.\r\n\r\n[2] https://github.com/crate/crate-docs/blob/0.4.0/src/_vale.ini\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/284"
   },
   {
    "Title": "Inconsistent quoting with %s substitution in messages .",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\n\r\n\r\nThanks! --\u003e\r\n\r\n## Environment\r\n\r\n* Windows 10\r\n* Installed via Chocolatey\r\n* vale version 2.6.4\r\n\r\n## Summary\r\n\r\n* Messages in `existence` rules **do not** surround %s variables with single quotes.\r\n* Messages in `substitution` rules **do** surround the replacement value(s) in single quotes, but **do not** surround the offending text value.\r\n\r\n## Test case example\r\n\r\n* Standalone test case located here: \u003chttps://github.com/dfinr/vale-test-cases/tree/main/inconsistent%20messages\u003e\r\n\r\n        PS \u003e .\\test.ps1\r\n\r\n_Result: (%s variables have bold added for easier identification)_\r\n\r\ntestMarkdown.md:3:18:MyRules.Substitutions:Use \"**'administrator'**\" instead of \"**admin**.\"\r\ntestMarkdown.md:3:101:MyRules.Avoid:Please avoid oxymorons such as \"**exact estimate**.\"\r\ntestMarkdown.md:3:158:MyRules.Substitutions:Use \"**'import'** or **'load'**\" instead of \"**ingest**.\"\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/282"
   },
   {
    "Title": "Ignore substitution in adoc anchors",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\nHello,\r\n\r\nMore of a question:\r\n\r\nUsing adocs in my vale.ini: \r\n\r\n```\r\n# Only adoc files\r\n[*.adoc]\r\n```\r\n\r\nAnd using a substitution rule:\r\n\r\n```\r\nextends: substitution\r\nmessage: Consider using '%s' instead of '%s'\r\nlevel: warning\r\nignorecase: false\r\n# swap maps tokens in form of bad: good\r\nswap:\r\n  tweak: Tweak\r\n```\r\n\r\nWhat would be the best approach to ignore Asciidoc anchors, as all my anchors are lowercase:\r\n`\r\n[#tweak]`\r\n\r\nI tried using BlockIgnores and TokenIgnores to no avail.\r\n`TokenIgnores = (?s) *(\\[#.*?\\])`",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/281"
   },
   {
    "Title": "Extension based configuration for non-markup files",
    "Body": "First of all, thank you so much for creating and maintaining Vale! It's been a breeze so far to implement it, and I'm impressed by the ecosystem built around it. Keep it up! 🎉 \r\n\r\nIn our project, we have different YAML files that (may) contain markdown. To let Vale parse the YAML as Markdown, we've added `yml = md` to the `[formats]` section in the Vale configuration.\r\n\r\nHowever, we've come across the need to disable specific rules _only_ for the YAML files, and not for the Markdown files. I was wondering if it's possible to do something like this in the `_vale.ini`:\r\n\r\n```ini\r\n[formats]\r\nyml = md\r\n\r\n[*.md]\r\nBasedOnStyles = Vale, Algolia\r\n\r\n[*.yml]\r\nBasedOnStyles = Vale, Google\r\nGoogle.Colon = NO\r\n\r\n```\r\n\r\nI've tried this locally, but it seems that the `yml=md` line under `[formats]` causes Vale to interpret YAML as Markdown files even when it comes to applying file specific rules. Is this indeed the case?\r\n\r\nIf this is not possible to do, is there a workaround to achieve the same (besides using 2 different configuration files)?\r\n\r\nThank you in advance for the reply, please let me know if you need more information. And thank you again for your work on this 🙌 \r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/280"
   },
   {
    "Title": "Feature: Add support for outer.control in DITA",
    "Body": "### Disclaimer\r\nI am by no means a Go developer (I'm primarily a full-stack web developer with some minimal C++ and Java experience in addition to that, Makefiles, etc. aren't really in my repetoire 😉). Therefore, finding the correct position in the source code and a way to implement it (I have a feeling this is probably the worst piece of code I've ever submitted as a Pull Request) already was interesting enough. I wasn't able (and currently do not have the time to learn how) to set up and write for all the linters, testing systems, etc. While the change was rather small and should fully match the previous code style (as far as my understanding of Go goes), this PR *just* includes the source code changes. Maybe we can find a way to include it, sooner or later, anyway?\r\n\r\n### Description\r\nPreviously, DITA files using something like `@conref` to a parent directory lead to an error as `outer.control` was not allowed in the internal call of the DITA command. This is now supported. Some additional code changes were required to find the generated .html file as this means that the .html file can now be in a subdirectory of the temporary folder.\r\n\r\n### Example use case\r\nConsider the following example:\r\n\r\n#### `references/a.dita`\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003c!DOCTYPE reference PUBLIC \"-//OASIS//DTD DITA Reference//EN\" \"reference.dtd\"\u003e\r\n\u003creference id=\"key_git_principles\"\u003e\r\n    \u003ctitle\u003eReference A\u003c/title\u003e\r\n    \u003cshortdesc\u003e\u003cph conref=\"../reusables/phrases.dita#phrases/ph_gxh_bcv_vnb\"/\u003e\u003c/shortdesc\u003e\r\n\u003c/reference\u003e\r\n```\r\n\r\n#### `reusables/phrases.dita`\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003c!DOCTYPE topic PUBLIC \"-//OASIS//DTD DITA Topic//EN\" \"topic.dtd\"\u003e\r\n\u003ctopic id=\"phrases\"\u003e\r\n    \u003ctitle\u003ephrases\u003c/title\u003e\r\n    \u003cbody\u003e\r\n        \u003csection id=\"section_psc_4bv_vnb\"\u003e\r\n            \u003ctitle\u003eReusable Phrases part 1\u003c/title\u003e\r\n            \u003cp\u003e\r\n                \u003cph id=\"ph_gxh_bcv_vnb\"\u003eexample-phrase\u003c/ph\u003e\r\n            \u003c/p\u003e\r\n        \u003c/section\u003e\r\n    \u003c/body\u003e\r\n\u003c/topic\u003e\r\n```\r\n\r\nPreviously, linting `references/a.dita` using vale would have been impossible as `outer.control` was set to fail (and subdirectory structures coming with it were unsupported).\r\n\r\nWith this PR, this can successfully get linted.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/279"
   },
   {
    "Title": "Square brackets in URLs cause vale to lint within the URL (markdown)",
    "Body": "@jdkato A minor bug we just ran into. If the URL has square brackets (either `[` or `]` seem to trigger the bug), Vale will lint within the \"code\" when it shouldn't:\r\n\r\n- \u003cimg width=\"1038\" alt=\"Screen Shot 2020-12-02 at 11 40 30\" src=\"https://user-images.githubusercontent.com/36979740/100821425-b10a2100-3493-11eb-87bc-3d0ab8f21e7b.png\"\u003e\r\n- \u003cimg width=\"1038\" alt=\"Screen Shot 2020-12-02 at 11 40 51\" src=\"https://user-images.githubusercontent.com/36979740/100821438-ba938900-3493-11eb-8769-ae48bd245184.png\"\u003e\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/278"
   },
   {
    "Title": "strangeness with conditional regex; \\d finds '0,1,3,4,6,7,9', but not '2,5,8'",
    "Body": "vale v2.6.2. via homebrew on macOS\r\n\r\nI'm trying to implement what I thought would be a simple rule:\r\n\u003e Spell out numbers under 10.\r\nExceptions:\r\n\u003e Use numerals to write about money, pages, percentages, measurement or time (age, weeks, months, years, hours)\r\n\r\nB/c the `substitution` extension point doesn't allow exceptions, I went with a conditional.\r\n\r\n```\r\nextends: conditional\r\nmessage: \"Spell out numbers under 10. Found digit '%s'\"\r\nignorecase: true\r\nlevel: suggestion\r\nscope: sentence\r\n# capture single digit, followed by opt. :.-[digits] (so decimal nrs, time rages, time of day); we filter them later\r\nfirst: '\\b(\\d(?:[:\\-\\.]\\d+)?)\\b'\r\n# if we only have a single digit, then there is a list of permitted units\r\nsecond: '\\b(\\d)\\b\\s+(?:diabetes|percent|am|pm|weeks|months|years|hours|pages|cm|mm|g|kg)'\r\nexceptions:\r\n  # permit times (x:yy), ranges (x-y), and floats (x.yz)\r\n  - '\\b\\d+[:\\-\\.]\\d+\\b'\r\n```\r\n\r\nThe rule almost works,. but it doesn't find 2, 5, or 8. The regexp works when I test it externally (https://regoio.herokuapp.com).  But not in the context of Vale\r\n\r\nTest input:\r\n```\r\n\u003cp\u003eTest it 0 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 1 time.\u003c/p\u003e\r\n\u003cp\u003eTest it 2 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 3 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 4 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 5 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 6 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 7 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 8 times.\u003c/p\u003e\r\n\u003cp\u003eTest it 9 times.\u003c/p\u003e\r\n\r\n3:30\r\n1-2\r\n1.2\r\n1.25\r\n```\r\n\r\n\r\nOutput\r\n```\r\n 212:12   suggestion  Spell out numbers under 10. Found digit '0'                                                                                                     \r\n 213:12   suggestion  Spell out numbers under 10. Found digit '1'                                                                                                     \r\n 215:12   suggestion  Spell out numbers under 10. Found digit '3'                                                                                                     \r\n 216:12   suggestion  Spell out numbers under 10. Found digit '4'                                                                                                     \r\n 218:12   suggestion  Spell out numbers under 10. Found digit '6'                                                                                                     \r\n 219:12   suggestion  Spell out numbers under 10. Found digit '7'                                                                                                     \r\n 221:12   suggestion  Spell out numbers under 10. Found digit '9'  \r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/277"
   },
   {
    "Title": "url in link fires capitalization rule",
    "Body": "Testing with Vale 2.6.2 from homebrew (macOS).\r\n\r\nI am enforcing sentence-style capitalization in lists:\r\n```\r\nextends: capitalization\r\nmessage: \"'%s' should use sentence-style capitalization.\"\r\nlevel: suggestion\r\nscope: list\r\nmatch: $sentence\r\nindicators:\r\n  - ':'\r\n```\r\n\r\nBut when the list item contains a links whose text is the website url itself, the period in the link text triggers a new sentence.\r\n\r\nE.g.\r\n`\u003cli\u003e\u003ca href=\"\"\u003ewww.website.com\u003c/a\u003e\u003c/li\u003e`\r\n\u003e  190:20   suggestion  'www.website.com' should use sentence-style capitalization. \r\n\r\nI can also confirm a non-unicode ellipsis `...` causes the same error.\r\n\u003e  191:20   suggestion  '...' should use sentence-style capitalization.   \r\n\r\n\r\nI dug around a bit in the go code (not knowing go), and I think the issue is in `variables.go`.  The strings are delimited on punctuation, (and the `TrimRight` removes the delimiting space?).  But I suspect the delimiter itself is at issue.  Shouldn't sentences be delimited by the punctuation plus any whitespace? `[\\?!\\.:]\\s+`\r\n\r\n```\r\nfunc sentence(s string, ignore []string, indicators []string, except *regexp.Regexp) bool {\r\n\tcount := 0.0\r\n\twords := 0.0\r\n\r\n\tre := makeExceptions(ignore)\r\n\r\n\ttokens := re.FindAllString(strings.TrimRight(s, \"?!.:\"), -1)\r\n```\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/276"
   },
   {
    "Title": "Inconsistent message for extends: substitution",
    "Body": "- OS: Windows 10\r\n- Install method: Download\r\n- Vale version: 2.6.3\r\n\r\n* Full test environment: \u003chttps://github.com/dfinr/vale-test-cases/tree/main/multiple%20substitutions\u003e\r\n* Markdown test file: \u003chttps://github.com/dfinr/vale-test-cases/blob/main/multiple%20substitutions/testMarkdown.md\u003e\r\n* Style rule: \u003chttps://github.com/dfinr/vale-test-cases/blob/main/multiple%20substitutions/.vale/MyRules/Substitutions.yml\u003e\r\n\r\n## Issue\r\n\r\nThe message uses the word `or` in two cases, and the pipe symbol in one case.\r\n\r\n## Command-line Test\r\n```\r\nPS \u003e .\\vale --output line .\\testMarkdown.md\r\n\r\n.\\testMarkdown.md:3:15:MyRules.Substitutions:Use 'import or load' instead of 'ingest'.\r\n.\\testMarkdown.md:3:48:MyRules.Substitutions:Use 'import|load' instead of 'ingest'.\r\n.\\testMarkdown.md:5:8:MyRules.Substitutions:Use 'import or load' instead of 'ingest'.\r\n```\r\n\r\n## Vale Studio\r\nThis test is also reproducible on Vale Studio.\r\n\u003chttps://vale-studio.errata.ai/\u003e\r\n\r\n![image](https://user-images.githubusercontent.com/61550036/100010113-c5686280-2d9d-11eb-92d1-4c4cd53cff5a.png)\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/275"
   },
   {
    "Title": "proof format of captions (table and figure)",
    "Body": "I searched the docs and all issues, big didn't find mention of proofing captions.  I have a requirement that table and figure captions should be labelled, numbered, and described.\r\n\r\n\u003e Table 2: Additional Resources\r\n\u003e Figure 1: Diagram showing....\r\n\r\nI was expecting to find something under scope (_table.caption_, or _figure.caption_).  Is there a way of targeting specific HTML tags?  Looks like _figure_ may be entirely excluded anyway. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/274"
   },
   {
    "Title": "Attempt to parse .travis.yml as a rule file since version 2.4.1",
    "Body": "This issue notes a change in behaviour between vale version 2.4.0 and version 2.4.1. The change in behaviour persists to the latest version 2.6.3.\r\n\r\n- OS: Linux Ubuntu 20.04\r\n- Install method: download `*_Linux_64-bit.tar.gz` from https://github.com/errata-ai/vale/releases\r\n- Vale version: \u003e2.4.0\r\n\r\nWhen [errata-ai/Google](https://github.com/errata-ai/Google) is included in a project as a [Git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules), versions \u003e2.4.0 attempt to parse `Google/.travis.yml` as a rule file.\r\n\r\n`.gitmodules` is created with `git submodule add https://github.com/errata-ai/Google styles/Google`:\r\n\r\n```ini\r\n[submodule \"styles/Google\"]\r\n    path = styles/Google\r\n    url = https://github.com/errata-ai/Google.git\r\n```\r\n\r\n`.vale.ini`:\r\n\r\n```ini\r\nStylesPath = styles\r\n\r\n[*.rst]\r\nBasedOnStyles = Vale, Google\r\n```\r\n\r\nTest document `document.rst`:\r\n\r\n```rst\r\n===============\r\nA test document\r\n===============\r\n\r\nA paragraph with a spellling error.\r\n```\r\n\r\nVale version 2.4.0 produces the following output:\r\n\r\n    $ vale --version\r\n    vale version 2.4.0\r\n    $ vale document.rst\r\n\r\n    document.rst\r\n    5:20  error  Did you really mean             Vale.Spelling\r\n                'spellling'?\r\n\r\n    ✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n\r\n\r\nVale version 2.4.1 to 2.6.3 produce the following output:\r\n\r\n    $ vale --version\r\n    vale version 2.6.3\r\n    $ vale document.rst\r\n    E201 Invalid value provided [/path/to/project/styles/Google/.travis.yml:1:1]:\r\n\r\n    1* language: python\r\n    2  cache: bundler\r\n    3  python:\r\n\r\n    Missing the required 'extends' key.\r\n\r\n    Execution stopped with code 1.\r\n\r\nIt appears that from version 2.4.1 vale attempts to parse `.travis.yml` as a rule file.\r\n\r\nBeing able to include a style as a Git submodule has the advantages:\r\n\r\n1. All project users are locked to the same version.\r\n2. There is a clear history of what version of the style was being used at any point in time.\r\n3. When changes are pushed to the upstream style, the changes to the Git submodule do not need to immediately follow.\r\n\r\nWhat is the expected behaviour? ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/273"
   },
   {
    "Title": "Exclusions don't seem to work properly in scope: raw",
    "Body": "Another minor bug, but it seems like exclusions don't work as expected for rules using `scope: raw`. I can add the standard exclusions for all of our rules that *don't* use `scope: raw`, but none of the rules that DO use it can't be excluded properly.\r\n\r\nSee how the first rule gives suggestions, then within the exclusion block it does not. Then the second rule (which uses `scope: raw` does not exclude the alert:\r\n\r\n\u003cimg width=\"588\" alt=\"Screen Shot 2020-11-16 at 16 00 34\" src=\"https://user-images.githubusercontent.com/36979740/99221980-fb00cf00-2824-11eb-81b5-90e9ee55259b.png\"\u003e\r\n\r\nThe weird thing is that if you forget to add the second line (to re-enable the rule), it then excludes the rule from the entire file, including lines BEFORE the exclusion. Non-`scope: raw` rules work as expected, only excluding everything after the exclusion line:\r\n\r\n\u003cimg width=\"875\" alt=\"Screen Shot 2020-11-16 at 16 03 54\" src=\"https://user-images.githubusercontent.com/36979740/99222232-78c4da80-2825-11eb-8ae5-d99b79b5d449.png\"\u003e\r\n\r\ncc @jdkato ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/272"
   },
   {
    "Title": "Quad backticks in markdown shifts the result numbers",
    "Body": "Very minor issue, but if you are using quad backticks in a markdown file (so that you can have triple backticks render in a code block), it shifts the results off by one character (sometimes one word) for each quad backtick pair.\r\n\r\nSo, for example, with a rule looking for the word \"easy\", each quad backtick shifts the results left (it's the same in CLI):\r\n\r\n\u003cimg width=\"843\" alt=\"Screen Shot 2020-11-16 at 15 48 41\" src=\"https://user-images.githubusercontent.com/36979740/99221117-5467fe80-2823-11eb-8249-012e52aa13bc.png\"\u003e\r\n\r\nFrom:\r\n\r\n`````\r\nThis is how to write a CI YAML code block:\r\n\r\n````markdown\r\n```yaml\r\njob:\r\n  script:\r\n    - echo \"Wow\"\r\n```\r\n````\r\n\r\nAnother easy example:\r\n\r\n````markdown\r\n```yaml\r\njob:\r\n  script:\r\n    - echo \"Wow\"\r\n```\r\n````\r\n\r\nWas that easy?\r\n`````\r\n\r\nIt's written that way, so that the triple backticks render properly, for example:\r\n\r\nThis is how to write a CI YAML code block:\r\n\r\n````markdown\r\n```yaml\r\njob:\r\n  script:\r\n    - echo \"Wow\"\r\n```\r\n````\r\n\r\nAnother easy example:\r\n\r\n````markdown\r\n```yaml\r\njob:\r\n  script:\r\n    - echo \"Wow\"\r\n```\r\n````\r\n\r\nWas that easy?\r\n\r\ncc @jdkato ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/271"
   },
   {
    "Title": "Make LintedTotal available in custom template",
    "Body": ":wave: Hi 🙂 This PR makes the linted file count available when using custom templates.\r\n\r\nUsing the custom template:\r\n\r\n```\r\n{{- /* Modify Vale's output https://docs.errata.ai/vale/cli#--output */ -}}\r\n\r\n{{- /* Keep track of our various counts */ -}}\r\n\r\n{{- $e := 0 -}}\r\n{{- $w := 0 -}}\r\n{{- $s := 0 -}}\r\n{{- $f := 0 -}}\r\n\r\n{{- /* Range over the linted files */ -}}\r\n\r\n{{- range .Files}}\r\n\r\n{{- $f = add1 $f -}}\r\n{{- $path := .Path | underline -}}\r\n\r\n{{- /* Range over the file's alerts */ -}}\r\n\r\n{{- range .Alerts -}}\r\n\r\n{{- $error := \"\" -}}\r\n{{- if eq .Severity \"error\" -}}\r\n    {{- $error = .Severity | red -}}\r\n    {{- $e = add1 $e  -}}\r\n{{- else if eq .Severity \"warning\" -}}\r\n    {{- $error = .Severity | yellow -}}\r\n    {{- $w = add1 $w -}}\r\n{{- else -}}\r\n    {{- $error = .Severity | blue -}}\r\n    {{- $s = add1 $s -}}\r\n{{- end}}\r\n\r\n{{- /* Variables setup */ -}}\r\n\r\n{{- $path = $path -}}\r\n{{- $loc := printf \"Line %d, position %d\" .Line (index .Span 0) -}}\r\n{{- $check := printf \"%s\" .Check -}}\r\n{{- $message := printf \"%s\" .Message -}}\r\n{{- $link := printf \"%s\" .Link -}}\r\n\r\n{{- /* Output */ -}}\r\n\r\n{{ $path }}:\r\n {{ $loc }} (rule {{ $check }})\r\n {{ $error }}: {{ $message }}\r\n More information: {{ $link }}\r\n\r\n{{end -}}\r\n{{end -}}\r\n\r\n{{- $e}} {{\"errors\" | red}}, {{$w}} {{\"warnings\" | yellow}} and {{$s}} {{\"suggestions\" | blue}} in {{$f}} of {{.LintedTotal}} {{.LintedTotal | plural \"file\" \"files\"}}.\r\n```\r\n\r\nAnd running, produces:\r\n\r\n```sh\r\n$ vale --config .vale.ini --minAlertLevel error --output .vale/vale.tmpl **/*.md\r\n--snip--\r\n3 errors, 0 warnings and 0 suggestions in 2 of 18 files.\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/270"
   },
   {
    "Title": "Minor bug in example template",
    "Body": "In the example at https://docs.errata.ai/vale/cli#template-examples, the final line seems to be outputting the number of files that had an alert at error/warning/suggestion level. When I run the example template with 1300'ish files, (and one set to fail during testing), I get:\r\n\r\n```\r\n1 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nIf no files fail, it says `0 files`. Seems that the `$f` variable is only incrementing when an alert is thrown... or maybe `.Files` is only returning files with alerts? It's a very minor thing, and we've still switched to using a template, but might as well point it out. cc @jdkato ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/269"
   },
   {
    "Title": "Vale 2.6.1: panic: runtime error: index out of range [1] with length 1",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\n## Summary\r\nIn the test case described below:\r\n\r\n* Vale fails with `panic: runtime error: index out of range [1] with length 1`, if the content of `test.md` is the lowercase title:\r\n```\r\n# configuration\r\n```\r\n*  Vale succeeds if the content of `test.md` is title case:\r\n```\r\n# Configuration\r\n```\r\n\r\nThis appears to be some interaction between Chicago style titles, and the word **config** appearing in the `accept.txt` Vocab file.\r\n\r\n## Environment\r\n\r\n* Windows 10 20H2\r\n* Installed via Chocolatey\r\n* Vale version 2.6.1 (also fails on 2.5.0)\r\n* Run under PowerShell. Also fails with VSCode plugin. \r\n\r\n## Example\r\n\r\n```\r\nPS \u003e vale -v\r\nvale version 2.6.1\r\n\r\nPS \u003e vale .\\test.md\r\npanic: runtime error: index out of range [1] with length 1\r\n\r\ngoroutine 12 [running]:\r\ngithub.com/errata-ai/vale/v2/check.title(0xc000b924d0, 0xd, 0xc000464aa0, 0x2, 0x2, 0xc0000e9dc0, 0xc0004740e0, 0xc00030f938)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/check/variables.go:39 +0x31c\r\ngithub.com/errata-ai/vale/v2/check.NewCapitalization.func1(0xc000b924d0, 0xd, 0xc000464aa0, 0x2, 0x2, 0xc0000e9dc0, 0x1a80050000000004)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/check/capitalization.go:54 +0x6d\r\ngithub.com/errata-ai/vale/v2/check.Capitalization.Run(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc000b70960, 0xe, ...)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/check/capitalization.go:78 +0x93\r\ngithub.com/errata-ai/vale/v2/lint.(*Linter).lintText.func1(0xc0000640c0, 0xc000b92500, 0xc000b924d0, 0xd, 0xc000b70910, 0xd, 0xc000514dc0, 0xf99b40, 0xc0003178c0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/lint/lint.go:260 +0xc1\r\ncreated by github.com/errata-ai/vale/v2/lint.(*Linter).lintText\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/lint/lint.go:258 +0x383\r\n\r\n```\r\n\r\n## Test Case\r\n\r\nI've created a test, attached as [ValePanic.zip](https://github.com/errata-ai/vale/files/5531585/ValePanic.zip), which contains:\r\n\r\n* `test.md`\r\n* `.vale.ini`\r\n* `.vale/test/Headings.yml`\r\n* `.vale/Vocab/test/accept.txt`\r\n* `.vale/Vocab/test/reject.txt`\r\n\r\nContents of **test.md**\r\n```\r\n# configuration\r\n```\r\nContents of **.vale.ini**\r\n```\r\n###########################################\r\n# Vale configuration\r\n## https://docs.errata.ai/vale/about\r\n###########################################\r\n\r\nStylesPath = \".vale\"\r\nMinAlertLevel = suggestion\r\nVocab = test\r\n\r\n[formats]\r\n## Check Markdown files.\r\n[*.md]\r\nBasedOnStyles = test, Vale\r\n```\r\nContents of **.vale/test/Headings.yml**\r\n```\r\n---\r\n# The Vultr Markdown Toolkit is released under the Creative Commons Attribution 4.0 International (CC BY 4.0) license.\r\n# https://creativecommons.org/licenses/by/4.0/\r\n#\r\nextends: capitalization\r\nmessage: \"Headings should use title case. Vultr follows the Chicago Manual of Style. \"\r\nlink: https://capitalizemytitle.com/style/chicago\r\nlevel: error\r\nscope: heading\r\nmatch: $title\r\nstyle: Chicago\r\nexceptions:\r\n  - macOS\r\n```\r\n\r\nContents of **.vale/Vocab/test/accept.txt**\r\n```\r\nconfig\r\n```\r\n\r\n**.vale/Vocab/test/reject.txt** is zero bytes.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/268"
   },
   {
    "Title": "Vale crashing on Windows after 2.3.4 release when invalid StylesPath",
    "Body": "- OS: Windows 10 202H x64\r\n- Install method: direct download from GitHub releases\r\n- Vale version: 2.6.1, but tested all the versions going back to 2.3.4 where it worked again\r\n\r\nRunning the `version` command works, but running a glob pattern like `vale \"**/*.md\"` crashes out\r\n\r\nIn Git Bash\r\n```\r\n$ vale \"**/*.md\"\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xc0000005 code=0x0 addr=0x18 pc=0x99fb70]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/errata-ai/vale/v2/core.NewE201(0xc0000d5ec0, 0x34, 0xc00058ae21, 0x16, 0xc0004bf980, 0x9, 0xe5ba18, 0xc0000d5ec0, 0xc000641930)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/core/error.go:130 +0x160\r\ngithub.com/errata-ai/vale/v2/core.NewE201FromTarget(0xc0000d5ec0, 0x34, 0xc00058ae21, 0x16, 0xc0004bf980, 0x9, 0x34, 0xc00058afe0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/core/error.go:157 +0x77\r\ngithub.com/errata-ai/vale/v2/source.glob..func11(0xc0005e55e0, 0xc0003e8600, 0xc000564ce0, 0x2, 0x2, 0x1, 0xa)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/ini.go:109 +0x2cc\r\ngithub.com/errata-ai/vale/v2/source.processConfig(0xc000394540, 0xc0003e8600, 0xc000564ce0, 0x2, 0x2, 0x0, 0x0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/ini.go:289 +0xd89\r\ngithub.com/errata-ai/vale/v2/source.loadINI(0xc0003e8600, 0x1719320, 0x1)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/ini.go:219 +0x387\r\ngithub.com/errata-ai/vale/v2/source.From(0xd758ab, 0x3, 0xc0003e8600, 0x0, 0x0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/source.go:16 +0x107\r\nmain.main.func2(0xc0003c71e0, 0x0, 0x0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/main.go:156 +0x96\r\ngithub.com/urfave/cli.HandleAction(0xcac220, 0xc000564660, 0xc0003c71e0, 0x0, 0x0)\r\n        /home/travis/gopath/pkg/mod/github.com/urfave/cli@v1.22.4/app.go:526 +0xc5\r\ngithub.com/urfave/cli.(*App).Run(0xc0008a0540, 0xc0000b4440, 0x2, 0x2, 0x0, 0x0)\r\n        /home/travis/gopath/pkg/mod/github.com/urfave/cli@v1.22.4/app.go:288 +0x5ff\r\nmain.main()\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/main.go:193 +0xd94\r\n```\r\n\r\nIn PowerShell\r\n```\r\nPS Z:\\cspell\\packages\\cspell-tools\u003e vale --version\r\nvale version 2.6.1\r\nPS Z:\\cspell\\packages\\cspell-tools\u003e vale \"**/*.md\"\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xc0000005 code=0x0 addr=0x18 pc=0x99fb70]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/errata-ai/vale/v2/core.NewE201(0xc00065c200, 0x34, 0xc0004ea7e1, 0x16, 0xc0006c65f0, 0x9, 0xe5ba18, 0xc00065c200, 0xc0005152b0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/core/error.go:130 +0x160\r\ngithub.com/errata-ai/vale/v2/core.NewE201FromTarget(0xc00065c200, 0x34, 0xc0004ea7e1, 0x16, 0xc0006c65f0, 0x9, 0x34, 0xc0004ea9a0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/core/error.go:157 +0x77\r\ngithub.com/errata-ai/vale/v2/source.glob..func11(0xc0005067e0, 0xc00020dc00, 0xc000277de0, 0x2, 0x2, 0x1, 0xa)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/ini.go:109 +0x2cc\r\ngithub.com/errata-ai/vale/v2/source.processConfig(0xc000370540, 0xc00020dc00, 0xc000277de0, 0x2, 0x2, 0x0, 0x0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/ini.go:289 +0xd89\r\ngithub.com/errata-ai/vale/v2/source.loadINI(0xc00020dc00, 0x1719320, 0x1)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/ini.go:219 +0x387\r\ngithub.com/errata-ai/vale/v2/source.From(0xd758ab, 0x3, 0xc00020dc00, 0x0, 0x0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/source/source.go:16 +0x107\r\nmain.main.func2(0xc000510dc0, 0x0, 0x0)\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/main.go:156 +0x96\r\ngithub.com/urfave/cli.HandleAction(0xcac220, 0xc0002778a0, 0xc000510dc0, 0x0, 0x0)\r\n        /home/travis/gopath/pkg/mod/github.com/urfave/cli@v1.22.4/app.go:526 +0xc5\r\ngithub.com/urfave/cli.(*App).Run(0xc0000d2380, 0xc0000044a0, 0x2, 0x2, 0x0, 0x0)\r\n        /home/travis/gopath/pkg/mod/github.com/urfave/cli@v1.22.4/app.go:288 +0x5ff\r\nmain.main()\r\n        /home/travis/gopath/src/github.com/errata-ai/vale/main.go:193 +0xd94\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/267"
   },
   {
    "Title": "Parts of speech: Oddities and explorations",
    "Body": "I’ve been spending time trying to use part of speech tagging in some rules. Generally, it’s gone quite well.\r\n\r\nI ran into a couple of problems today. Notably, I ran vale multiple times and got different results for a rule that uses `pos` each time. Sometimes the rule generated an alert, other times it wouldn’t. I haven’t tracked that precise bug down yet. I’m mentioning it here in case it rings a bell for you.\r\n\r\nI’ve started trying to build a rule bit by bit that *works*, trying to discover my own failings in understanding and perhaps also to find a bug.\r\n\r\nI’m not quite there yet, but I’ve got something to chew on. See this rule:\r\n\r\n```yaml\r\nlevel      : warning\r\nmessage    : \"%s\"\r\nlink       : https://support.1password.com/style-guide/#all--all-of\r\n\r\nextends: substitution\r\nignorecase: true\r\n\r\npos: 'all/DT [^ ]+/PRP'\r\n\r\nswap:\r\n  'all \\w+': Use \"all of\", not \"all\".\r\n```\r\n\r\nI used Vale 2.5.0 to tag a minimal sentence:\r\n\r\n```\r\n$ ./vale25 tag \"It includes all them.\"\r\nIt/PRP includes/VBZ all/DT them/PRP ./.\r\n```\r\n\r\nYet when I lint the sentence:\r\n\r\n```\r\n$ echo \"It includes all them.\" | ./vale25\r\n✔ 0 errors, 0 warnings and 0 suggestions in stdin.\r\n```\r\n\r\nEverything seems to be working with other rules:\r\n\r\n```\r\n$ echo \"Open the 1Browser.\" | ./vale25\r\n\r\n stdin.md\r\n 1:10  error  Use \"1Password browser\"         1Password.words-do_not_use\r\n              instead of \"1Browser\".\r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in stdin.\r\n```\r\n\r\nIs this Vale, or is it me…? 😅",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/266"
   },
   {
    "Title": "`vale tag` command not working in builds after 2.5.1",
    "Body": "The `tag` command stopped working in the Vale 2.5.1 release. This persists in 2.6.1.\r\n\r\nIf you use it with no configuration file present, it fails with an error. If Vale finds a configuration file, it gives you a sham lint on stdin.\r\n\r\n```\r\n~ $ vale25 tag \"These are words to make a sentence.\"\r\nThese/DT are/VBP words/NNS to/TO make/VB a/DT sentence/NN ./.\r\n```\r\n\r\n```\r\n~ $ vale251 tag \"These are words to make a sentence.\"\r\n\r\nE100 [.vale.ini] Runtime error\r\n\r\nopen : no such file or directory\r\n\r\nExecution stopped with code 1.\r\n```\r\n\r\n```\r\n~/has-config $ vale251 tag \"These are words to make a sentence.\"\r\n\r\n✔ 0 errors, 0 warnings and 0 suggestions in stdin.\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/265"
   },
   {
    "Title": "Regular expressions in substitutions are always case-sensitive",
    "Body": "Vale 2.6.1\r\n\r\nIn a rule that's `ignorecase: true`, I would expect regular expressions in replacements to also be case-insensitive.\r\n\r\n## Example\r\n\r\nInput:  `Select the Provision Manager and click Update Group Members.`\r\nCaught by this rule:\r\n\r\n```\r\nlevel      : error\r\nmessage    : Use \"group member\", \"family member\", or \"team member\".\r\nlink       : https://support.1password.com/style-guide/#member\r\n\r\nextends: substitution\r\nignorecase: true\r\n\r\nswap:\r\n  '(?:[^\\s]*) members?': '(?:group|family|team) members?'\r\n```\r\n\r\nI'm working around this for now with `(?i)` prepended to the replacement value.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/264"
   },
   {
    "Title": "BlockIgnore for accross multiple blocks",
    "Body": "I'm using Vale 2.5.1 and this is my vale.ini\r\n\r\n```\r\nStylesPath = style\r\nMinAlertLevel = warning\r\n\r\n[*.{go,py,java,js,jsx,tex}]\r\nBasedOnStyles = proselint, write-good, google\r\nBlockIgnores = (?s) *(ValeOFF.*?/ValeOFF)\r\n\r\n[README.md]\r\nBasedOnStyles = proselint, write-good, google\r\n```\r\n\r\nbut my BlockIgnores is not working and my goal is to ignore multiple comment blocks. This is the file structure as example for Python:\r\n```\r\nimport\r\n\r\n# ValeOff\r\n\r\n\"\"\" a \r\nlong \r\ndescription\r\n\"\"\"\r\n\r\ndef ABCD()\r\n     r\"\"\"\r\n     comment\r\n     \"\"\"\"\r\n# a long line comment\r\n\r\n\r\n# /ValeOFF\r\n```\r\n\r\nSo is it possible to ignore everything between `ValeOFF` and `/ValeOFF`? I have also C, Java, JS, JSX, TeX, and Go files, which should use the same ignore pattern.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/263"
   },
   {
    "Title": "Regex across line break does not match indented blocks",
    "Body": "- OS Windows 10\r\n- Install method Chocolatey\r\n- Vale version 2.5.0\r\n\r\nGiven is this YAML style:\r\n```\r\nextends: substitution\r\nmessage: Consider using '%s' instead of '%s'\r\nlevel: warning\r\nignorecase: false\r\nswap:\r\n  a[\\n\\r\\s]+b: A B\r\n```\r\nAnd a Markdown file with this content:\r\n```\r\n1: a b\r\n\r\n2: a\r\nb\r\n\r\n  3: a b\r\n  \r\n  4: a\r\n  b\r\n\r\n```\r\nThe vale output is:\r\n```\r\nPS C:\\Work\\vale\u003e vale TestMe.md\r\n\r\n TestMe.md\r\n 1:4  warning  Consider using 'A B' instead    Test.Substitution\r\n               of 'a b'\r\n 3:4  warning  Consider using 'A B' instead    Test.Substitution\r\n               of 'a b'\r\n 6:6  warning  Consider using 'A B' instead    Test.Substitution\r\n               of 'a b'\r\n\r\n✖ 0 errors, 3 warnings and 0 suggestions in 1 file.\r\n```\r\nExamples 1-3 in the Markdown file trigger the rule as expected. Example 4, where the block is indented *and* has a line break between a and b, does not. What could be the reason for this behavior? \r\n\r\nCross-checking this with https://regoio.herokuapp.com/ seems to confirm that at least the regex is correct:\r\n![rego](https://user-images.githubusercontent.com/37544914/98162269-6a9bc380-1ee1-11eb-8e58-7a6780a832cd.png)\r\n\r\nUnfortunately, this is a showstopper for us since indentation is a common feature in Markdown, and we break long lines for better readability in editors.\r\n\r\nAny hints?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/262"
   },
   {
    "Title": "\u003c!-- vale off --\u003e doesn't work inside a block element",
    "Body": "Vale 2.5.1\r\n\r\nNot sure if this is expected but `\u003c!-- vale off --\u003e` used inline doesn't turn off processing for the span of text. I'd prefer to use that rather than 'comment out' an entire paragraph.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/261"
   },
   {
    "Title": "Feature request: Include link in output",
    "Body": "As per the first example you see at https://docs.errata.ai/vale/styles, we can include a `link: ` entry in a style YAML. I think it would be extremely useful to have an option to enable the output of that link in error messages.\r\n\r\nSo, for example, using our [Alert Box rule](https://gitlab.com/gitlab-org/gitlab/-/blob/master/doc/.vale/gitlab/AlertBoxStyle.yml):\r\n\r\n```\r\n README.md\r\n 21:1  error  Alert box \" NOTE: **Note:** This alert box is not following standards.\" must use the formatting in the style guide.  gitlab.AlertBoxStyle \r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nWould instead look like:\r\n\r\n```\r\n README.md\r\n 21:1  error  Alert box \" NOTE: **Note:** This alert box is not following standards.\" must use the formatting in the style guide.  gitlab.AlertBoxStyle \r\n Link: https://docs.gitlab.com/ee/development/documentation/styleguide.html#alert-boxes\r\n\r\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nThis could be turned on and off within individual rules, but I think the minimal solution would be to turn it on and off globally in the config file. Something like `OutputStyleLinks = true`?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/260"
   },
   {
    "Title": "Feature Request: Multiple Included or Excluded Scopes",
    "Body": "I'm using Vale on Mac OS, installed via Homebrew, version 2.5.1. I know you already had an issue for multiple scopes (https://github.com/errata-ai/vale/issues/74), which you closed. However, we have an example that I think makes a clear case for this feature.\r\n\r\nWe have the following rule, which is meant to enforce capitalization for our product, component, and team names:\r\n\r\n```\r\nextends: substitution\r\nmessage: \"Use '%s' instead of '%s'.\"\r\nignorecase: false\r\nlevel: error\r\naction:\r\n  name: replace\r\nswap:\r\n  ...\r\n  \"[wW]eb [sS]ource\": Web source\r\n  \"[wW]eb [sS]ources\": Web sources\r\n```\r\nWe explicitly don't want this rule to operate in headings or table headers, because we use title case for them, but we do want it to operate in list items, table cells, and paragraphs/sentences. We could solve this by making three separate rules, one for each scope, but that kind of duplication invites a lot of opportunity for error.\r\n\r\nIt would be great if we could specify multiple scopes to include or exclude. Please let me know if you need more context, or if there's an alternative solution that I'm missing.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/259"
   },
   {
    "Title": "Bug: Inconsistent Asciidoctor linting",
    "Body": "I'm using Vale on Mac OS, installed via Homebrew, version 2.5.1. Here is the same content in Markdown and Asciidoc, side by side. The rule I'm featuring in this example is meant to enforce capitalization for our product, component, and team names (although there's another issue we have with this rule which I've addressed separately [here](https://github.com/errata-ai/vale/issues/259)).\r\n\r\n```\r\nextends: substitution\r\nmessage: \"Use '%s' instead of '%s'.\"\r\nignorecase: false\r\nlevel: error\r\naction:\r\n  name: replace\r\nswap:\r\n  ...\r\n  \"[wW]eb [sS]ource\": Web source\r\n  \"[wW]eb [sS]ources\": Web sources\r\n```\r\n\r\n![Screen Shot 2020-11-01 at 4 18 06 PM](https://user-images.githubusercontent.com/54185735/97815911-842dd880-1c5f-11eb-9a5a-32fc225938a8.png)\r\n\r\nThe Markdown file shows 21 errors, correctly flagging all of the incorrect occurrences, while the identical Asciidoc version only registers 16 of them. I don't really see a link, other than that all of the ignored occurrences are in the form of `Web Source`, although some occurrences of `Web Source` are being caught.\r\n\r\nDo you have any idea what's going on here?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/258"
   },
   {
    "Title": "Is data kept local?",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\nRunning vale CLI version v2.5.1 on Linux Ubuntu 18.04 installed using the binary from Github.\r\n\r\nI've been looking through the documentation and also searched the issues here on Github, but cannot find the answer to the question if anything is being sent from Vale to any servers outside of my environment? I've also monitored outbound traffic but it doesn't look like anything is being sent to any servers. Can you please confirm that my data is kept local?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/257"
   },
   {
    "Title": "v2.5.1 Go installation fails",
    "Body": "Go installation with latest version v2.5.1 doesn't work\r\n\r\n![image](https://user-images.githubusercontent.com/15052188/97349399-57f11100-1887-11eb-9104-760997ac3266.png)\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/256"
   },
   {
    "Title": "Unexpected/incorrect regex matching in ASCIIdoc only",
    "Body": "I have this rule:\r\n\r\n```\r\nextends: existence\r\nmessage: \"'%s': This punctuation should have no space before it, and 1 space after.\"\r\nlevel: error\r\nnonword: true\r\ntokens:\r\n  - '[^,]+ [,:;]'\r\n  - '[,:;]{2,}[A-ÿ]'\r\n  - '[,:;][A-ÿ]'\r\n```\r\n\r\nThe rule is supposed to detect incorrect spacing around punctuation marks. Somehow the third pattern (`[,:;][A-ÿ]`) is matching against this:\r\n\r\n```\r\nKajigger covers these use cases:\r\n\r\n- *Kajigger now*: the more straightforward case when a pirate kajiggers immediately.\r\n```\r\n\r\nVale's feedback:\r\n\r\n```\r\n3:1    error       ':`': This punctuation should   BEnglish.CommaSpacing\r\n                    have no space before it, and 1\r\n                    space after.\r\n```\r\n\r\nThe stray backtick in the quoted part is probably a clue.\r\n\r\nGood to know:\r\n- When I remove the `:` in line 1, there is no longer a match on line 3.\r\n- This only happens in ASCIIdoc. When I change the extension from `.adoc` to `.md`, Vale doesn't flag this line. My `vale.ini` uses the same settings for `.adoc` and `.md`.\r\n\r\nLet me know if you need more info!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/255"
   },
   {
    "Title": "feature: exclude/ignore paths via --glob flag",
    "Body": "Tightly related with https://github.com/errata-ai/vale/issues/243\r\n\r\nSee this min repro: https://github.com/acalvo/vale-glob\r\n\r\nIt has the following structure:\r\n```\r\n- content/\r\n  - a.md\r\n  - b/\r\n    - b.md\r\n  - c.md\r\n```\r\n\r\nIf I run `vale ./content` I get the following result:\r\n\r\n```\r\n content/a.md\r\n 1:1  error  Did you really mean 'Lorem'?  Vale.Spelling \r\n 1:7  error  Did you really mean 'ipsum'?  Vale.Spelling \r\n\r\n\r\n content/b/b.md\r\n 1:11  error  Did you really mean 'amet'?  Vale.Spelling \r\n\r\n\r\n content/c.md\r\n 1:1  error  Did you really mean 'Lorem'?  Vale.Spelling \r\n 1:7  error  Did you really mean 'ipsum'?  Vale.Spelling \r\n\r\n✖ 5 errors, 0 warnings and 0 suggestions in 3 files.\r\n```\r\n\r\nThat's OK. But let's say I need to lint everything inside `content/` except for the `content/b/` subdir (because it is automatically generated content). Taking advantage of the `--glob` flag I'd try running `vale --glob='!content/b/*' ./content`. The result of that is this, though:\r\n\r\n```\r\n content/a.md\r\n 1:1  error  Did you really mean 'Lorem'?  Vale.Spelling \r\n 1:7  error  Did you really mean 'ipsum'?  Vale.Spelling \r\n\r\n✖ 2 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n`a.md` is linted (that's OK), `b/b.md` is not linted (which is also OK!), but... any other files **alphabetically after that** won't be linted (so no output for `c.md`).\r\n\r\nIf we rename `c.md` to `aa.md`, the result will be the expected one:\r\n\r\n```\r\n content/a.md\r\n 1:1  error  Did you really mean 'Lorem'?  Vale.Spelling \r\n 1:7  error  Did you really mean 'ipsum'?  Vale.Spelling \r\n\r\n\r\n content/aa.md\r\n 1:1  error  Did you really mean 'Lorem'?  Vale.Spelling \r\n 1:7  error  Did you really mean 'ipsum'?  Vale.Spelling \r\n\r\n✖ 4 errors, 0 warnings and 0 suggestions in 2 files.\r\n```\r\n\r\nThis looks like a `vale` bug, doesn't it? Or is it a problem with https://github.com/gobwas/glob ? I've been playing around with the lib and seems to return the expected values in this case: https://play.golang.org/p/EBrkS4na90A ...",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/254"
   },
   {
    "Title": "Allow dashes and slashes in capitalization rule exception items",
    "Body": "- First of all, thanks for building Vale!\r\n- In [Homebrew's styles](https://github.com/Homebrew/brew/blob/master/docs/vale-styles/Homebrew/Titles.yml), we have titlecase rule capitalization exceptions for full repo names that appear in our docs: for example, \"Homebrew/homebrew-core\".\r\n- This regexp was changed in 10f7c3381d04d3f3bd9fe0ff34b6167d94baeb1f to match characters other than `-` and `/` etc, which breaks our exclusions.\r\n- If there's a better way to do this, I'll happily take advice!\r\n\r\nBefore:\r\n\r\n```\r\n$ vale docs/\r\n\r\n docs/Homebrew-homebrew-core-Merge-Checklist.md\r\n 1:3  error  'Homebrew/homebrew-core Merge   Homebrew.Titles\r\n             Checklist' should be in title\r\n             case\r\n\r\n docs/Homebrew-linuxbrew-core-Maintainer-Guide.md\r\n 1:3  error  'Homebrew/linuxbrew-core        Homebrew.Titles\r\n             Maintainer Guide' should be in\r\n             title case\r\n\r\n✖ 2 errors, 0 warnings and 0 suggestions in 51 files.\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n$ ./vale --config=/usr/local/Homebrew/.vale.ini /usr/local/Homebrew/docs/\r\n✔ 0 errors, 0 warnings and 0 suggestions in 51 files.\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/253"
   },
   {
    "Title": "Vale CLI Invocation Doesn't Work the Same in 2.4.1+",
    "Body": "I use Vale for OpenAPI descriptions and summaries linting, parsed recursively out of specs. My Python script calls Vale and feeds it text like this: \r\n\r\n```\r\np = subprocess.Popen([\"vale\", \"--no-exit\", \"--ext=.md\", rulesFile, description], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\r\n```\r\nThis stopped working with the 2.4.1 release. It appears that this command line no longer works:\r\n\r\n```\r\n./bin/vale --config=_custom_file.ini --ext='.md' --no-exit \"Decsription to lint\"\r\n```\r\nLooks like the text string to lint may not be getting passed in as a parameter.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/252"
   },
   {
    "Title": "Vale gives no feedback when specified config is missing",
    "Body": "To keep this very brief, when I run:\r\n\r\n```\r\nvale --debug --config=\"nonexistent.ini\" README.md\r\n```\r\n\r\nand there is no `nonexistent.ini`, I expect Vale to either exit or at the very least provide some feedback that the file can't be found and it's falling back to the nearest `vale.ini`.\r\n\r\nThis is causing me problems because I'm creating containerized Vale tests for our internal GitLab instance. I'm providing a custom config which should override any `vale.ini` files already present in the repo. When Vale can't find my custom config in the GitLab runner environment for some reason (still figuring out why this happens in some runners), it silently falls back to the repo-native `vale.ini`, sending me up the garden path when debugging.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/251"
   },
   {
    "Title": "feat: Ignore directories out of the box",
    "Body": "```node_modules``` \u0026 ```.git``` are ignored by default. Since walking on these directories is overload, It will great performance improvement for node applications. We can also add ```vendor``` to this list.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/250"
   },
   {
    "Title": "urls are passed to style checking",
    "Body": "I'm using vale 2.4.0 and in my source code (Golang) I have got this comment line\r\n\r\n```\r\n// @todo https://medium.com/@jcox250/password-hash-salt-using-golang-b041dc94cb72\r\n```\r\n\r\nwith the Google Stylechecker I get an error:\r\n\r\n```\r\nerror  Put a nonbreaking space between the number and the unit in '041d'.  google.Units \r\n```\r\n\r\nIn my opinion URL string should be skipped everytime",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/249"
   },
   {
    "Title": "Locations should not be reported in info strings",
    "Body": "Using Vale v2.4.2 here.\r\n\r\nThis issue needs to have more detail but I may experience something similar with code block and inline code being checked by Vale. Not linked to GitHub action on my side, it also happens locally.\r\n\r\nFor instance I have ` 41:4     error    Did you really mean 'json'?     Vale.Spelling` when the line 41 is the block start of:\r\n````markdown\r\n```json\r\n\"encryptor\":{\r\n    \"type\":\"EC\",\r\n    \"properties\":{\r\n        \"symmetricCipher\":\"AES/GCM/NoPadding\",\r\n        \"ellipticCurve\":\"secp256r1\",\r\n        \"nonceLength\":\"24\",\r\n        \"sharedKeyLength\":\"32\"\r\n    }\r\n}\r\n```\r\n````\r\n\r\nOf course, if I remove the code type on the code block it works for this block, but then fails on the next JSON block. And I require all my blocks to have a code type defined in my Markdown linter to have the correct highlighting, so that's not an option to remove.\r\n\r\nAlso note that `json` is a word that I have as uppercased `JSON` in an acronym rule that is a copy of the MS one (among other acronyms):\r\n\r\n```yaml\r\nextends: conditional\r\nmessage: \"'%s' has no definition.\"\r\nlevel: suggestion\r\nignorecase: true\r\n# Ensures that the existence of 'first' implies the existence of 'second'.\r\nfirst: '\\b([A-Z]{3,5})\\b'\r\nsecond: '(?:\\b[A-Z][a-z]+ )+\\(([A-Z]{3,5})\\)'\r\n# ... with the exception of these:\r\nexceptions:\r\n  ...\r\n  - JSON\r\n  ...\r\n```\r\n\r\nBut this doesn't change anything.\r\n\r\nHowever if I add `JSON` in the `accepted.txt` I have the following error:\r\n`41:1     error    Use 'JSON' instead of 'json'.   Vale.Terms` meaning `Vale.Terms` looks in the code block.\r\n\r\nIf I add `json` in my `accepted.txt` Vocab, then I don't have the issues on code blocks but it's not good as I expect writers to use `JSON` everywhere in the text.\r\n\r\nThis then conflicts with the acronym rule as it says for instance `109:17   error    Use 'json' instead of 'JSON'.   Vale.Terms` and I don't want that, I want the uppercased acronym to be used.\r\n\r\nLet me know if you need more testing from me.\r\n\r\n_Originally posted by @NicolasMassart in https://github.com/errata-ai/vale/issues/244#issuecomment-706098952_",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/248"
   },
   {
    "Title": "File formats / file extensions not working as expected",
    "Body": "New issue for https://github.com/errata-ai/vale/issues/210#issuecomment-705661434\r\n\r\nRunning vale 2.4 :\r\n\r\n```bash\r\n~/BKDocs (vale-accept) $ find . -name '*.erb' | wc\r\n    147     147    5501\r\n\r\n~/BKDocs (vale-accept) $ cat .vale.ini \r\n\r\nStylesPath = vale\r\n\r\nMinAlertLevel = warning\r\n\r\n[formats]\r\nerb = md\r\ntxt = md\r\n\r\n[*.md]\r\n\r\nTokenIgnores = (\u003c%.*%\u003e), (:[a-z]*:), ({:toc})\r\n\r\nBasedOnStyles = Buildkite, Vale.Repetition\r\n\r\n ~/BKDocs (vale-accept) $ vale pages/\r\n✔ 0 errors, 0 warnings and 0 suggestions in 0 files.\r\n\r\n```\r\n\r\nBut if I change `.vale.ini` to use `[*.erb]`:\r\n\r\n```bash\r\n~/BKDocs (vale-accept) $ cat .vale.ini \r\n\r\nStylesPath = vale\r\n\r\nMinAlertLevel = warning\r\n\r\n[formats]\r\nerb = md\r\ntxt = md\r\n\r\n[*.erb]\r\n\r\nTokenIgnores = (\u003c%.*%\u003e), (:[a-z]*:), ({:toc})\r\n\r\nBasedOnStyles = Buildkite, Vale.Repetition\r\n\r\n~/BKDocs (vale-accept) $ vale pages/\r\n✔ 0 errors, 0 warnings and 0 suggestions in 141 files.\r\n~/BKDocs (vale-accept) $ \r\n```\r\n\r\n\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/247"
   },
   {
    "Title": "Capitalisation issue with some existing rules",
    "Body": "Since Vale 2.4.0 I have a strange issue that I'm not even sure is really an issue, or maybe more of a docs clarification (that I can submit a PR for).\r\n\r\nI have some _vale.ini_ files that had a couple of prebuilt `vale` rules, for example:\r\n\r\n```\r\nvale.Annotations = warning\r\nvale.Editorializing = warning\r\nvale.Hedging = suggestion\r\nvale.Litotes = warning\r\nvale.Repetition = error\r\n```\r\n\r\nSine the update these have to be capitalised, and fails to find them if not, so:\r\n\r\n```\r\nVale.Annotations = warning\r\nVale.Editorializing = warning\r\nVale.Hedging = suggestion\r\nVale.Litotes = warning\r\nVale.Repetition = error\r\n```\r\n\r\nI am yet to see if others have the same affect. So let me know if you think this is more of a docs issue, or if it's a regression.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/246"
   },
   {
    "Title": "Question: Writing .vale.ini to work around Hugo translations (article.fr.md)",
    "Body": "We use Hugo and have translated pages living in the same repository as our standard language content. (`article.md`, `article.fr.md`, and so on.)\r\n\r\nMost of our Vale rules are specific to the English content (article.md), but some operate on all files.\r\n\r\nI’ve been using a configuration file like this:\r\n\r\n```\r\n[*.{de,es,fr,it,jp,ru}.md]\r\nBasedOnStyles = \r\nOurStyle.general_rule = YES\r\n\r\n[*.md]\r\nBasedOnStyles = OurStyle\r\n```\r\n\r\nI did it this way to avoid turning off all the rules that don’t apply to the translations. Is this the best way to accomplish this, or is there a better way?\r\n\r\n(Copied from WTD Slack for posterity and visibility.)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/245"
   },
   {
    "Title": "Vale GitHub check should ignore the stuff put in the code block",
    "Body": "Info:\r\nLinux, Status: Downloaded newer image for jdkato/vale:latest, vale version v2.1.0\r\n\r\n\r\nHello, \r\nvale should ignore the stuff put in the code block. In this example, it returns some errors regarding the proper use of the `api` term, but it is always a part of a URL and always inside the code block.\r\n\r\n[1] 85:22   error       Did you really mean 'api'?      Vale.Spelling            \r\n[2] 85:22   error       Use either 'or' or 'and' in     IBM.Slash                \r\n                     'api/user'    \r\n\r\n[1]\r\n[subs=\"+quotes,macros,attributes\"]\r\n----\r\n$ curl -X GET \\\r\n  --header 'Authorization: Bearer __\u003cuser-token\u003e__' \\\r\n  'pass:c,m,a,q[+https:+//__\u003c{prod-host}\u003e__]/api/user/find?email=__\u003cemail\u003e__'\r\n----\r\n\r\n[2]\r\n----\r\n$ curl -X GET \\\r\n  --header 'Authorization: Bearer __\u003cuser-token\u003e__' \\\r\n  'https://che-vp-che.apps.che-dev.x6e0.p1.openshiftapps.com/api/user/find?name=vparfono'\r\n----\r\n\r\n\r\nThank you for your time and for fixing this! Good work, btw!\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/244"
   },
   {
    "Title": "feature: add ignore directory option to cli",
    "Body": "One of spotify's project [backstage](https://github.com/spotify/backstage) recently adopted vale and It's impressive! Thank you for that. However if you visit this [pull request](https://github.com/spotify/backstage/pull/2631), I had to write cross platform verbose script just to ignore ```node_modules```. It would be great if there is an option to ignore directories or ignore few pre known directories by default eg. node_modules, .git. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/243"
   },
   {
    "Title": "How is the new 2.4.1 config file path working?",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\nI updated my CircleCI workflow from Vale 2.4.0 to the new 2.4.1 version. \r\n\r\nI use the following CI steps to install and run Vale in a Docker container:\r\n\r\n```\r\n    steps:\r\n      - checkout\r\n      - run: git submodule sync\r\n      - run: git submodule update --init\r\n      - run:\r\n          name: Install dependencies\r\n          command: |\r\n            curl -sfL https://install.goreleaser.com/github.com/ValeLint/vale.sh | sh -s v2.4.1\r\n      - run:\r\n          name: Run Vale\r\n          command: |\r\n            ./bin/vale --config ./common/build_tools/vale/.vale.ini --glob='*.{md}' . | tee ./vale.out\r\n```\r\n\r\nNow the [config file](https://docs.errata.ai/vale/cli#--config) is not found and I have the following message:\r\n\r\n```\r\nE200 Unable to locate a configuration file.\r\nSee https://docs.errata.ai/vale/config#search-process for more information.\r\n```\r\n\r\nI did not see any info about changing the path style for the config.\r\n\r\nWhen I revert back to 2.4.0 it works again.\r\nThanks for your help!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/242"
   },
   {
    "Title": "Combine Vocabularies",
    "Body": "Is it possible to combine vocabularies? For example, if I am writing about bioinformatics I may want to combine two vocabularies, like so:\r\n\r\n```\r\nVocab = Biology, CS\r\n```\r\n\r\nI guess there can be ambiguities if a word appears in the `accept.txt` of one Vocab and the `reject.txt` of another.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/241"
   },
   {
    "Title": "Hyphen in a rule name breaks in-file directives",
    "Body": "Vale 2.4.0\r\n\r\nWe use hyphens and underscores in rule names to aid in organisation. For example: `words-passive_voice`, `words-do_not_use`, `punctuation-hyphens`.\r\n\r\nIf I try to turn off one of these in a file, using `\u003c!-- vale 1Password.words-do_not_use = NO --\u003e`, the directive isn't parsed successfully. Only tested on Markdown content. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/240"
   },
   {
    "Title": "Vale processes Markdown autolinks as language",
    "Body": "Vale processes [Markdown autolinks](https://daringfireball.net/projects/markdown/syntax#autolink) as text, so a URL can trigger an alert.\r\n\r\nThe link in this text:\r\n\r\n    Visit \u003chttps://example.com/your-data/\u003e to learn more.\r\n\r\n…will be caught by this rule:\r\n\r\n\tlevel      : error\r\n\tmessage    : Use \"%s\" instead of \"%s\".\r\n\r\n\textends: substitution\r\n\tignorecase: true\r\n\r\n\tswap:\r\n\t  data: information\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/239"
   },
   {
    "Title": "[RFC] Improved error handling",
    "Body": "A common theme in our user-research sessions (#220) was that it can be difficult to debug problems with Vale, especially for new users.\r\n\r\nI think there are two primary reasons for this:\r\n\r\n1. Vale doesn't fail explicitly enough. For example, if someone runs Vale on a directory that contains both `.md` and `.rst` files without having `rst2html` installed, Vale will complain about the missing dependency but still show output related to the `.md` files.\r\n\r\n2. Vale's current error messages can be hard to understand. There are a lot of locations that can have user-introduced errors (`.vale.ini`, rule definitions, vocab files) and it's not always clear where you made a mistake.\r\n\r\nThe next release will attempt to turn this weakness into a strength: Vale will now fail explicitly when something is wrong, and we'll now provide detailed error messages.\r\n\r\nHere are a few examples:\r\n\r\n\u003ctable\u003e\r\n    \u003ctr\u003e\r\n        \u003cth\u003emacOS\u003c/th\u003e\r\n        \u003cth\u003eWindows\r\n\u003c/th\u003e\r\n    \u003c/tr\u003e\r\n    \u003ctr\u003e\r\n        \u003ctd width=\"50%\"\u003e\r\n            \u003ca href=\"https://user-images.githubusercontent.com/8785025/94770790-602e5d00-036a-11eb-8ccd-913677670fbd.png\"\u003e\r\n                \u003cimg src=\"https://user-images.githubusercontent.com/8785025/94770790-602e5d00-036a-11eb-8ccd-913677670fbd.png\" width=\"100%\"\u003e\r\n            \u003c/a\u003e\r\n        \u003c/td\u003e\r\n        \u003ctd width=\"50%\"\u003e\r\n            \u003ca href=\"https://user-images.githubusercontent.com/8785025/94771517-3fff9d80-036c-11eb-8ebb-e232a532d9ba.png\"\u003e\r\n                \u003cimg src=\"https://user-images.githubusercontent.com/8785025/94771517-3fff9d80-036c-11eb-8ebb-e232a532d9ba.png\" width=\"100%\"\u003e\r\n            \u003c/a\u003e\r\n        \u003c/td\u003e\r\n    \u003c/tr\u003e\r\n    \u003ctr\u003e\r\n        \u003ctd width=\"50%\"\u003eAn error from a user-created YAML rule.\u003c/td\u003e\r\n        \u003ctd width=\"50%\"\u003eAn error from a \u003ccode\u003e.vale.ini\u003c/code\u003e file.\u003c/td\u003e\r\n    \u003c/tr\u003e\r\n\u003c/table\u003e\r\n\r\nYou'll now receive execution-stopping errors whenever something goes wrong and you'll receive the exact file location where the error occurred, including a syntax-highlighted snippet of the file directly in your console.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/238"
   },
   {
    "Title": "Debug ",
    "Body": "I am trying to develop a style rule that uses the `sequence` extension type.  The rule is not behaving as expected, and wish to see how vale is creating NLP tokens for the text.  Is there a way to turn on logging, for example, to diagnose when a `sequence` rule is not flagging errors that it should find?  \r\n\r\nIn essence, is there a way to see/output of how vale \"tokenizes\" a test document? \r\n\r\nI am:\r\n\r\n* using AsciiDoctor  source files.\r\n* using vale on RHEL/Fedora-based systems.\r\n* currently using vale `2.3.3`\r\n\r\n\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/237"
   },
   {
    "Title": "default MinAlertLevel is not suggestion",
    "Body": "Documentation states in more than one place that the default is\r\n\r\n    MinAlertLevel = suggestion\r\n\r\nAt least in vale version 2.3.4 \r\n\r\n    MinAlertLevel = warning\r\n\r\nSuggestions are not shown unless the command line or the ini file require it. Fix documentation.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/236"
   },
   {
    "Title": "Error when using capitalization style on heading with commas",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\nVale version: 2.4.0\r\n\r\nUsing the following style ...\r\n\r\n```yml\r\nextends: capitalization\r\nmessage: \"'%s' should be in title case.\"\r\nlevel: error\r\nscope: heading\r\nmatch: $title\r\nstyle: Chicago\r\nexceptions:\r\n  - foo\r\n  - bar\r\n  - lorem\r\n  - ipsum\r\n```\r\n\r\n... on this Markdown file ...\r\n\r\n```markdown\r\n# foo, bar, and lorem Are Best Friends\r\n\r\nDummy text.\r\n```\r\n\r\n... results in the following error:\r\n\r\n```\r\npanic: runtime error: index out of range [7] with length 7\r\n\r\ngoroutine 80 [running]:\r\ngithub.com/errata-ai/vale/check.title(0xc0011fe150, 0x22, 0xc000050840, 0x6, 0x6, 0xc000408700, 0xc00006a0f0, 0xc0011a3810)\r\n\t/home/travis/gopath/src/github.com/errata-ai/vale/check/variables.go:39 +0x31c\r\ngithub.com/errata-ai/vale/check.(*Manager).addCapitalizationCheck.func1(0xc0011fe150, 0x22, 0xc000050840, 0x6, 0x6, 0xc000408700, 0xffffffffffffffff)\r\n\t/home/travis/gopath/src/github.com/errata-ai/vale/check/check.go:524 +0x6d\r\ngithub.com/errata-ai/vale/check.checkCapitalization(0xc0011fe150, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/travis/gopath/src/github.com/errata-ai/vale/check/check.go:393 +0x93\r\ngithub.com/errata-ai/vale/check.(*Manager).addCapitalizationCheck.func4(0xc0011fe150, 0x22, 0xc0011ec000, 0x1208b60, 0x0, 0x0)\r\n\t/home/travis/gopath/src/github.com/errata-ai/vale/check/check.go:542 +0xc2\r\ngithub.com/errata-ai/vale/lint.(*Linter).lintText.func1(0xc000026780, 0xc000c0cc80, 0xc0011fe150, 0x22, 0xc0003e68a0, 0x10, 0xc0011ec000, 0x0, 0xc0003e69c0, 0xe, ...)\r\n\t/home/travis/gopath/src/github.com/errata-ai/vale/lint/lint.go:303 +0x6c\r\ncreated by github.com/errata-ai/vale/lint.(*Linter).lintText\r\n\t/home/travis/gopath/src/github.com/errata-ai/vale/lint/lint.go:302 +0x385\r\n```\r\n\r\nIt's probably caused by the comma after \"foo\" and \"bar\". Without the comma, it works fine:\r\n\r\n```markdown\r\n# foo and bar and lorem Are Best Friends\r\n\r\nDummy text.\r\n```\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/235"
   },
   {
    "Title": "Add support for org mode markup",
    "Body": "Uses the [go-org](https://github.com/niklasfasching/go-org/org) library and convert to HTML, just like the markdown implementation.\r\n\r\n![Screenshot from 2020-09-15 21-50-18](https://user-images.githubusercontent.com/15332/93257794-af3a9680-f79d-11ea-982b-7a4272d875c8.png)\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/234"
   },
   {
    "Title": "[RFC] On regular expression lookarounds",
    "Body": "This is one of the most common feature requests / misunderstandings about how Vale's rules work. So, I'd like to take some time to try to get this right\u0026mdash;whether that means changing existing functionality or simply improving the documentation on the topic.\r\n\r\n## Why things are the way they are\r\n\r\nTo provide some background: Vale is written in [Go](https://golang.org/) and uses its stdlib [`regexp`](https://golang.org/pkg/regexp/syntax/) package to evaluate all rules. The implementation is based on Google's [RE2](https://github.com/google/re2) library:\r\n\r\n\u003e RE2 is a fast, safe, thread-friendly alternative to backtracking regular expression engines like those used in PCRE, Perl, and Python. It is a C++ library.\r\n\r\nIf you'd like to learn more about the decisions that went into RE2, the [wiki on `google/re2`](https://github.com/google/re2/wiki/WhyRE2) goes into some detail.\r\n\r\n## A different take, but not a limitation\r\n\r\nThe academics of the issue aside, my stance has always been that I don't want this to be a limitation of Vale; all else equal, I'd rather Vale be a little slower but more capable.\r\n\r\nI've written *a lot* of general-purpose regex (using many languages) and even more Vale-specific regex, and I've yet to find something that seemed impossible or unnecessarily difficult to implement with Vale in comparison to other tools. This leads me to believe that the problem is more related to documentation than implementation.\r\n\r\nThe [documentation](https://docs.errata.ai/vale/styles#extension-points) currently mentions the limitation of *Go* and links to a blog post that goes into detail about how Vale approaches the problem. But it's clear that this could be explained better.\r\n\r\n## Go's stdlib regex engine doesn't support lookarounds, *but Vale does*\r\n\r\nVale supports both *positive* and *negative* lookarounds. It does so by taking advantage of the YAML wrapper around its rules.\r\n\r\n### Positive lookarounds\r\n\r\nThe first variation of lookarounds are the *positive* lookahead and lookbehind assertions:\r\n\r\n- lookahead (`x(?=y)`): \"I want to match `x` only if it *precedes* `y` without matching `y`.\"\r\n- lookbehind (`(?\u003c=y)x`): \"I want to match `x` only if it is *preceded* by `y` without matching `y`.\"\r\n\r\nFor Vale’s purposes, this should be straightforward to implement: \r\n\r\n```yaml\r\nextends: existence\r\nmessage: \"Consider removing 'dialog'.\"\r\nlevel: warning\r\nignorecase: true\r\ntokens:\r\n  - 'dialog (?:box)'\r\n```\r\n\r\nThe basic idea here is that you don't have show the end-user every thing that the rule matched; you can use the `message` to gain control over what you show.\r\n\r\n### Negative lookarounds\r\n\r\nThe second variation of lookarounds are the *negative* lookahead and lookbehind assertions:\r\n\r\n- lookahead (`x(?!y)`): \"I want to match `x` only if it does *not precede* `y`.”\r\n- lookbehind (`(?\u003c!y)x`): \"I want to match `x` only if it is *not preceded* by `y`*.*\"\r\n\r\nFor Vale’s purposes, these cases can be emulated using `substitution` checks:\r\n\r\n```yaml\r\nextends: substitution\r\nmessage: \"Use '%s' instead of '%s'\"\r\nlevel: error\r\nignorecase: false\r\nswap:\r\n  '(?:[^\\s]*) ?VS Code': Microsoft VS Code\r\n```\r\n\r\nThis rule will flag any instance of \"VS Code\" that isn't preceded by \"Microsoft\"; it's functionally equivalent to `(?\u003c!Micrsoft )VS Code`. The key takeaway is that you can write patterns that *include* the accepted case since Vale will only raise alerts for those that don't match it.\r\n\r\nSo, instead of looking for `(?\u003c!Micrsoft )` (anything that isn't 'Microsoft'), you can look for *anything* and Vale will compare it to the user-provided accepted case.\r\n\r\n## Feedback\r\n\r\nI know I haven't written rules that cover every possible use case, so I'd be quite interested in seeing examples of rules you either can't implement or find hard to implement without using raw lookarounds.\r\n\r\n@ravlen: I know this specifically came up in your research session. Do you have any thoughts on the existing support or hard-to-implement examples you could share?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/233"
   },
   {
    "Title": "Include severity in `--output line`",
    "Body": "The line output is great because it's easy to parse, but you lose the message severity which makes it considerably less useful. \r\n\r\nThe only way I can see around it is to add the severity to the filename for the rule. It's clunky, and would only work for first-party rules without trouble.\r\n\r\nRight now I'm working with BBEdit's `bbresults` tool, but we'll use similar techniques when we deploy this in our CI/CD environment.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/232"
   },
   {
    "Title": "MD formatting is ignored when used inside HTML tags",
    "Body": "If md file contains HTML tag with md link inside, vale parse links and produce errors\r\n\r\ne.g.: \r\n```\r\n\u003cp\u003eThe quick brown [fox](https://fox.com) jumps over the lazy dog\u003c/p\u003e\r\n```\r\nresults with \r\n```\r\n 1:26  error  Did you really mean 'https'?  Vale.Spelling \r\n```\r\n\r\n- OS: Linux\r\n- Install method: direct download\r\n- vale version 2.3.4\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/231"
   },
   {
    "Title": "Implement detection for reserved IP Addressess",
    "Body": "Hi,\r\n\r\ni write much on the docs for the VyOS Software router project and want to implement the wrong usage of IP Addresses.\r\nThere are some reserved Address space which represent public IP Addresses, but these are only for documentation purpose . ([see here](https://docs.vyos.io/en/latest/contributing/documentation.html#address-space))\r\n\r\ni try to build this with the _existence_ style and raw regex with no success.\r\nDid you have any tips? Or is there a way for hook into vale with a plugin or something?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/230"
   },
   {
    "Title": "False positives, and varying output on multiple runs with no changes",
    "Body": "The last version I was running was 2.2.2, on MacOS Mohave.\r\n\r\nI just updated to 2.3.2 and now see some anomalies. My coworker just tested on 2.3.0 and sees the same issues, so it seems like it was introduced with that release.\r\n\r\nI've rerun all our tests including the warning and suggestion level tests, and they report a different number of issues each time.\r\n\r\nTwo examples (but not limited to these two tests). \r\n\r\n### Example 1\r\n\r\nThe repetition test is finding doubled words where none exist. It might be finding the same word on a line above or below the reported problem, and thinking it's adjacent somehow, or getting confused by table formatting:\r\n\r\nStyle:\r\n\r\n```yaml\r\nextends: repetition\r\nmessage: '\"%s\" is repeated.'\r\nlevel: error\r\nalpha: true\r\ntokens:\r\n  - '[^\\s]+'\r\n```\r\n\r\nOutput (CLI). Note that rerunning will give a different number of results each time:\r\n\r\n```\r\n api/protected_branches.md\r\n 312:1  error  \"in\" is repeated.  gitlab.Repetition\r\n\r\n user/clusters/applications.md\r\n 1340:1  error  \"the\" is repeated.  gitlab.Repetition \r\n```\r\n\r\n- `api/protected_branches.md`: https://gitlab.com/gitlab-org/gitlab/-/blob/master/doc/api/protected_branches.md#L312\r\n- `user/clusters/applications.md`: https://gitlab.com/gitlab-org/gitlab/-/blob/master/doc/user/clusters/applications.md#L1340\r\n\r\n### Example 2\r\n\r\nStyle:\r\n\r\nLook for two sentences missing the space between them (like: `These two sentences.Are missing the space`)\r\n\r\n```yaml\r\nextends: existence\r\nmessage: '\"%s\" must contain one and only one space.'\r\nlevel: error\r\nnonword: true\r\ntokens:\r\n  - '[a-z][.?!,][A-Z]'\r\n```\r\n\r\nOutput (CLI). Note that rerunning will give a different number of results each time:\r\n\r\n```\r\n install/aws/index.md\r\n 245:1   error  \"s.A\" must contain one and      gitlab.SentenceSpacing \r\n                only one space.                                        \r\n 349:1   error  \"s.F\" must contain one and      gitlab.SentenceSpacing \r\n                only one space.                                        \r\n 446:5   error  \"r.A\" must contain one and      gitlab.SentenceSpacing \r\n                only one space.                                        \r\n 454:9   error  \"e.A\" must contain one and      gitlab.SentenceSpacing \r\n                only one space.                                        \r\n 644:3   error  \"p.G\" must contain one and      gitlab.SentenceSpacing \r\n                only one space.                                        \r\n 644:9   error  \"p.S\" must contain one and      gitlab.SentenceSpacing \r\n                only one space.                                        \r\n 755:13  error  \"s.U\" must contain one and      gitlab.SentenceSpacing \r\n                only one space.\r\n```\r\n\r\nThese seem to be almost all in markdown lists, but often reporting the wrong line, or the plugin is reporting a line different than the CLI. Every time I save, different lines are flagged:\r\n\r\n\u003cimg width=\"1419\" alt=\"Screen Shot 2020-08-17 at 12 25 29\" src=\"https://user-images.githubusercontent.com/36979740/90354610-c5611400-e084-11ea-8dc5-d3e13d765e12.png\"\u003e\r\n\r\ninstall/awe/index.md: https://gitlab.com/gitlab-org/gitlab/-/blob/master/doc/install/aws/index.md#L446",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/229"
   },
   {
    "Title": "Vocab not working as expected; perhaps not at all?",
    "Body": "Affected: Vale 2.3.2 on Mac OS and Linux\r\n\r\nI’m testing the vocabulary feature using [vale-boilerplate](https://github.com/errata-ai/vale-boilerplate) as a starting point. I added a Vocab line to the config and then added a term to the accept (extremely) and reject (basic) lists.\r\n\r\nWhen I run `vale README.md`, the output is:\r\n\r\n\t README.md\r\n\t 13:20   warning  'extremely' is a weasel word!  write-good.Weasel\r\n\t 15:120  warning  'However' is too wordy.        write-good.TooWordy\r\n\t 27:6    warning  'is' is repeated!              write-good.Illusions\r\n\r\n\t✖ 0 errors, 3 warnings and 0 suggestions in 1 file.\r\n\r\nI expected to see an error for ‘basic’ and to not see the warning for ‘extremely’.\r\n\r\nI’m not sure if I’m misunderstanding how the feature works (I’m entirely new to Vale), or if it’s malfunctioning.\r\n\r\nThe diff:\r\n\r\n\tdiff --git a/.vale.ini b/.vale.ini\r\n\tindex e0e8980..d278cd9 100644\r\n\t--- a/.vale.ini\r\n\t+++ b/.vale.ini\r\n\t@@ -1,4 +1,5 @@\r\n\t StylesPath = styles\r\n\t+Vocab = blog\r\n\r\n\t [*.md]\r\n\t BasedOnStyles = write-good\r\n\tdiff --git a/styles/Vocab/Blog/accept.txt b/styles/Vocab/Blog/accept.txt\r\n\tindex e69de29..03c0370 100644\r\n\t--- a/styles/Vocab/Blog/accept.txt\r\n\t+++ b/styles/Vocab/Blog/accept.txt\r\n\t@@ -0,0 +1 @@\r\n\t+extremely\r\n\tdiff --git a/styles/Vocab/Blog/reject.txt b/styles/Vocab/Blog/reject.txt\r\n\tindex e69de29..15a13db 100644\r\n\t--- a/styles/Vocab/Blog/reject.txt\r\n\t+++ b/styles/Vocab/Blog/reject.txt\r\n\t@@ -0,0 +1 @@\r\n\t+basic",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/227"
   },
   {
    "Title": "`sequence` not working as expected when trying to check extraneous `'s`",
    "Body": "# System\r\n- OS: MacOS Catalina 10.15.5\r\n- Install method: Homebrew for CLI + Atom Package Manager for plugin\r\n- Vale version: 2.3.1\r\n\r\n# Description\r\n\r\nThe new `sequence` extension doesn't work as expected for me. I want to create a rule to catch misuse of `'s` to denote plurality, e.g.:\r\n\r\n```\r\nThe endpoint's are available.    # Bad!\r\n\r\nThe API's endpoints are available.    # Okay!\r\n\r\nThe endpoint's unavailable today.    # Okay!\r\n```\r\n\r\nI started from this example:\r\n\r\n```\r\nextends: sequence\r\nmessage: Did you mean \"%[1]ss\" instead of \"%[1]s's\"?\r\ntokens:\r\n  - tag: NN\r\n  - pattern: \"'s\"\r\n  - pattern: \"are\"\r\naction:\r\n  name: edit\r\n  params:\r\n    - replace\r\n    - \"'\"\r\n    - \"\"\r\n```\r\n(See also [WTD Slack thread](https://writethedocs.slack.com/archives/CBWQQ5E57/p1597257353019400?thread_ts=1597226397.006700\u0026cid=CBWQQ5E57).)\r\n\r\nThis version of the rule never triggered for me, even with a very basic test pattern, potentially due to how my specific environment handles quotes in the `message` string:\r\n```\r\nmessage: Did you mean \"%[1]ss\" instead of \"%[1]s's\"?    # Never triggers\r\nmessage: \"Did you mean %[1]ss instead of %[1]s's?\"    # At least triggers with basic test pattern\r\n```\r\nThis may be an unrelated issue but I'm pointing it out for completeness' sake.\r\n\r\nAfter fixing the `message`, I still couldn't get the pattern to work. I experimented with a lot of different test patterns:\r\n\r\n```\r\n1.\r\ntokens:\r\n  - tag: NN\r\n  - pattern: \"test1\"\r\n  - pattern: \"test2\"\r\n\r\n# Successfully triggers on \"endpoints test1 test2\"\r\n\r\n2.\r\ntokens: \r\n  - tag: NN\r\n  - pattern: \"test1\"\r\n  - pattern: \"are\"\r\n\r\n# Successfully triggers on \"endpoints test1 are\"\r\n\r\n3.\r\ntokens:\r\n  - tag: NN\r\n  - pattern: \"'s\"\r\n  - pattern: \"test2\"\r\n\r\n# Doesn't trigger on \"endpoint's test2\" or \"endpoint 's test2\"\r\n\r\n4.\r\ntokens:\r\n  - pattern: \"endpoint\"\r\n  - pattern: \"'s\"\r\n  - pattern: \"are\"\r\n\r\n# Doesn't trigger on \"endpoint's are\" or \"endpoint 's are\"\r\n\r\n5.\r\ntokens:\r\n  - tag: NN\r\n  - pattern: \"a\"\r\n  - pattern: \"are\"\r\n\r\n# Doesn't trigger on \"endpoints a are\" (!)\r\n\r\n6.\r\ntokens:\r\n  - tag: NN\r\n  - pattern: \"1\"\r\n  - pattern: are\"\r\n\r\n# Successfully triggers on \"endpoints 1 are\"\r\n```\r\nThis isn't everything I tried but I hope it paints a pretty detailed picture. The most remarkable part to me is that a single-letter pattern doesn't work, but a single-number pattern does. I also tried a single `'` to no effect. \r\n\r\nAny suggestions? Let me know if more info is needed. Also can do a quick video call if it helps.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/226"
   },
   {
    "Title": "Automate Homebrew releases",
    "Body": "Could we add this to the repo?\r\n\r\nhttps://github.com/mislav/bump-homebrew-formula-action\r\n\r\nI also don't mind setting up a \"packaging repo\" to trigger many of these processes, if that's possible and you'd rather keep things separated.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/225"
   },
   {
    "Title": "How do I update the docs sidebar?",
    "Body": "Someone pointed out that the link to the vale styles in the test the docs repo is misleading as it leads to a repo that has now largely changed. However, I can't see how to change that. Any ideas?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/224"
   },
   {
    "Title": "style: suggest non-oppressive terminology",
    "Body": "I'm a new user to Vale and appreciate, for example, your suggestions for inclusive language. As a result, when I saw `whitelist` and `blacklist` when running `vale ls-config, I was surprised. I'm not sure what all you'll need to do from the backend to make this shift, but consider using something like `allowlist/blocklist` or `permit/block` instead.\r\n\r\nHere's a good resource: https://tools.ietf.org/id/draft-knodel-terminology-00.html#rfc.section.1.2\r\n\r\nHave a great day!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/221"
   },
   {
    "Title": "Call for user research sessions",
    "Body": "Thanks for using Vale! The project is overhauling its documentation to suit common use cases people have with the CLI and server version and we're interested in knowing how you currently use either/both tools.\r\n\r\nI am looking for people to undertake user research video calls to find out more about how people use Vale CLI and server to help us update the documentation to be most useful to people moving forward.\r\n\r\nIf you're interested, please sign up for a session here - https://bit.ly/2CKp7Ur\r\n\r\nI will record calls, but if you're not OK with that, you can let me know in the form to sign up for a session.\r\n\r\nIn these calls, I'd love to hear how you use the tools, the sorts of configuration you use, and how, and what you are using Vale for.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/220"
   },
   {
    "Title": "linter error on go code line",
    "Body": "I have got the following go function\r\n\r\n```golang\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/northwesternmutual/grammes\"\r\n\t\"github.com/stretchr/testify/assert\"\r\n\t\"testing\"\r\n\t\"time\"\r\n)\r\n\r\nfunc connect(t *testing.T) *grammes.Client {\r\n\tclient, err := grammes.DialWithWebSocket(\"ws://localhost:8182\", grammes.WithAuthUserPass(\"root\", \"root\"), grammes.WithTimeout(time.Second))\r\n\tassert.NoError(t, err)\r\n\treturn client\r\n}\r\n```\r\n\r\nand I get the following linter error (with the current pre-release version) for the first function line with Google Style `client, err := grammes.DialWithWebSocket(\"ws://localhost:8182\", grammes.WithAuthUserPass(\"root\", \"root\"), grammes.WithTimeout(time.Second))`:\r\n\r\n```\r\n 13:73   error  '.W' should have one space.                    google.Spacing \r\n 13:91   error  Commas and periods go inside quotation marks.  google.Quotes  \r\n 13:115  error  '.W' should have one space.                    google.Spacing \r\n 13:132  error  '.S' should have one space.                    google.Spacing\r\n```\r\n\r\nI assume that code lines are skipped.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/219"
   },
   {
    "Title": "force CI to have an exit code if any of error, warning or suggestion are not 0",
    "Body": "In my `.vale.ini` I have `MinAlertLevel = suggestion` which is great for running it locally. However, when running it on travis-ci, I actually want my code to fail if `vale` returns anything. I misunderstood the `MinAlertLevel` flag and thought it would exit without `0` if `suggestion` etc was found.\r\n\r\nMy `.travis.yml` looks like\r\n```\r\njobs:\r\n  include:\r\n    - name: vale\r\n      install:\r\n        - curl -sfL https://install.goreleaser.com/github.com/ValeLint/vale.sh | sh -s latest\r\n      script:\r\n        - ./bin/vale .\r\n```\r\n\r\nIs there a way of doing it other than manually checking that the output is `0 errors, 0 warnings and 0 suggestions in X files.`?\r\n\r\nI was hoping that this would fail the CI.\r\n![image](https://user-images.githubusercontent.com/15052188/86494473-2e0e5e80-bd6d-11ea-81f9-b3cf2214b383.png)\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/218"
   },
   {
    "Title": "Vale does not ignore code blocks in markdown",
    "Body": "Hi!\r\n\r\nLooks like Vale does not ignore code blocks. Even with the `code: false` string in a style:\r\n\r\n![image](https://user-images.githubusercontent.com/20209898/85126626-86eeda80-b236-11ea-99a8-06d0dec1eee7.png)\r\n\r\nVale version: 2.2.2",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/217"
   },
   {
    "Title": "Spellcheck commit messages in the Pull Request.",
    "Body": "Hi, thank you for an awesome tool!\r\n\r\nI tend to use @semantic-release in the open-source libraries I develop my self.\r\n\r\nUsing this approach the changelog file will be generated from the commit messages we wrote.\r\n\r\nI already check that commits have a correct structure using this command:\r\n\r\n```\r\nnpx commitlint --from master\r\n```\r\n\r\nIt would be useful if I could somehow spellcheck commit messages.\r\n\r\nIs it possible to do it somehow?\r\n\r\nAny suggestions are welcome.\r\n\r\nHave a wonderful day :tada:\r\n\r\nBest regards,\r\nArtem.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/216"
   },
   {
    "Title": "Silence duplicates?",
    "Body": "Not an issue, but more of an enhancement request. Would it be reasonable to include a new key for style definitions that indicates that it should only be displayed once in the output?\r\n\r\n```\r\nextends: existence\r\nmessage: \"[CROSSLINK: %s] Have you looked for a relevant link?\"\r\nignorecase: true\r\nlevel: suggestion\r\nonlyonce: true\r\ntokens:\r\n  - MQTT\r\n  - Home Assistant\r\n  - ESP8266\r\n  - DMA-BUF\r\n```\r\n\r\nThe use-case is creating a style rule to hint that cross-linking against other content might be useful in the text based on the existence of keywords. I.e. if the content talks about MQTT, it would be valuable to suggest they cross-link to another article on MQTT as well. This works okay, the issue of course being every time the content talks about MQTT it repeats the message unnecessarily.\r\n\r\nThis is something I would be potentially willing to take a stab at implementing myself if it's otherwise reasonable and/or I can grok the source well enough to do so.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/215"
   },
   {
    "Title": "Passing content through stdin doesn't seem to work",
    "Body": "Hello,\r\n\r\nI'm trying to run vale from the command line on Windows 10 and pass text via stdin. \r\n\r\nRunning vale against a file `vale --config=\"D:\\tools\\tmp\\vale\\.vale.ini\" sample.md` gets me a correct warning:\r\n\r\n```\r\nsample.md\r\n 1:1  warning  Use the Oxford comma in a list  base.OxfordComa\r\n               of three or more items...\r\n```\r\n\r\nBut when I try this: `vale --config=\"D:\\tools\\tmp\\vale\\.vale.ini\" --ext='.md' 'A,B and C'` I get no warning whatsoever. \r\n\r\n- OS: Windows 10\r\n- Install method:  direct download\r\n- Vale version: 2.2.2 \r\n\r\nI apologize if it's something obvious that escapes me...\r\n\r\nThank you,\r\nAlex  ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/214"
   },
   {
    "Title": "A new (better) way to handle exceptions",
    "Body": "## The Problem\r\n\r\nA number of Vale's checks support specifying a list of tokens or patterns that shouldn't raise an alert (`capitalization`, `spelling`, `conditional`, etc.)\r\n\r\nHowever, currently, there's no way to specify these independent of a style. This means that, for example, if an organization wants to use the `Microsoft` style as a starting point for their own style guide, they have two options for handling exceptions:\r\n\r\n1. Modify the third-party style directly (e.g., `Microsoft`); or\r\n2. Disable certain third-party rules and re-implement them in their own style.\r\n\r\n(1) Makes it difficult to keep up with upstream releases and (2) can get repetitive quick.\r\n\r\n## The Solution\r\n\r\nI've been working on an undocumented feature over the past few releases that I'm calling \"vocabularies.\" This has been around in Vale Server (in some form) for a while, but I'd like to ensure that styles are 100% compatible between the two projects.\r\n\r\nThe idea is pretty simple: the following directory structure is added to the `StylesPath`:\r\n\r\n```\r\nVocab\r\n└── \u003cSome-Name\u003e\r\n    ├── accept.txt\r\n    └── reject.txt\r\n```\r\n\r\nwhere `accept.txt` and `reject.txt` are plain-text files that take one entry per line (similar to how `ignore` files work now, but both would be case-sensitive):\r\n\r\n- All entries in `accept.txt` are automatically added to a case-insensitive substitution rule (Vocab.Terms), ensuring that any occurrences of these words or phrases exactly match their corresponding entry in `accept.txt`. Each term is automatically added to every exception list in all inherited styles—meaning that you now only need to update your project’s vocabulary to customize third-party styles.\r\n\r\n- Entries in `reject.txt` are automatically added to an existence rule (Vocab.Avoid) that will flag all occurrences as errors.\r\n\r\nThis would be used like so:\r\n\r\n```ini\r\nStylesPath = \"...\"\r\n\r\n# Here's were we define the exceptions to use in *all*\r\n# `BasedOnStyles`.\r\nVocab = Some-Name\r\n\r\nMinAlertLevel = suggestion\r\n\r\n[*]\r\n# Automatically respects all custom exceptions\r\nBasedOnStyles = Microsoft\r\n```\r\n\r\nThis means that your exceptions can be developed independent of a style, allowing you to use the same exceptions with multiple styles or switch styles without having to re-implement them.\r\n\r\nThoughts or suggestions?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/213"
   },
   {
    "Title": "Add feature for downloading styles through vale.",
    "Body": "The ability to download and update styles using vale would make the setup process much quicker and easier. It also would make the process more consistent across different operating systems. The desire behavior would look something like this:\r\n\r\n`vale ls-styles`\r\n```\r\nGoogle - the Google Developer Documentation Style Guide\r\nJoblint - test tech job posts for issues with sexism, culture, expectations, etc\r\nMicrosoft - the Microsoft Writing Style Guide\r\nproselint - suggestions from the world’s greatest writers and editors\r\nwrite-good - naive linter for English prose for developers who can't write good\r\nCockroachDB - the CockroachDB style guide\r\n```\r\n\r\nThen you could install one to the styles path like this:\r\n`vale install write-good`\r\n\r\nAnd you could update the styles you've installed with something like this:\r\n`vale update`",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/212"
   },
   {
    "Title": "Follow the XDG standard on Unix",
    "Body": "For macOS and Linux please follow the the [XDG Directory Spec](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html). This would mean that `vale` would look for its global config at $XDG_CONFIG_HOME/vale/vale.ini. And if that environment variable isn't set, it would default to $HOME/.config/vale/vale.ini. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/211"
   },
   {
    "Title": "Markdown in ERB files",
    "Body": "I'm trying to lint a combination of markdown and ERB templating, but I'm finding the ignore syntax isn't working.\r\n\r\nI'm trying to exclude syntax like \r\n\r\n```\r\n\u003c%= image_tag \"#{ENV[\"BADGE_DOMAIN\"]}/sample.svg?status=unknown\" %\u003e\r\n\r\nand \r\n\u003c% for theme in [\"slack\", \"github\", \"saturn\", \"flickr\", \"solarized\", \"mono\"] %\u003e\r\n\r\n```\r\n\r\nThe following config works for the markdown just fine, but doesn't exclude the ERB syntax.\r\n\r\n```\r\n[formats]\r\nerb = md\r\ntxt = md\r\n\r\n[*.erb]\r\nTokenIgnores = (\u003c%.*%\u003e), \\\r\n                          (\u003c%=.*?%\u003e)\r\n\r\n[*]\r\nVale.Spelling = error\r\n```\r\n\r\nand the same regex in BlockIgnores also doesn't work.\r\n\r\nThanks",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/210"
   },
   {
    "Title": "error on pylint with disabling value",
    "Body": "I'm using in a python script [pylint](https://www.pylint.org/) and I must add a disable call for pylint\r\n\r\n```python\r\nlogger = sc._jvm.org.apache.log4j  # pylint: disable=protected-access\r\n```\r\nI cannot use the [ignore pattern](https://errata-ai.github.io/vale/config/#ignoring-parts-of-your-documents) because pylint needs this strict format of the comment. So can the ignore pattern be extended for something like\r\n\r\n```python\r\n# value: off\r\nlogger = sc._jvm.org.apache.log4j  # pylint: disable=protected-access\r\n# vale: on\r\n```\r\n\r\nThanks\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/209"
   },
   {
    "Title": "Activating Open Collective",
    "Body": "Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/vale ❤️\n\n  What it does:\n  - adds a badge to show the latest number of financial contributors\n  - adds a banner displaying contributors to the project on GitHub\n  - adds a banner displaying all individuals contributing financially on Open Collective\n  - adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website\n\nP.S: As with any pull request, feel free to comment or suggest changes.\n\n  Thank you for your great contribution to the Open Source community. You are awesome! 🙌\n  And welcome to the Open Collective community! 😊\n\n  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!\n  ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/208"
   },
   {
    "Title": "Ellipsis on Antora generated HTML",
    "Body": "Perhaps I'm doing something wrong here, I'd like to simply check for ellipsis and Vale doesn't seem to be picking it up. Using Antora to generate adocs to HTML via it's built-in generator. Vale is working on outputted HTML.\r\n\r\n- Run as docker\r\n- Vale version 2.2.0\r\n\r\n```\r\nextends: existence\r\nmessage: \"In general, don't use an ellipsis.\"\r\nlink: 'https://developers.google.com/style/ellipses'\r\nnonword: true\r\nlevel: error\r\ntokens:\r\n  - '\\.\\.\\.'\r\n```\r\n\r\n```\r\n# This goes in a file named either `.vale.ini` or `_vale.ini`.\r\n\r\nStylesPath = build/vale/styles\r\nMinAlertLevel = warning\r\n\r\n# Only HTML files; change to whatever you're using.\r\n[*.{html}]\r\n\r\n# List of styles to load.\r\n# BasedOnStyles = proselint, write-good, Joblint, Default\r\nBasedOnStyles = Default\r\n```\r\n\r\nGenerated HTML seems to be the culprit, how would I solve this?\r\n```\r\n\u003cdiv class=\"paragraph\"\u003e\r\n\u003cp\u003eThis sentence has \u0026#8230;\u0026#8203;\u003c/p\u003e\r\n\u003c/div\u003e\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/207"
   },
   {
    "Title": "Apostrophe in  substitution key not having effect",
    "Body": "Perhaps I'm doing something wrong here, I'd like to simply check for contractions and Vale doesn't seem to be picking it up. Using Antora to generate adocs to HTML via it's built-in generator. Vale is working on outputted HTML.\r\n\r\n- Run as docker\r\n- Vale version 2.2.0\r\n\r\n```\r\nextends: substitution\r\nmessage: Use '%s' instead of '%s'\r\nlevel: error\r\nignorecase: true\r\nnonword: true\r\nswap:\r\n  aren't: are not\r\n```\r\n\r\n```\r\n# This goes in a file named either `.vale.ini` or `_vale.ini`.\r\n\r\nStylesPath = build/vale/styles\r\nMinAlertLevel = warning\r\n\r\n# Only HTML files; change to whatever you're using.\r\n[*.{html}]\r\n\r\n# List of styles to load.\r\n# BasedOnStyles = proselint, write-good, Joblint, Default\r\nBasedOnStyles = Default\r\n```\r\n\r\nGenerated HTML seems to be the culprit, how would I solve this?\r\n```\r\n\u003cdiv class=\"paragraph\"\u003e\r\n\u003cp\u003eThis sentence has aren\u0026#8217;t in it.\u003c/p\u003e\r\n\u003c/div\u003e\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/206"
   },
   {
    "Title": "\"brew tap ValeLint/vale\" command shows \"Repository not found\" error",
    "Body": "- OS = macOS \r\nGetting the following error:\r\nmy_home_directory ~ % brew tap ValeLint/vale\r\n==\u003e Tapping valelint/vale\r\nCloning into '/usr/local/Homebrew/Library/Taps/valelint/homebrew-vale'...\r\nUsername for 'https://github.com': gitusername\r\nPassword for 'https://gitusername@github.com': \r\nremote: Repository not found.\r\nfatal: repository 'https://github.com/ValeLint/homebrew-vale/' not found\r\nError: Failure while executing; `git clone https://github.com/ValeLint/homebrew-vale /usr/local/Homebrew/Library/Taps/valelint/homebrew-vale` exited with 128.\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/205"
   },
   {
    "Title": "ignoring autogenerated files",
    "Body": "I just run vale unter my CI pipeline (with the vale docker container). I'm using Google, Proelint \u0026 Write-Good styles. Im working with Markdown, Python, Java, JavaScript \u0026 Go. \r\nMy current test project is just working well, but I have got a problem to ignore specific files, which are autogenerated by other tools e.g. in Python for versioning [Versioneer](https://github.com/warner/python-versioneer).\r\n\r\nA short information about that tool Versioneer. On a Python project I create a file for generating package versions. Versioneer generates a versioneer.py file (autogenerated) with a lot of code and documentation inside and I must add this file to my project for compiling.\r\nIn my vale.ini file I just using this configuration:\r\n```\r\nStylesPath = .\r\nMinAlertLevel = warning\r\n\r\n[*.{go,py,java,js,jsx}]\r\nBasedOnStyles = proselint, write-good, google\r\n\r\n[README.md]\r\nBasedOnStyles = proselint, write-good, google\r\n```\r\nand you see that all Python files are scanned *.py but in my case the autogenerated versioneer file has got also the extension *.py. The suggestion to use a shell script for that problem to filter the files, is very hard, because I need to figure out on which project which file are stored in which directory and which files must be skipped, so I need a project dependend configuration for vale, and cannot a global independed configuration for all my projects.\r\n\r\nImho it would be nice, if I can configure it like a gitignore file inside the vale.ini file. An ignore list of file and directory patterns e.g.\r\n```\r\nignore = codestyle/, versioneer.py\r\n```\r\nso this ignores any file and any subdirectory in any directory which is named \"codestyle\" and ignores any \"versioneer.py\" file in any directory.\r\nThanks\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/204"
   },
   {
    "Title": "Cannot get latest version: module contains a go.mod file, so module path should be github.com/errata-ai/vale/v2",
    "Body": "## Background\r\nThe github.com/errata-ai/vale uses [Go modules](https://github.com/golang/go/wiki/Modules) and the current release stream version is **v2**. It must comply with the specification of \"Releasing Modules for v2 or higher\" available in the Modules documentation and enforced since the most recent versions of Go. Quoting the specification:\r\n\u003e A package that has opted in to modules _must_ include the major version in the import path to import any v2+ modules\r\n\u003e To preserve import compatibility, the go command requires that modules with major version v2 or later use a module path with that major version as the final element. For example, version v2.0.0 of _example.com/m_ must instead use module path _example.com/m/v2_.\r\nhttps://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher\r\n\r\n\r\nUsing `go get` (under go1.13 and go1.14) does not work for github.com/errata-ai/vale@v2+.\r\nI consider this a pretty **high severity** issue since not doing so **prevents any other Go project also using Go Modules** to properly require ` errata-ai/vale ` on versions v2+ as a dependency, resulting in errors like:\r\n```\r\ninvalid version: module contains a go.mod file, so major version must be compatible: should be v0 or v1, not v2\r\n```\r\n\r\nSO anyone using Go modules will not be able to easily use any newer version of errata-ai/vale\r\n\r\n## Steps to Reproduce\r\n1. Under a project making use of Go modules, run `go get` targeting any version \u003e= v2.0.0 of the errata-ai/vale:\r\n\r\n```\r\n$ go get github.com/errata-ai/vale@v2.2.0\r\ngo: finding github.com/errata-ai/vale v2.2.0\r\ngo: finding github.com/errata-ai/vale v2.2.0\r\ngo get github.com/errata-ai/vale@v2.2.0: github.com/errata-ai/vale@v2.2.0: invalid version: module contains a go.mod file, so major version must be compatible: should be v0 or v1, not v2\r\n```\r\n\r\n## Solution\r\n### 1.  Kill the go.mod files.\r\nThis would push them back to not being managed by Go modules (instead of incorrectly using Go modules). Importing specific versions would work, but they'd receive the `+incompatible` prefix and would need to be manually upgraded.\r\n\r\nProbably best option short-term -- better to not use Go modules than use it incorrectly.\r\nAlso, best option for older branches/versions that aren't maintained.\r\n\r\n### 2.  Make breaking changes\r\nPatch the `go.mod` file to declare the `module` as `github.com/errata-ai/vale/v2` as [per the specs](https://github.com/golang/go/wiki/Modules#semantic-import-versioning). AND adjust all internal imports.\r\n\r\nThere are two alternative mechanisms to release a v2 or higher module. Note that with both techniques, the new module release becomes available to consumers when the module author pushes `the new tags`. Using the example of creating a v3.0.0 release, the two options are:\r\n\u003eMajor branch: Update the go.mod file to include a /v3 at the end of the module path in the module directive (e.g., module github.com/my/module/v3). Update import statements within the module to also use /v3 (e.g., import \"github.com/my/module/v3/mypkg\"). Tag the release with v3.0.0.\r\n- Go versions 1.9.7+, 1.10.3+, and 1.11 are able to properly consume and build a v2+ module created using this approach without requiring updates to consumer code that has not yet opted in to modules (as described in the \"Semantic Import Versioning\" section above).\r\n- A community tool github.com/marwan-at-work/mod helps automate this procedure. See the repository or the community tooling FAQ below for an overview.\r\n- To avoid confusion with this approach, consider putting the v3.*.* commits for the module on a separate v3 branch.\r\n- Note: creating a new branch is not required. If instead you have been previously releasing on master and would prefer to tag v3.0.0 on master, that is a viable option. (However, be aware that introducing an incompatible API change in master can cause issues for non-modules users who issue a go get -u given the go tool is not aware of semver prior to Go 1.11 or when module mode is not enabled in Go 1.11+).\r\n- Pre-existing dependency management solutions such as dep currently can have problems consuming a v2+ module created in this way. See for example dep#1962.\r\n\r\n\u003eMajor subdirectory: Create a new v3 subdirectory (e.g., my/module/v3) and place a new go.mod file in that subdirectory. The module path must end with /v3. Copy or move the code into the v3 subdirectory. Update import statements within the module to also use /v3 (e.g., import \"github.com/my/module/v3/mypkg\"). Tag the release with v3.0.0.\r\n- This provides greater backwards-compatibility. In particular, Go versions older than 1.9.7 and 1.10.3 are also able to properly consume and build a v2+ module created using this approach.\r\n- A more sophisticated approach here could exploit type aliases (introduced in Go 1.9) and forwarding shims between major versions residing in different subdirectories. This can provide additional compatibility and allow one major version to be implemented in terms of another major version but would entail more work for a module author. An in-progress tool to automate this is goforward. Please see here for more details and rationale, along with a functioning initial version of goforward.\r\n- Pre-existing dependency management solutions such as dep should be able to consume a v2+ module created in this way.\r\n\r\n### 3.  Major version bump / repository change\r\nLeave `v2` as a dead version and bump to v3 with the path changes.\r\n\r\n### 4.  Remain unchanged\r\nDon’t want to fix it. Not intended to be used as a library and does not make any guarantees about the API.\r\n\r\n### 5.  Let the user change\r\nThe standard rule of go modules conflicts with your development mode. So you can’t comply with the specification of \"Releasing Modules for v2 or higher\" available in the Modules documentation. \r\nRegardless, since it's against one of the design choices of Go, it'll be a bit of a hack. Instead of go get github.com/errata-ai/vale@\u003ctag\u003e, the install procedure would be something like: \r\n   (1)Search for the tag you want (in browser)\r\n   (2)Get the commit hash for the tag you want\r\n   (3)Run go get github.com/pingcap/tidb@\u003ccommit hash\u003e\r\n   (4)Edit the go.mod file to put a comment about which version you actually used\r\n\r\nThis way seems good, but if the users try to use `go get -u`, they will get the old version and break again.\r\n\r\n\r\n## References\r\n* https://github.com/golang/go/wiki/Modules#semantic-import-versioning\r\n* https://golang.org/cmd/go/#hdr-Module_compatibility_and_semantic_versioning\r\n* https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher\r\n\r\n\r\nI can see these repos use `github.com/errata-ai/vale` in github.com:\r\nhttps://github.com/search?q=github.com%2Ferrata-ai%2Fvale+language%3Ago\u0026type=Code\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/203"
   },
   {
    "Title": "2020 Development Goals",
    "Body": "I'd like this year to be a big one for Vale and its related projects. And, as part of that, I'd also like to be more transparent about what I'm currently working on\u0026mdash;here's a basic outline of what's in the pipeline.\r\n\r\n(The goals below apply to Vale and Vale Server as well as the Docker repo, GitHub Action, styles library, editor plugins and web-based plugins.)\r\n\r\n## Documentation\r\n\r\nMy biggest goal is to improve the existing documentation for all Vale-related projects. \r\n\r\n- [x] **Unify all of ours docs**. I'd like to unify our various documentation sources *without breaking any existing links*. The current plan is to move all documentation to [Antora](https://antora.org/) (making use of its support for multiple repos) and redirect all existing links (every page from GitBook, Docusaurus and MkDocs, etc.) to their new counterpart.\r\n\r\n- [x] **Make our docs more interactive**. I'd like to incorporate [termible](https://termible.io/) to allow users to demo Vale inside the docs themselves.\r\n\r\n- [x] **Create a course for Vale and Vale Server**. I'd like to create a course similar to [*Advanced NLP with spaCy*](https://course.spacy.io/en) that walks through the process of using Vale and Vale Server.\r\n\r\n     \u003e I decided to focus on creating an online rule editor instead of this course (for now).\r\n\r\n## Vale\r\n\r\n- [x] incorporate more natural language processing (NLP) features. Vale is built on top of [`jdkato/prose`](https://github.com/jdkato/prose) and already makes significant use of tokenization and segmentation, but almost every extension point could make use of part-of-speech tagging as well.\r\n\r\n   \u003e This has been started by implementing the new `Sequence` check (see #110).\r\n\r\n- [x] Re-write the GitHub Action to make use of GitHub's new \"Problem Matchers.\"\r\n\r\n   \u003e Problem Matchers don't seem to be an upgrade: they only support two annotation levels (warning and error) and have issues with reporting duplicate annotations (https://github.com/actions/runner/issues/504#issuecomment-647903579).\r\n\r\n## Vale Server\r\n\r\n- [x] Release clients for a number of commercial writing applications (Confluence, Adobe FrameMaker, MadCap Flare, MS Word).\r\n\r\n  \u003e The Chrome extension has been completely re-written and now supports a wide range of sites, including Confluence and WordPress. Dedicated extensions are still on the way, but this is now a legitimate option in the meantime.\r\n\r\n- [x] Implement a number of new ways to handle multiple `StylePath`s, allowing for better syncing options across multiple writers. \r\n\r\n- [x] Release new versions of the Sublime Text, Atom, and VS Code plugins with support for the Vale CLI.\r\n\r\n- [x] Extend context menu actions in the editor clients\u0026mdash;for example, \"Ignore Rule\" (disabled the rule in the config file), \"Ignore Word\" (adds a selected word to an ignore file), etc.\r\n\r\n## Styles\r\n\r\n- [ ] v1.0.0 of `Microsoft`\r\n- [ ] v1.0.0 of `Google`\r\n- [x] v0.1.0 of `IBM`\r\n- [ ] v0.1.0 of `PlainLanguage`",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/202"
   },
   {
    "Title": "Feature: Allow Vale to ignore output by class",
    "Body": "## Vale ignores elements\r\n\r\nAs of v2.0, Vale can check DITA content and ignores the contents of `\u003ccodeblock\u003e`, `\u003ctt\u003e`, and `\u003ccodeph\u003e` elements by default.\r\n\r\nIIRC, this is implemented by converting DITA content to HTML using the standard HTML5 transformation provided by [DITA Open Toolkit](https://www.dita-ot.org), and ignoring the HTML elements to which the aforementioned DITA elements are converted, including `\u003ccode\u003e`, `\u003cpre\u003e`, and `\u003ctt\u003e`.\r\n\r\nA variety of other DITA elements with literal content (such as `\u003cmsgph\u003e`, `\u003csystemoutput\u003e`, `\u003cuserinput\u003e`, or `\u003cvarname\u003e` from the software domain) can be ignored by adding additional HTML elements such as `\u003ckbd\u003e`, `\u003csamp\u003e`, and `\u003cvar\u003e` to the `IgnoredScopes` list in `.vale.ini`. \r\n\r\nSee dita-ot/docs@fff2e66 for example:\r\n\r\n```ini\r\n# Inline-level HTML tags to ignore\r\n# By default, `code` and `tt` are ignored.\r\nIgnoredScopes = code, kbd, samp, tt, var\r\n```\r\n\r\n## DITA-OT converts DITA elements to HTML elements and classes\r\n\r\nHowever, there are various inline and block-level DITA elements (such as `\u003capiname\u003e`, `\u003ccmdname\u003e`, `\u003cexample\u003e`, `\u003cfilepath\u003e`, `\u003cmsgnum\u003e` or `\u003cparmname\u003e`) for which no HTML element equivalent exists. \r\n\r\nDITA-OT generates these as HTML `\u003cspan\u003e` or `\u003cdiv\u003e` elements with corresponding CSS classes.\r\n\r\n## Allow Vale to ignore classes\r\n\r\nTo allow these and other elements to be ignored, it would be helpful if the Vale configuration could be extended with an additional option that defines CSS classes to be ignored in HTML output, for example:\r\n\r\n```ini\r\n# HTML classes to ignore\r\nIgnoredClasses = apiname, cmdname, example, filepath, msgnum, parmname\r\n```\r\n\r\nThis feature would also help to support DITA [specialization](http://docs.oasis-open.org/dita/dita/v1.3/errata02/os/complete/part3-all-inclusive/archSpec/base/specialization.html#specialize), and enable DITA-specific [Markup-based configuration](https://errata-ai.gitbook.io/vale/getting-started/markup#markup-based-configuration), as the DITA [`@outputclass`](http://docs.oasis-open.org/dita/dita/v1.3/errata02/os/complete/part3-all-inclusive/langRef/attributes/commonAttributes.html#common-atts) attribute could be used to flag any other content that Vale should ignore.\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/201"
   },
   {
    "Title": "Skipping combination of words",
    "Body": "I am running Vale as a GitHub action on documents for a book written in asciidoctor. \r\nSometimes Vale complains about a word that is part of a name, e.g.\r\n\r\n```\r\nFireFox Dev Tools\r\nJohn Doe\r\n```\r\n\r\nVale complains about 'Dev' and 'Doe'. I want to allow these words only in these combinations so that Vale picks up any of those words when they don't appear in this combination. So I added the combinations to the vocab.txt, but Vale keeps complaining.\r\n\r\nWhat do I need to do?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/200"
   },
   {
    "Title": "Tokenize hyphenated words to check separately",
    "Body": "The default filters for spelling rules ignore hyphenated words:\r\n\r\n```\r\nvar defaultFilters = []*regexp.Regexp{\r\n        regexp.MustCompile(`(?:\\w+)?\\.\\w{1,4}\\b`),\r\n        regexp.MustCompile(`\\b(?:[a-zA-Z]\\.){2,}`),\r\n        regexp.MustCompile(`0[xX][0-9a-fA-F]+`),\r\n        regexp.MustCompile(`\\w+-\\w+`), // ignores a hyphenated word\r\n        regexp.MustCompile(`[A-Z]{1}[a-z]+[A-Z]+\\w+`),\r\n        regexp.MustCompile(`[0-9]`),\r\n        regexp.MustCompile(`[A-Z]+$`),\r\n        regexp.MustCompile(`\\W`),\r\n        regexp.MustCompile(`\\w{3,}\\.\\w{3,}`),\r\n        regexp.MustCompile(`@.*\\b`),\r\n}\r\n```\r\n\r\nHowever, if I disable these using the `custom: true` option (I need to use this option to disable the acronym filters independently), I haven't been able to figure out a way to allow a spelling rule to check each side of the hyphen independently. Instead, I have to add each hyphenated combination to ignore list if I want to spell-check those words. While I don't have a huge number of these, it would be nice if `Vale` provided an option to handle this either with the built-in `Spelling` rule or via custom rules.\r\n\r\nWould it make sense to have an option that makes the `WordTokenizer` split across hyphens?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/199"
   },
   {
    "Title": "Vale ignoring part of a sentence?",
    "Body": "I am running Vale as a GitHub action on documents for a book. Every now and then I want to turn Vale off for just part of a sentence. Is there a way to tell Vale to just ignore a specific rule for just one paragraph or sentence?\r\n\r\nExample:\r\n\r\n```\r\nI like this very very much\r\n```\r\n\r\nwill trigger the repeat rule. I don't want to turn the repeat rule off entirely and I don't want to rewrite the above sentence like \r\n\r\n```\r\nI like this\r\n\u003c!-- Vale off --\u003e\r\nvery very\r\n\u003c!-- Vale on --\u003e\r\nmuch\r\n```\r\n\r\nbecause that makes the actual text very hard to read.\r\n\r\nI cannot find anything in the documentation that explains how to do it (other than the example above).\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/198"
   },
   {
    "Title": "Repetition style should work irrespective of character case",
    "Body": "\u003e Vale 2.1.1\r\n\u003e WSL\r\n\r\nThe [Repetition](https://errata-ai.gitbook.io/vale/getting-started/styles#repetition) style works fine only if the character case matches, for example works for `the the`\r\n```\r\n23:26  error  'the' is repeated!  Microsoft.Repetition\r\n```\r\n\r\nbut not for `The the`.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/197"
   },
   {
    "Title": "Having trouble with matching with regex",
    "Body": "I'm having a problem with having valid regex\r\nhttps://regex101.com/r/x7KqSh/2, but Vale not matching. This has happened a few times, but using this one as an example. Is there any reason it won't return a match. \r\n\r\nFor example, I am matching markdown directly to look for italics. \r\n\r\n```\r\nextends: existence\r\nmessage: Avoid Italics\r\nignorecase: true\r\nlevel: warning\r\nnonword: true\r\nraw: \r\n  - (?:^|(\u003c=\\s))(?:\\*\\s*([^*]+)\\s*?\\*|\\*{3}\\s*([^*]*)\\s*\\*{3})(?:$|(=\\s))\r\n```\r\nI've got the result I want in golang, but Vale doesn't return anything. \r\n\r\n\u003cimg width=\"1312\" alt=\"Screen Shot 2020-04-27 at 3 39 30 PM\" src=\"https://user-images.githubusercontent.com/54866039/80418660-5f663c00-889d-11ea-91c0-2068d2c50b98.png\"\u003e\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/196"
   },
   {
    "Title": "Vale configuration in GitHub Actions for asciidoctor files",
    "Body": "I am trying to get the Vale GitHub Action working for my book that consists of multiple Asciidoctor files.\r\n\r\nSo far I have the action working, but I am not sure the official action includes asciidoctor, because it throws error messages on lines in source code blocks.\r\n\r\nI would also like for it to use an en_GB dictionary.\r\n\r\nThese are the configuration files I've used.\r\n.vale.ini\r\n```\r\nStylesPath = .github/styles\r\nMinAlertLevel = suggestion\r\n\r\n[./*.md]\r\nBasedOnStyles = Vale\r\n\r\n[book/*.adoc]\r\nBasedOnStyles = Vale\r\n\r\n```\r\n\r\n.github/vale-linter.yml\r\n```\r\nname: Linting\r\non: [push]\r\n\r\njobs:\r\n  prose:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@master\r\n\r\n      - name: Vale\r\n        uses: errata-ai/vale-action@v1.0.4\r\n        with:\r\n          styles: |\r\n            Vale\r\n            https://github.com/errata-ai/write-good/releases/latest/download/write-good.zip\r\n            https://github.com/errata-ai/proselint/releases/latest/download/proselint.zip\r\n        env:\r\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\r\n\r\n```\r\n\r\nHow can I tell it to ignore the source code blocks and use an en_GB dictionary?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/195"
   },
   {
    "Title": "Can't use ignore with `raw` scope.",
    "Body": "@jdkato We have joyfully made use of the `raw` scope in the GitLab documentation project, you can see some of our rules here: https://gitlab.com/gitlab-org/gitlab/-/tree/master/doc/.vale/gitlab. We *love* it!\r\n\r\nUnfortunately, we have run into a small problem for the next batch of rules we are working on. We want to make use of the ignore function (https://errata-ai.github.io/vale/config/#ignoring-parts-of-your-documents), but this does not work with the `raw` scope.\r\n\r\nIs it possible to make the `raw` scope watch for `\u003c!-- vale off --\u003e`?\r\n\r\nI also tested with custom block ignores, and it doesn't seem to pick it up either. The custom ignore works with a regular scope, and doesn't work with a `raw` scope.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/194"
   },
   {
    "Title": "Can vale check for empty headers and links in markdown?",
    "Body": "- OS macOs\r\n- Install method - Homebew\r\n- Vale version vale version 2.1.0\r\n\r\nI have been trying to configure two existence rules for empty links and empty headings. Both of these work in a regex tester, but vale is not pulling it in. Looking for empty items is the only think it seems to be struggling with. Thanks. \r\n\r\n1. Check for empty headings. \r\nhttps://regex101.com/r/c4Xsgj/1/\r\n```yaml\r\nextends: existence\r\nmessage: Consider removing empty headings '%s'\r\nignorecase: true\r\nscope: heading\r\nlevel: warning\r\ntoken: '^#+ *$'\r\n\r\n# (\u003c=\\s|^)###(.*?)$\r\n# ^#+ *$\r\n```\r\n\r\n2. Check for empty links\r\n```yaml\r\nextends: existence\r\nmessage: \"Don't use empty links '%s'\"\r\nignorecase: true\r\nlevel: warning\r\nscope: link\r\nnonword: true\r\ntokens:\r\n    - (?:\\[\\]\\(\\))\r\n    - (?:\\W\\[\\]\\(\\))\r\n    - (?:\\[\\]\\(\\))\r\n    - '(?:\\(\\))'\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/193"
   },
   {
    "Title": "Go Installer Not Working",
    "Body": "Goreleaser not working as described in [doc https://errata-ai.gitbook.io/vale/getting-started/installation#using-vale-with-a-continuous-integration-ci-service](https://errata-ai.gitbook.io/vale/getting-started/installation#using-vale-with-a-continuous-integration-ci-service)\r\n\r\nDetails: \r\n\r\n- OS: macOS, Linux\r\n- Install method: Go\r\n- Vale version: Any\r\n\r\nThis fails silently:\r\n```\r\ncurl -sfL https://install.goreleaser.com/github.com/ValeLint/vale.sh | sh -s latest\r\n```\r\nIf I download the script and run it, here's what I get:\r\n```\r\n$ ./vale.sh -d latest\r\nValeLint/vale info checking GitHub for tag 'latest'\r\nValeLint/vale debug http_download https://github.com/ValeLint/vale/releases/latest\r\nValeLint/vale debug http_download_curl received HTTP status 000\r\nValeLint/vale crit unable to find 'latest' - use 'latest' or see https://github.com/ValeLint/vale/releases for details\r\n```\r\nThanks! \r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/192"
   },
   {
    "Title": "Using regex as a token",
    "Body": "I am trying to capture words in headings that end in `ing`.  I have the following as my style file. I am not sure why it's not capturing the test file I have that includes the following.  I have been able to use regex as a token before when checking sentence length so not sure why this one isn't working. \r\n\r\nTest File\r\n```\r\n# Running your instance locally\r\nRunning your instance locally. \r\n```\r\n\r\nGerunds.yml\r\n```\r\nextends: existence\r\nmessage: Consider removing '%s'\r\nlink: \"\"\r\nignorecase: true\r\nlevel: warning\r\ntokens: '/(?:ing)'\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/191"
   },
   {
    "Title": "Comments are not being ignored in code blocks for markdown",
    "Body": "- OS: Linux\r\n- Install method: direct download\r\n- Vale version: 2.1.1\r\n- Micorosft Style\r\n\r\nIgnore code blocks not working for following example: https://gist.githubusercontent.com/gaurav-nelson/b2b1f502968daeed3583d8063b24179c/raw/fbc3242f28041d7382ad7234b894c2b440808853/testfile.md\r\n\r\ngets me the following error:\r\n```\r\n dir/test.md\r\n 13:11  error  '!G' should have one space.  Microsoft.Spacing\r\n 15:11  error  '!G' should have one space.  Microsoft.Spacing\r\n\r\n✖ 2 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/190"
   },
   {
    "Title": "Docker Image doesn't use v2.1",
    "Body": "Hi\r\n\r\nI'm just at the start of a project of using Vale to lint our Asciidoc files using the official Docker image. \r\n\r\nIt's already got Asciidoctor installed which is awesome! \r\n\r\nBut it's not running the latest image. When I run the Image with `vale -v` I get `vale version v2.0.0-beta.2`\r\n\r\nCould the official image please be updated to the latest version of Vale, and use tags so I can ensure I'm always using version 2.1? I'm happy to help with that, but the listing on Docker Hub didn't link back to a Github repo for me to test this with. Is it just the `Dockerfile` in the root of this repo?\r\n\r\nFor context, the plan is to have a central image that we use in CI to enforce Spelling and Grammar rules for multiple repositories that we use Antora to create a static technical documentation site from. \r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/189"
   },
   {
    "Title": "[WIP] Add draft of Flare guidance",
    "Body": "@jdkato I didn't really know how best to start progress on some of the research we discussed, and I leave it up to you if it's best to track with issues, or projects, or something else. I also think in the long run, any _actual_ support should be added to Vale server, but for now, advice in the CLI tool docs I think is a good start.\r\n\r\nAs a follow up issue to track, Flare does offer plugin architecture, there's a link in the PR, I didn't dig much further yet.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/187"
   },
   {
    "Title": "panic: runtime error: slice bounds out of range [684:683]",
    "Body": "Running vale from a Jenkins script (also fails from command line). Linux 3.10.0-862.6.3.el7.x86_64 \r\nvale version v2.0.0\r\n\r\nWhen running on a large directory of many small .dita files, this error is thrown:\r\npanic: runtime error: slice bounds out of range [684:683]\r\n\r\ngoroutine 28 [running]:\r\ngithub.com/errata-ai/vale/core.initialPosition(0xc001efb600, 0x2b3, 0xc001efadad, 0x2, 0xc0008e0cd0, 0x2, 0x2, 0xc000547440, 0xc0005454e0, 0x18)\r\n\t/Users/jdkato/Documents/Code/Go/vale/core/util.go:245 +0x4fc\r\ngithub.com/errata-ai/vale/core.(*File).FindLoc(0xc000914140, 0xc001efb600, 0x2b3, 0xc001efab00, 0x2b3, 0x0, 0x31, 0xc0008e0cd0, 0x2, 0x2, ...)\r\n\t/Users/jdkato/Documents/Code/Go/vale/core/core.go:189 +0xcd\r\ngithub.com/errata-ai/vale/core.(*File).AddAlert(0xc000914140, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0006e0da0, 0x11, 0x0, 0x0, ...)\r\n\t/Users/jdkato/Documents/Code/Go/vale/core/core.go:235 +0x170\r\ngithub.com/errata-ai/vale/lint.Linter.lintText(0xc000094d00, 0xc0002c9000, 0xc000914140, 0xc001efab00, 0x2b3, 0xc001efab00, 0x2b3, 0x0, 0x0, 0xc0008e0ca0, ...)\r\n\t/Users/jdkato/Documents/Code/Go/vale/lint/lint.go:303 +0x4a8\r\ngithub.com/errata-ai/vale/lint.Linter.lintLines(0xc000094d00, 0xc0002c9000, 0xc000914140)\r\n\t/Users/jdkato/Documents/Code/Go/vale/lint/lint.go:273 +0x276\r\ngithub.com/errata-ai/vale/lint.Linter.lintFile(0xc000094d00, 0xc0002c9000, 0xc00088afc0, 0x66, 0x0)\r\n\t/Users/jdkato/Documents/Code/Go/vale/lint/lint.go:239 +0x133\r\ngithub.com/errata-ai/vale/lint.Linter.lintFiles.func1.1.1(0xc00006db00, 0xc000094d00, 0xc0002c9000, 0xc00006daa0, 0xc0008d2080, 0xc00088afc0, 0x66)\r\n\t/Users/jdkato/Documents/Code/Go/vale/lint/lint.go:152 +0x67\r\ncreated by github.com/errata-ai/vale/lint.Linter.lintFiles.func1.1\r\n\t/Users/jdkato/Documents/Code/Go/vale/lint/lint.go:150 +0x2be\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/186"
   },
   {
    "Title": "Spellcheck is testing substrings of URL",
    "Body": "After upgrading from 1.7.1 to 2.1.0, Vale is splitting the contents of URLs apart on word boundaries and testing the individual words in spell-check. I've been reading over [the spelling style description](https://errata-ai.gitbook.io/vale/getting-started/styles#spelling) to see if there were any scope parameters we've been missing, and I don't _think_ there are.\r\n\r\nThe branch is [docs-aqualls-vale-spelling](https://gitlab.com/gitlab-org/gitlab/-/tree/docs-aqualls-vale-spelling), and the [Spelling.yml](https://gitlab.com/gitlab-org/gitlab/-/blob/docs-aqualls-vale-spelling/doc/.vale/gitlab/Spelling.yml) file contains:\r\n\r\n```yaml\r\nextends: spelling\r\nmessage: 'Spelling check: \"%s\"?'\r\nlevel: warning\r\nignore:\r\n  - gitlab/spelling-exceptions.txt\r\n```\r\n\r\n_(Note that in the branch it's `warning` but I'm modifying it locally to `error` so the problems are easier to see.)_\r\n\r\nHere's the command I run, and the results:\r\n\r\n```shell\r\n$ vale --no-wrap --minAlertLevel error doc/administration/troubleshooting/gitlab_rails_cheat_sheet.md\r\n\r\n doc/administration/troubleshooting/gitlab_rails_cheat_sheet.md\r\n 288:82  error  Spelling check: \"dev\"?     gitlab.Spelling\r\n 675:29  error  Spelling check: \"gitlab\"?  gitlab.Spelling\r\n 675:70  error  Spelling check: \"ee\"?      gitlab.Spelling\r\n 693:38  error  Spelling check: \"gitlab\"?  gitlab.Spelling\r\n 736:5   error  Spelling check: \"ee\"?      gitlab.Spelling\r\n```\r\n\r\nWhen I look at [gitlab_rails_cheat_sheet.md](https://gitlab.com/gitlab-org/gitlab/-/blob/docs-aqualls-vale-spelling/doc/administration/troubleshooting/gitlab_rails_cheat_sheet.md):\r\n\r\n```\r\n# Line 675\r\nFeatures listed in \u003chttps://gitlab.com/gitlab-org/gitlab/blob/master/ee/app/models/license.rb\u003e.\r\n```\r\n\r\n```\r\n# Line 693\r\nFrom [Zendesk ticket #91083](https://gitlab.zendesk.com/agent/tickets/91083) (internal)\r\n```\r\n\r\nAt first I thought it was the `\u003c…\u003e` format of the links, but I've tried converting them over to the more standard Markdown syntax of `[link word](url)` and I'm still getting the same issue. \r\n\r\nIdeas?\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.) - MacOS\r\n- Install method: Homebrew\r\n- Vale version: 2.1.0\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/185"
   },
   {
    "Title": "False positive for links with empty caption",
    "Body": "Hi!\r\nI use vale version v2.1.0 on Windows.\r\n\r\nI have the following rule that makes users stop writing like `See [this topic](//url).`\r\n\r\nThe rule looks like follows.\r\n\r\n```yml\r\nextends: existence\r\nmessage: \"Do not name links like '%s'. Better paste topic name here.\"\r\nlevel: warning\r\nignorecase: true\r\nscope: link\r\ntokens:\r\n  - this \r\n  - link\r\n  - here\r\n  - this topic\r\n  - this document\r\n  - article\r\n  - topic\r\n```\r\n\r\nAt the same time, we can create links with an empty caption that is automatically substituted with a topic name.\r\n\r\n```markdown\r\nThe [](xref:401276) topic describes how to deploy your .NET Core 3 WPF application.\r\n```\r\nWith the new Vale version (v2.1.0), I get false positive error messages:\r\n\r\n![image](https://user-images.githubusercontent.com/20209898/77535087-058fe200-6eab-11ea-9846-c9d70704aece.png)\r\n\r\nLooks like Vale considers the text that follows the empty-caption-link as a link scope.\r\n\r\nI cannot reproduce this issue with v1.7.1.\r\n\r\nThank you!\r\nLex",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/184"
   },
   {
    "Title": "[rst] Text not checked if part of certain directives",
    "Body": "```\r\n- OS:macOS\r\n- Install method: HB\r\n- Vale version: 1.7.1\r\n```\r\n\r\nBody text that is part of certain directives like `only` and `admonition` is not check by Vale. \r\n\r\nSee the absence of underline in some of the `e.g`:\r\n\u003cimg width=\"167\" alt=\"Screenshot 2020-03-20 at 10 35 22\" src=\"https://user-images.githubusercontent.com/25686502/77151593-8d828000-6a96-11ea-9e78-7257fe6e287f.png\"\u003e\r\n\r\nThat's a problem for certain cases, like people who use the `only` directive to tag entire pages of content for specific audiences.\r\n\r\nIs the source of this issue in rst2html or Vale?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/183"
   },
   {
    "Title": "Running on DITA throws “No XSLT transform provided!”",
    "Body": "Running Vale on the [DITA-OT docs](https://github.com/dita-ot/docs) with `vale topics` throws the `No XSLT transform provided!` error _(twice!)_ and a series of errors that suggest Vale is processing DITA files as text, rather than as DITA XML:\r\n\r\n```\r\nNo XSLT transform provided!\r\nNo XSLT transform provided!\r\n\r\n topics/building-output.dita\r\n 1:3   error  Did you really mean 'xml'?      Vale.Spelling \r\n  ⋮\r\n```\r\n\r\n_(macOS, Vale 2.1.0 installed via Homebrew)_\r\n\r\nThe [DITA \\[ markup \\]](https://errata-ai.gitbook.io/vale/getting-started/markup#dita-markup) section of the docs is a bit sparse on how Vale finds the local installation of DITA-OT apart from the fact that it needs to be on `$PATH`. In my case it is (and `which dita` returns the correct path to the toolkit installation), but I'm wondering whether Vale is really finding the toolkit. 🤔 \r\n\r\nThe [XML \\[ markup \\]](https://errata-ai.gitbook.io/vale/getting-started/markup#xml-markup) section of the docs mentions the [Transform](https://errata-ai.gitbook.io/vale/getting-started/configuration#transform) option and shows an example for DocBook, but I assume this setting should not be necessary when checking `*.dita` files. \r\n\r\nThe “No XSLT transform provided!” error seems to suggest that setting might be necessary after all, but I'm not sure if that's a red herring here. \r\n\r\nChecking the configuration with `vale ls-config` reveals an empty `\"Parsers\": {},` entry, not sure if that's a problem. The [Installation](https://errata-ai.gitbook.io/vale/#installation) docs say:\r\n\r\n\u003e …you'll also need to install a parser\r\n\r\nbut it's not clear to me whether such parsers need to be explicitly registered somehow in `.vale.ini`, or whether having them installed on the system should be enough.\r\n\r\nHappy to submit a docs PR to help clarify this, but I'm not sure yet how to resolve the issue.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/182"
   },
   {
    "Title": "Feature request: Extension point for custom messages",
    "Body": "All existing extension points, shows the same message for all matches. \r\n\r\nFor example, consider the following excerpt from `Microsoft/Vocab.yml`:\r\n```yml\r\nextends: existence\r\nmessage: \"Verify your use of '%s' with the A-Z word list.\"\r\nlink: 'https://docs.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/a/abort-abortion'\r\nlevel: suggestion\r\nignorecase: true\r\ntokens:\r\n  - above\r\n  - accessible\r\n  - actionable\r\n  - against\r\n```\r\n\r\nFor all matches it points users to verify word usage from a specific web address.\r\n\r\nIf we can have a custom message extension, that could show specific messages for specific terms, it would save us from referring users to a web address and specific usage instruction right there in vale.\r\n\r\nSo maybe something like:\r\n```yml\r\nextends: existence\r\nlink: 'https://docs.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/'\r\nlevel: suggestion\r\nignorecase: true\r\ncustommessage:\r\n  - above: Don't use to mean earlier.\r\n  - accessible: Reserve accessible and accessibility to refer to things that are easy to use for everyone, including people with disabilities.\r\n  - actionable: Don't use unless you have no other choice.\r\n  - against: Don't use to refer to running or building a program on a particular platform or operating system. Use on instead.\r\n```\r\n\r\nSimilar to `swap`, maybe `custommessage` (or whatever you wanna call that) it could take in two things or more:\r\n```\r\n- \u003cword\u003e: \u003cusage advice\u003e| \u003cspecific-URL\u003e\r\n```\r\nFor example:\r\n```\r\n  - above: Don't use %s to mean earlier. | https://docs.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/a/above\r\n```\r\n\r\n```\r\nsrc/content/file.md\r\n 47:1  suggestion  Don't use 'above' to mean earlier.      Microsoft.Vocab\r\n```\r\n\r\nI am not sure if this one was requested earlier.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/181"
   },
   {
    "Title": "Correct typo",
    "Body": "Change typo which I'm pretty sure was incorrect, but I might be wrong.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/180"
   },
   {
    "Title": "Hugo switched from Blackfriday to Goldmark",
    "Body": "Not sure if you were hitting any issues with Blackfriday for the Markdown processing, but Hugo has switched a few months ago https://gohugo.io/news/0.60.0-relnotes/\r\nSince this library is mostly concerned with text rather that some CommonMark edgecases, it might not make sense to switch, but I thought I'd share in case you hadn't seen it.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/179"
   },
   {
    "Title": "Feature Request: ignore-syntax as a scope (not just CLI Flag)",
    "Body": "I realize this may not be feasible based on how Vale does it's linting, but I figure it's worth asking.\r\n\r\nWe would like to create styles that lint for structural issues within markdown files. We are able to use `--ignore-syntax` to test our potential styles, and they work, but it means we can't combine \"bare markdown\" styles and \"content check\" styles into one test. Half need the CLI flag, the other half do not.\r\n\r\nIf we could make styles with `scope: ignore-syntax` such that it has the same effect as the CLI flag, it would be extremely powerful, letting us enforce standards in a way that we aren't able to do right now. For example, we could check for relative link use (mandatory in our project), reference style links (must avoid), etc.\r\n\r\nWe would use it to supplement our use of `markdownlint`, and perhaps one day have a full suite of styles that would let us drop `markdownlint` completely.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/178"
   },
   {
    "Title": "Missing checksums file for vale 2.0.0",
    "Body": "```\r\n/ # curl -sfLo vale.sh https://install.goreleaser.com/github.com/ValeLint/vale.sh\r\n/ # bash vale.sh -b /usr/bin -d\r\nValeLint/vale info checking GitHub for latest tag\r\nValeLint/vale debug http_download https://github.com/ValeLint/vale/releases/latest\r\nValeLint/vale info found version: 2.0.0 for v2.0.0/Linux/64-bit\r\nValeLint/vale debug downloading files into /tmp/tmp.fOblnE\r\nValeLint/vale debug http_download https://github.com/ValeLint/vale/releases/download/v2.0.0/vale_2.0.0_Linux_64-bit.tar.gz\r\nValeLint/vale debug http_download https://github.com/ValeLint/vale/releases/download/v2.0.0/vale_2.0.0_checksums.txt\r\nValeLint/vale debug http_download_curl received HTTP status 404\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/177"
   },
   {
    "Title": "Extend base config",
    "Body": "There is no way to extend a base config, is there?\r\n\r\nI mean, I'd like to have a base `.vale.ini` config file somewhere, and then in each project's `.vale.ini` do something like:\r\n\r\n```yaml\r\nExtend = path/to/base/.vale.ini\r\n# and here override some config\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/176"
   },
   {
    "Title": "Ignore comments are not honored in a markdown or reStructuredText file inside a list",
    "Body": "I probably have an edge case. I have put in `\u003c!-- vale off --\u003e` comment (inside a numbered list) in my markdown file but its still reporting errors. \r\n\r\nI have a numbered list with a YAML code example (test1.md) and have put it ignore comments for second list item. However, Vale is not honoring the ignore comments. \r\nBut it works fine (show no errors) if I remove `---` from my YAML example (test2.md).\r\n\r\nI have added test1.md and test2.md below, and I am using Microsoft style.\r\n\r\n#### Vale error\r\n````\r\ntest.md\r\n\r\n 44:8   error       Use \"shouldn't\" instead of      Microsoft.Contractions\r\n                    \"should not\".\r\n 44:29  suggestion  'be used' looks like passive    Microsoft.Passive\r\n                    voice.\r\n 45:4   suggestion  Verify your use of 'Ensure'     Microsoft.Vocab\r\n                    with the A-Z word list.\r\n 45:33  error       Use \"aren't\" instead of \"are    Microsoft.Contractions\r\n                    not\".\r\n\r\n✖ 2 errors, 0 warnings and 2 suggestions in 1 file.\r\n````\r\n\r\n\r\n\u003cdetails\u003e\u003csummary\u003e test1.md\u003c/summary\u003e\r\n\u003cp\u003e\r\n\r\n`````\r\n1. Consider the following `deployment.yaml` file.\r\n   ```yaml\r\n   apiVersion: v1\r\n   kind: Service\r\n   metadata:\r\n     name: my-nginx-svc\r\n     labels:\r\n       app: nginx\r\n   spec:\r\n     type: LoadBalancer\r\n     ports:\r\n     - port: 80\r\n     selector:\r\n       app: nginx\r\n   ---\r\n   apiVersion: apps/v1\r\n   kind: Deployment\r\n   metadata:\r\n     name: my-nginx\r\n     labels:\r\n       app: nginx\r\n   spec:\r\n     replicas: 3\r\n     selector:\r\n       matchLabels:\r\n         app: nginx\r\n     template:\r\n       metadata:\r\n         labels:\r\n           app: nginx\r\n       spec:\r\n         containers:\r\n         - name: nginx\r\n           image: nginx:1.7.9\r\n           ports:\r\n           - containerPort: 80\r\n   ```\r\n\r\n1. few other steps.\r\n\u003c!-- vale off --\u003e\r\n1. The output lists the failure code and policy violation details.\r\n   ```bash\r\n   SSH should not typically be used within containers.\r\n   Ensure that non-SSH services are not using port 22.\r\n   ```\r\n\u003c!-- vale on --\u003e\r\n\r\nsomething else.\r\n`````\r\n\r\n\u003c/p\u003e\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\u003csummary\u003e test2.md\u003c/summary\u003e\r\n\u003cp\u003e\r\n\r\n`````\r\n\r\n1. Consider the following `deployment.yaml` file.\r\n   ```yaml\r\n   apiVersion: v1\r\n   kind: Service\r\n   metadata:\r\n     name: my-nginx-svc\r\n     labels:\r\n       app: nginx\r\n   spec:\r\n     type: LoadBalancer\r\n     ports:\r\n     - port: 80\r\n     selector:\r\n       app: nginx\r\n   \r\n   apiVersion: apps/v1\r\n   kind: Deployment\r\n   metadata:\r\n     name: my-nginx\r\n     labels:\r\n       app: nginx\r\n   spec:\r\n     replicas: 3\r\n     selector:\r\n       matchLabels:\r\n         app: nginx\r\n     template:\r\n       metadata:\r\n         labels:\r\n           app: nginx\r\n       spec:\r\n         containers:\r\n         - name: nginx\r\n           image: nginx:1.7.9\r\n           ports:\r\n           - containerPort: 80\r\n   ```\r\n\r\n1. few other steps.\r\n\u003c!-- vale off --\u003e\r\n1. The output lists the failure code and policy violation details.\r\n   ```bash\r\n   SSH should not typically be used within containers.\r\n   Ensure that non-SSH services are not using port 22.\r\n   ```\r\n\u003c!-- vale on --\u003e\r\n\r\nsomething else.\r\n\r\n`````\r\n\r\n\u003c/p\u003e\r\n\u003c/details\u003e\r\n\r\n--------\r\n\r\n- OS: Linux\r\n- Install method: direct download \r\n- Vale version: 2.0.0\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/175"
   },
   {
    "Title": "Cannot install v2.0.0 in CI",
    "Body": "I'm getting started with Vale. I tried to install the latest version (v2.0.0) in my CI following the instructions given in \u003chttps://errata-ai.gitbook.io/vale/getting-started/installation#using-vale-with-a-continuous-integration-ci-service\u003e but it failed. Installing v1.7.1 went OK, though.\r\n\r\nAfter debugging `vale.sh` to see what was going on, it seems that the problem is that it tries to download it from this URL:\r\n\r\n\u003e https://github.com/errata-ai/vale/releases/download/v2.0.0/vale_2.0.0_Linux_64-bit.tar.gz\r\n\r\n...and it doesn't exist. The existing URL is:\r\n\r\n\u003e [https://github.com/errata-ai/vale/releases/download/v2.0.0/vale_**v**2.0.0_Linux_64-bit.tar.gz](https://github.com/errata-ai/vale/releases/download/v2.0.0/vale_v2.0.0_Linux_64-bit.tar.gz)\r\n\r\nNote the **v** before the second `2.0.0`.\r\n\r\nIt works for v1.7.1 because it seeks this URL and it does exist:\r\n\r\n\u003e https://github.com/errata-ai/vale/releases/download/v1.7.1/vale_1.7.1_Linux_64-bit.tar.gz\r\n\r\nSo, could you upload the 2.0.0 version without the **v** so that the script works? Thanks! 😄",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/174"
   },
   {
    "Title": "Docs issue: ignored elements in DITA markup",
    "Body": "The [DITA markup](https://errata-ai.github.io/vale/formats/#dita-markup) section of the docs says:\r\n\r\n\u003e By default, `script`, `style`, `pre`, `code`, and `tt` tags are ignored.\r\n\r\n— but it looks like this text was repurposed from _(an earlier version of?)_ the [HTML markup](https://errata-ai.github.io/vale/formats/#html-markup) section, as several of these elements don't exist in DITA, and other related DITA elements such as `\u003ccodeph\u003e` that are commonly used to wrap code snippets are not listed here.\r\n\r\nI searched the Vale codebase hoping to find the list of DITA elements that are excluded from checks, but I'm coming up empty.\r\n\r\nI'd be happy to submit a pull request to clarify this in the docs if anyone can point me to the place where ignored elements are defined for DITA.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/173"
   },
   {
    "Title": "More details on Dockerfile",
    "Body": "I've been working on some GitLab repositories to get vale working nicely in their pipelines feature, but have got quite stuck, and it looks vaguely similar to #128\r\n\r\nIt's very hard to debug exactly what's going on, and I see why you took some of the decisions with the GitHub action now, but trying the Dockerfile as is with pipelines constantly gives the `WARNING: Missing or invalid config file.` error. I can see that for the Docker instructions you mention copying in to the running container styles, docs folder etc., which makes sense. But with pipelines, you can't do that. In theory the contents of the repo pipelines is running over contain styles, config and docs, and with the correct parameters passed to Vale, it should in theory find everything it needs.\r\n\r\nNow, I don't expect you to know much about pipelines, but looking at the Dockerfile, I don't really understand what's going on it, and that might help me debug. I can see you use an Alpine image, but how does Vale get there? It kind of looks like it's just in the image, but it's not part of Alpine (is it?). \r\n\r\nAre you able to give me a bit more detail about what the Dockerfile is doing? Maybe it will help me figure this out and if I need to create a custom image instead.\r\n\r\nThanks!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/172"
   },
   {
    "Title": "Support recursive option to check files in subdirectories",
    "Body": "Add a -r option to recurse subdirectories for additional files of a specific type.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/171"
   },
   {
    "Title": "Fix typo",
    "Body": "Fixing a small typo in the docs. 😄 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/170"
   },
   {
    "Title": "Update incorrect guidance link",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/169"
   },
   {
    "Title": "Capitalization test for multi-word phrases?",
    "Body": "I'm attempting to implement some tests, and I'm running into a limitation of the capitalization test. I'm guessing the capitalization test splits on word boundaries, and I'm running into some multi-word phrases that need to match specific capitalization rules. \r\n\r\nFor example: `Let's Encrypt` and `GitLab Runner`.\r\n\r\nIs there an easy way around this problem that I'm missing, or is the only current approach to break the phrases apart, putting each individual word on a new line? ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/168"
   },
   {
    "Title": "Broken file links",
    "Body": "It would be interesting to have Vale let me know when links to files (e.g. `[link](./file.md)`) get broken (e.g. when deleting `./files.md`).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/167"
   },
   {
    "Title": "Fix doc link for the Docker image",
    "Body": "The previous link (cloud.docker.com) required authentication.  The new link (hub.docker.com) does not.\r\n\r\nAlso fix terminology.  Change \"container\" to \"image\".  A Docker container is an instance of a Docker image.  Docker Hub hosts Docker images.  The term \"container image\" is also valid.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/166"
   },
   {
    "Title": "can you make vale work with BBEdit?",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/165"
   },
   {
    "Title": "Weird behaviour of exclamation mark rule with markdown image syntax",
    "Body": "- OS: macOS\r\n- Install method: direct download of the binary\r\n- Vale version: `1.7.1`\r\n\r\nThere seem to be a problem with exclamation marks in markdown files.\r\nThe rule `Google.Exclamation` is somehow complaining about the exclamation mark of the markdown image syntax. This happens though only of specific cases:\r\n\r\n* image syntax only (no errors)\r\n\r\n\u003cimg width=\"273\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1110551/69864608-9a892280-129f-11ea-961c-baac8c270955.png\"\u003e\r\n\r\n* image syntax with text ending with exclamation mark (notice the file has no new line at the end).\r\n\r\n\u003cimg width=\"499\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1110551/69864677-c4dae000-129f-11ea-93fe-a5e3fe8dec67.png\"\u003e\r\n\r\n* image syntax with text ending with exclamation mark, with new line at the end of the file\r\n\r\n\u003cimg width=\"469\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1110551/69864726-e0de8180-129f-11ea-9aa0-cf33d47119a2.png\"\u003e\r\n\r\nIs this a bug somewhere? Or how is this suppose to work?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/164"
   },
   {
    "Title": "autogen external link chause a wrong linting",
    "Body": "Hi,\r\n\r\ni found a strange issue while linting RST files.\r\nhttps://raw.githubusercontent.com/vyos/vyos-documentation/master/docs/clustering.rst\r\n\r\nI want to use a  substitution\r\n```\r\nswap:\r\n  vyos: VyOS\r\n```\r\n\r\nThe code block should actually be ignored. But with the automatically generated link (on line 11) the first match in the code-block will be found and marked as a warning. The rest will be ignored. When i change the the URL in a RST format like ``` `T985 \u003chttps://phabricator.vyos.net/T985/\u003e`_ ``` all went fine and the linter worked as it should.\r\n\r\ni `diff` in the generated html code, there is no diff\r\nautogen:\r\n```\r\n\u003cdiv class=\"admonition note\"\u003e\r\n\u003cp class=\"first admonition-title\"\u003eNote\u003c/p\u003e\r\n\u003cp class=\"last\"\u003ePlease follow the process of the cluster function here. \u003ca class=\"reference external\" href=\"https://phabricator.vyos.net/T985\"\u003ehttps://phabricator.vyos.net/T985\u003c/a\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n````\r\n\r\nwith 'correct' syntax:\r\n```\r\n\u003cdiv class=\"admonition note\"\u003e\r\n\u003cp class=\"first admonition-title\"\u003eNote\u003c/p\u003e\r\n\u003cp class=\"last\"\u003ePlease follow the process of the cluster function here. \u003ca class=\"reference external\" href=\"https://phabricator.vyos.net/T985\"\u003ehttps://phabricator.vyos.net/T985\u003c/a\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n```\r\n\r\nOS (e.g., macOS, Windows, Linux, etc.)\r\n- MacOS\r\n- Docker image (ubuntu)\r\n\r\nInstall method\r\n - direct download\r\n\r\nVale version\r\n- 1.7.1\r\n- 2.0.0 beta2\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/163"
   },
   {
    "Title": "Spell-checking RST files doesn't skip custom labels",
    "Body": "We've been noticing lately that we're seeing spelling errors on custom labels, which are directives in RST. \r\n\r\nFor example:\r\n\r\n```\r\n.. _ac-sshkey-add:\r\n\r\nac-sshkey-add\r\n^^^^^^^^^^^^^\r\n\r\nAdd an SSH key to a website.\r\n```\r\n\r\nThe subheading should absolutely be flagged, because `ac-sshkey-add` is not a dictionary word, but `.. _ac-sshkey-add:` is a RST directive (custom label).\r\n\r\nAny suggestions on how to get around this problem?\r\n\r\n- OS: macOS\r\n- Install method: homebrew\r\n- Vale version: 1.7.1\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/162"
   },
   {
    "Title": "Asciidoc issues",
    "Body": "Here’s something interesting. I was testing adding support for asciidoc to the VSCode extension, and nothing would happen when I updated the extension.\r\n\r\nSo I tested running vale on the command line, and when I ran it over _.adoc_ files I would get a lot of messages saying that my styles couldn’t be found, plus `exit status 1`. But when I ran over markdown or RsT, things worked fine. So I decided to test with inbuilt styles, and just received `exit status 1` on _.adoc_ files. This test was with a very vanilla ini file with no paths to custom styles etc, and only used the vale styles, which I think are internal?\r\n\r\nFrom the file not found errors it looks like it’s trying to find styles relatively, or there’s some path issue. Now, I do have an odd setup with a lot of aliases (created with `ln -s`) to vale config files and style paths to do testing. But they work with every other file format and running `vale dc` picks them up fine.\r\n\r\nSo I wonder, is it anything to do with the asciidoctor dependency? I dug into the go code and noticed a todo to remove that, why is it needed? Or do you think this might be something else?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/161"
   },
   {
    "Title": "Fix the `brew install` command to point at the correct repository",
    "Body": "- I tried the existing command, which tries to find formulae in\n`Homebrew/homebrew-core`, and got the following error:\n\n```\n╭─ issyl0@grus ~\n╰─ $ brew install vale\nError: No available formula with the name \"vale\"\n==\u003e Searching for a previously deleted formula (in the last month)...\nWarning: homebrew/core is shallow clone. To get complete history run:\n  git -C \"$(brew --repo homebrew/core)\" fetch --unshallow\n\nError: No previously deleted formula found.\n==\u003e Searching for similarly named formulae...\nError: No similarly named formulae found.\n==\u003e Searching taps...\n==\u003e Searching taps on GitHub...\nError: No formulae found in taps.\n```\n\n- It turns out that there's a [separate Homebrew\n  tap](https://github.com/ValeLint/homebrew-vale). It's in a different\n  GitHub org, but it installs the most recent version and I assume from\n  the name it's related to you!\n\n```\n╭─ issyl0@grus ~\n╰─ $ brew install ValeLint/vale/vale\n==\u003e Tapping valelint/vale\nCloning into '/usr/local/Homebrew/Library/Taps/valelint/homebrew-vale'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 3 (delta 0), pack-reused 0\nUnpacking objects: 100% (4/4), done.\nTapped 1 formula (30 files, 24.9KB).\n\n==\u003e Installing vale from valelint/vale\n[...]\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/160"
   },
   {
    "Title": "Vale should tell me about missing styles",
    "Body": "- OS: Linux (NixOS)\r\n- Version: [1.7.1](https://github.com/NixOS/nixpkgs/blob/nixos-19.09/pkgs/tools/text/vale/default.nix#L5)\r\n\r\nWhen I reference a style that does not have a corresponding directory, `vale` ignores this silently.\r\n\r\nExample `.vale.ini`:\r\n\r\n```ini\r\nStylesPath = .local/share/vale-styles\r\nMinAlertLevel = suggestion\r\n \r\n[*.{md}]\r\nBasedOnStyles = style-that-does-not-exist\r\n```\r\n\r\n```console\r\n$ vale .\r\n✔ 0 errors, 0 warnings and 0 suggestions in 74 files.\r\n```\r\n\r\nI expect `vale` to error out in this case. Suppressing this kind of error makes it more difficult to configure `vale` correctly.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/159"
   },
   {
    "Title": "Add: link to Formats section from install cli",
    "Body": "Relates to #157 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/158"
   },
   {
    "Title": "Linting rST files gives `can't run rst2html: (/usr/bin/python, )!`",
    "Body": "Hello,\r\n\r\n- OS: MacOS\r\n- Install method: Homebrew\r\n- Vale version: 1.7.1\r\n- Python\r\n```\r\n ~/repo: pip -V                                                                                                                             \r\npip 19.3.1 from /usr/local/lib/python3.7/site-packages/pip (python 3.7)\r\n ~/repo: python -V                                                                                                                                     \r\nPython 3.7.5\r\n```\r\n\r\nAfter a clean reinstall of my system, I get `can't run rst2html: (/usr/bin/python, )!` for each parsed rST file when I:\r\n\r\n1. Go to a Sphinx project (we will parse rST files).\r\n1. Run `vale source` (where the rST files are).\r\n\r\nI didn't have this issue in the past.  MD files are parsed properly.\r\n\r\nI also get `Unexpected token c in JSON at position 01` in VSCode when I try to lint (I know it's an issue for a [different repo](https://github.com/testthedocs/vscode-vale), but putting both in this message might help future users).\r\n\r\nAny idea?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/157"
   },
   {
    "Title": "typo",
    "Body": "defintions.go",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/156"
   },
   {
    "Title": "Accept name in rule files",
    "Body": "Currently Vale determines a rule's name by file location. Ideally it should be possible to define this in the file itself. This would allow transfer over the wire and bundling documents into a single file for easier distribution of a style guide.\r\n\r\nThank you.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/155"
   },
   {
    "Title": "Style exceptions not behaving as expected",
    "Body": "- OS: Windows 10\r\n- Install method: chocolatey\r\n- Vale version: 1.7.1\r\n\r\nHi! We're seeing some unexpected results with title case rules and exceptions.\r\n\r\nOur setup is:\r\n```\r\nStylesPath = styles\r\nMinAlertLevel = warning\r\n[*.{md}]\r\nBasedOnStyles = EventStore, 18F, write-good\r\n18F.Titles = No\r\n```\r\nThen in `styles/EventStore/Titles.yml`\r\n```\r\n---\r\nextends: capitalization\r\nmessage: \"'%s' should be in sentence case\"\r\nlevel: warning\r\nscope: heading\r\nmatch: $sentence\r\nexceptions:\r\n  - Event Store\r\n```\r\n\r\nVale then does the following:\r\n\r\n`## Event Store` -\u003e ok\r\n`## Creating a connection to Event Store` -\u003e warning\r\n\r\nThere is a further quirk. If I modify the exceptions as follows:\r\n\r\n```\r\nexceptions:\r\n  - Event Store\r\n  - Creating a connection to Event Store\r\n```\r\n\r\nIt gives the same results:\r\n\r\n`## Event Store` -\u003e ok\r\n`## Creating a connection to Event Store` -\u003e warning\r\n\r\nWhat should the behaviour be?\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/154"
   },
   {
    "Title": "docs: fix spelling mistake",
    "Body": "- Fix spelling mistake\r\n  - from `inlcude` to `include`",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/153"
   },
   {
    "Title": "XDG location for configuration file on Linux",
    "Body": "It would be nice if vale looked for the config file at the location specified by the environment variable `$XDG_CONFIG_HOME`, which is where most programs store their configurations. See also [the XDG base directory specifications](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html).\r\n\r\nIf this were to be implemented, it would also be nice to allow `vale.ini` config files, that is non-hidden files. `$XDG_CONFIG_HOME` is generally already specifying a hidden folder, namely `~/.config`.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/152"
   },
   {
    "Title": "BlockIgnore for multi-line comments",
    "Body": "I'm using vale 1.7.1 on Arch Linux.\r\n\r\nI use the following setup to get easily foldable comments in vim:\r\n\r\n    \u003c!-- NOTES fold-begin --\u003e\u003c!--\r\n    \r\n    This is a comment on\r\n    multiple lines\r\n    \r\n    --\u003e\r\n    \u003c!-- fold-end --\u003e\r\n\r\nI would like these not to be linted. I've tried adding the following to `.vale.ini`:\r\n\r\n    BlockIgnores = (?s) *(\u003c!-- NOTES fold-begin --\u003e\u003c!--.*?\u003c!-- fold-end --\u003e)\r\n\r\nIt doesn't seem to do anything at all. I've tested the regex [here](https://regex101.com/r/mFM0kZ/6)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/151"
   },
   {
    "Title": "Improve the release workflow",
    "Body": "For v2.0.0+ versions of Vale, there are going to be some development and release workflow changes.\r\n\r\nCurrently, the process is quite simple: development takes place on `master` and releases are tagged at various times. \r\n\r\nGoing forward, this is going to change. The goal will be for `master` to *always* represent the state of the latest release (in terms of both `go get` and the state of the live documentation) --  Essentially, it's going to be a read-only release branch. Development will take place on versioned branches (e.g., `v2.0.1`).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/150"
   },
   {
    "Title": "Add `min` key to `Occurrence`",
    "Body": "[`Occurrence`](https://errata-ai.github.io/vale/styles/#occurrence) currently supporting looking for `max` number of tokens, but not a `min`.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/149"
   },
   {
    "Title": "Smart quotes configuration?",
    "Body": "I'm currently on Vale 1.4.2, and would like to upgrade to 1.7.1. During testing with 1.7.1, the change in 1.6.0 that stops converting smart quotes to dumb quotes now reports 100's of spelling errors in my documentation, complaining about `doesn`, `couldn`, `isn`, etc.\r\n\r\nMy doc toolchain, Antora, automatically converts dumb quotes to HTML entities, e.g. `\u0026#8217;` and the \"old\" sanitization configuration worked well with my dictionary. Note that I run Vale on the Antora-generated HTML; there's no need for Vale to run asciidoctor on each source file a second time. Also, I primarily use Vale to facilitate spell checking; I only have a few other styles active at this time.\r\n\r\nI tried adding `‘` to my dictionary's affix file, but that doesn't appear to match the HTML entities in use.\r\n\r\nIt might be useful if Vale supported a flag to control whether smart quotes were sanitized to dumb quotes. at least prior to spell checking.\r\n\r\nUntil then, I'll stay on 1.4.2.\r\n\r\nI use Vale on Mac OS, but it's also run during CI builds on Linux hosts. Either way, Vale is installed via Go Releaser.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/148"
   },
   {
    "Title": "Add support for Sphinx",
    "Body": "Vale supports reStructuredText, but Sphinx uses a superset of the format that `rst2html` doesn't understand (see #119, #140, and #146).\r\n\r\nI think we should take an approach similar to how the [VS Code extension](https://github.com/vscode-restructuredtext/vscode-restructuredtext) for reStructuredText handles Sphinx.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/147"
   },
   {
    "Title": "Determining why Vale isn't checking part of a file?",
    "Body": "- OS: macOS\r\n- Install method: homebrew\r\n- Vale version: 1.7.0\r\n\r\nWe’re using the sphinx-tabs project (https://github.com/djungelorm/sphinx-tabs) and in some - not all - files that use in-page tabs, Vale does not check the items inside this structure:\r\n\r\n```\r\n\r\n   .. tab:: foo\r\n\r\n       Content here\r\n\r\n   .. tab:: bar\r\n\r\n       More content here\r\n```\r\n\r\n(I'm happy to provide the full file privately but really shouldn't paste the whole thing in here, because it involves a project that hasn't launched yet)\r\n\r\nRunning Vale with the `--ignore-syntax` flag in the CLI runs the tests that can be completed line-by-line, but I’m not sure how to proceed from here.\r\n\r\n```\r\n$ vale --no-wrap filename.rst\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file.\r\n\r\n$ vale --ignore-syntax --no-wrap filename.rst\r\n\r\n filename.rst\r\n 18:53  warning     'only' is a weasel word!                write-good.Weasel\r\n 35:11  suggestion  'be indexed' looks like passive voice.  microsoft.Passive\r\n 36:26  suggestion  Use \"won't\" instead of \"will not\".      microsoft.Contractions\r\n 41:17  error       Spelling check: 'signin'?               acquia.Spelling\r\n 62:32  suggestion  Use \"doesn't\" instead of \"does not\".    microsoft.Contractions\r\n 62:41  warning     'currently' is a weasel word!           write-good.Weasel\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/146"
   },
   {
    "Title": "RST replacement directives that include substitutions appear to break vale.",
    "Body": "- MacOS (not sure it's relevant)\r\n-  Homebrew (I think)\r\n- vale version 1.7.0\r\n\r\nI have this set of substitutions in an RST file - the\r\n\r\n`.. |alt| replace:: \\ |acquia-product:alt|\\\r\n.. _alt: /lift/exp-builder/install/\r\n\r\n.. |lplplink| replace:: \\ |acquia-product:lplp|\\\r\n.. _lplplink: /lift#packages\r\n\r\n.. |lplpolink| replace:: \\ |acquia-product:lplpo|\\\r\n.. _lplpolink: /lift#packages\r\n\r\n.. |liftapilink| replace:: \\ |acquia-product:liftapi|\\\r\n.. _liftapilink: /lift/omni/rest_api/`\r\n\r\nWhen these replacements are present in my file, vale doesn't work in VSC. If I take them out, everything's great.\r\n\r\nI went to the command line, and tried vale on the same file, which returns\r\n`vale lift/profile-mgr.rst\r\nexit status 1\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file.`\r\n\r\nHowever, if I try the same file on the command line while ignoring syntax \r\n`vale --ignore-syntax lift/profile-mgr.rst`, I get the expected results (all the vale warnings and errors)\r\n\r\nReplacements that aren't using substitutions work fine - this one works. \r\n``.. |salt| replace:: **salt**\r\n.. _salt: http://en.wikipedia.org/wiki/Salt_(cryptography)``\r\n\r\n\r\nNow, we're aware that this substitution method is uh, not ideal (at the time, we didn't know better.) If anyone else makes the mistake we did, I wanted to ensure there was a public record. We're now internally working on correcting our replacement directives :D",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/145"
   },
   {
    "Title": "Add new output format, `debug`, that exposes error handling",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/144"
   },
   {
    "Title": "Scope to specific heading levels in Markdown",
    "Body": "I would like to use Value to check the case of title's in a Markdown document. In my case all `h1` headings should be title case, while all those `h2` and below should be sentence case. But, I can't figure out how to write a rule that will target for example just the `h1` headings.'\r\n\r\nMy current rule looks like this:\r\n\r\n```yaml\r\nextends: capitalization\r\nmessage: \"'%s' should be in title case\"\r\nlevel: warning\r\nscope: heading\r\n# $title, $sentence, $lower, $upper, or a pattern.\r\nmatch: $title\r\n```\r\n\r\nIs it possible do something like `scope: heading.h1`. Or to write this rule in some other way that would make it target just h1, or just h2 headings?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/143"
   },
   {
    "Title": "v2.0.0 Roadmap",
    "Body": "I'd like to start thinking about the goals for the next major release of Vale, with an emphasis on improving format support and configuration handling. Feel free to comment or make suggestions.\r\n\r\n## New Features\r\n\r\n- [x] XML support (#114)\r\n    - [x] [DITA Open Toolkit](https://www.dita-ot.org/)\r\n    - [x] [`xsltproc`](http://xmlsoft.org/XSLT/xsltproc.html)\r\n- [x] Debug mode (#144)\r\n- [x] Expanded scopes: `code`, `bold`, `italic`, etc.\r\n\r\n\r\n## Bug Fixes\r\n\r\n- [x] #140 \r\n- [x] #119 \r\n\r\n## Docs\r\n\r\n- [x] #80 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/142"
   },
   {
    "Title": "Difficulty setting up `BlockIgnores`",
    "Body": "Windows 10, Vale v1.7.0 installed by downloading the MSI installer from the website.\r\n\r\nHaving got vale set up for `.rst` files, I'm now ready to try it on a non-standard format. Our query help files are written in a fairly simple XML format, and setting the format as equivalent to `html` works well. However, some of the files include a `\u003csample\u003e` section with code. I think my regular expression is correct (it's based on the example in the documentation) but the blocks aren't being ignored. If someone's able to help me work out what the problem is I'd be grateful.\r\n\r\nThe regular expression and an example are here: https://regex101.com/r/CEHfdk/1.\r\n\r\nMy `vale.ini` file contains:\r\n\r\n```\r\n[formats]\r\nqhelp = html\r\n\r\n# Specify how to test a particular type of files\r\n#-----------------------------------------------\r\n[*.{rst,qhelp}]\r\n\r\n# Ignore any inline sample code in qhelp files\r\nBlockIgnores = (?s) *(\u003csample [^\u003e]*\u003e.*?\u003c\\/?sample\u003e)\r\n```\r\nThe output I get is: ` 23:10  suggestion  Try to simplify this sentence.  Microsoft.Semicolon`. So clearly I've misconfigured something. Any suggestions?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/141"
   },
   {
    "Title": "Spelling picks up term within inline code style",
    "Body": "Windows 10, Vale v1.7.0 installed by downloading the MSI installer from the website.\r\n\r\nI have a restructured text file with the following sentence:\r\n\r\n```Alternatively, we could have implemented these three checks more verbosely using ``hasName``, ``getNumberOfParameters``, and ``getParameter(0).getType() instanceof TypeObject``.```\r\n\r\nThe Spelling rule that we're using gives an error for \"instanceof\" - which surprised me. Normally it's good at ignoring things in double backticks. The rule is defined as:\r\n\r\n```\r\n# This enables spell checking using the built-in US English dictionary\r\n\r\nextends: spelling\r\nmessage: \"Did you really mean '%s'?\"\r\nignorecase: true\r\nlevel: error\r\nignore: vale-styles/Semmle/ignore.txt\r\n```\r\nAny idea what the problem might be?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/140"
   },
   {
    "Title": "Support look ahead/behind expressions",
    "Body": "Hi, \r\n\r\nI'm trying to set up a substitution style. This word can be part of some text, or some rst syntax (label, links...).\r\n\r\nHere is the style:\r\n```yaml\r\nextends: substitution\r\nmessage: \"Use '%s' instead of '%s'\"\r\nignorecase: true\r\nlevel: error\r\nswap:\r\n  (?\u003c!\\S)table(?!\\S): \"cushion\"\r\n  \\btable\\b: \"chair\"\r\n```\r\nI'm interested in the `table -\u003e cushion` check.\r\n\r\nThen here is a test file:\r\n```rst\r\nThat's a non-table. That's a table-link.\r\n2 tables, no weird-table. Only 1 table should be replaced.\r\n```\r\n\r\nHere is the output that I get from Vale:\r\n\r\n```console\r\nsource/test.rst\r\n 1:14  error  Use 'chair' instead of 'table'  proj.Variables\r\n 1:30  error  Use 'chair' instead of 'table'  proj.Variables\r\n 2:20  error  Use 'chair' instead of 'table'  proj.Variables\r\n\r\n✖ 3 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nThese 3 results are correct, but I'm missing one. I should see \r\n`Use 'cushion' instead of 'table'  proj.Variables` on line 2.\r\n\r\nThis leads me to think that Vale does not support look behind/ahead expressions (the same regexp works fine on regexp101.com).\r\nIf it is the case, I would like to submit this as a feature request. \r\n\r\nThanks for the good work with this tool! \r\n\r\n- Homebrew\r\n- Vale 1.60\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/139"
   },
   {
    "Title": "Is it possible to override the MinAlertLevel from the CLI?",
    "Body": "I'd like the benefit of suggestions while writing, but only getting errors reported in Git reviews, without maintaining two different configuration files. Otherwise there's a danger that they get out of step. \r\n\r\nI had a look at the usage information, hoping that there was a flag for Vale so that you could override the `MinAlertLevel` when you run it from the command line. That way, you could have a single `.vale.ini` file which reported suggestions in your IDE, but when you ran automated tests on pull requests you could override this and just report errors.\r\n\r\nCan you think of a workaround for this use case?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/138"
   },
   {
    "Title": "Creating a style to check for line length of code blocks in Markdown files",
    "Body": "I want to check that code blocks are shorter than a given number of characters to avoid horizontal scrolling. It seems like Vale only reads the contents of comments inside code blocks and ignores the code itself.\r\n\r\nExample: For a maximum length of 10 the following lines should be flagged:\r\n```\r\n01234567890\r\n// 34567890\r\n```\r\nwhereas the following lines would be OK:\r\n```\r\n0123456789\r\n// 3456789\r\n```\r\nCan I use Vale for such a check?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/137"
   },
   {
    "Title": "Does consistency style support regex",
    "Body": "I am attempting to create a style that searches for inconsistent use of quote marks, i.e. mixing smart and non-smart in one document etc. Before I get to lost in regex, does the style (https://errata-ai.github.io/vale/styles/#consistency) even support regex pairs in the declaration?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/136"
   },
   {
    "Title": "Missing MSI for 1.5.0 release",
    "Body": "Not sure if it's a goreleaser thing, but it looks like the MSI didn't get built for this release\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/135"
   },
   {
    "Title": "Doesn't seem to work on Ubuntu",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n\r\nOS: Ubuntu 18.04\r\nInstall method: snap\r\nVersion: \"master\"\r\n\r\n```\r\n vadi   development  ~  Programs  Mudlet  mudlet  vale test.md\r\nERROR: ld.so: object 'libgtk3-nocsd.so.0' from LD_PRELOAD cannot be preloaded (failed to map segment from shared object): ignored.\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file.\r\n vadi   development  ~  Programs  Mudlet  mudlet  cat test.md \r\n## Getting Started\r\n\r\nRule 1: Don't start sentences with \"so\":\r\n\r\n\u003e So, this is an example sentence.\r\n\r\nRule 2: Don't start a sentence with \"there is\" or \"there are\":\r\n\r\n\u003e There are many ways to start a sentence.\r\n vadi   development  ~  Programs  Mudlet  mudlet  cat .vale.ini \r\n# This goes in a file named either `.vale.ini` or `_vale.ini`.\r\n#\r\n# Alerts are assigned a level of suggestion, warning, or error.\r\nMinAlertLevel = warning\r\n\r\n# We only want to lint Markdown files.\r\n[*.md]\r\n# Vale comes with three built-in styles: write-good, proselint, and Joblint.\r\n#\r\n# Here, we specify that we want to enable all rules in the \"write-good\" style.\r\nBasedOnStyles = write-good\r\n vadi   development  ~  Programs  Mudlet  mudlet  vale --version\r\nERROR: ld.so: object 'libgtk3-nocsd.so.0' from LD_PRELOAD cannot be preloaded (failed to map segment from shared object): ignored.\r\nvale version master\r\n vadi   development  ~  Programs  Mudlet  mudlet  \r\n```\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/134"
   },
   {
    "Title": "IgnoredScopes / SkippedScopes",
    "Body": "What values are supported for these variables?\r\nI'm writing LaTeX and it seems like \\label{name}'s get linted even though I've added label to IgnoredScopes.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/133"
   },
   {
    "Title": "line breaks in CLI output makes regex parsing difficult",
    "Body": "- Vale version: 1.4.2\r\nBecause the vs code vale extension does not allow passing command line arguments I tried writing a task with a corresponding problemMatcher.\r\nIn the process, I've found that the CLI output can break the regex parsing when a line exceeds a certain line width and by splitting the message into multiple lines.\r\n```\r\n\r\n /path/to/file.txt\r\n 17:22    warning     Consider removing 'possibly'    vale.Hedging        \r\n 126:55   warning     Consider removing 'several'     vale.Editorializing \r\n 129:33   error       'already existing' is           vale.Redundancy     \r\n                      redundant                                           \r\n 165:44   warning     Consider removing 'in general'  vale.Hedging        \r\n 216:30   warning     Consider removing 'several'     vale.Editorializing \r\n 387:13   suggestion  'TODO' left in text             vale.Annotations \r\n```\r\n\r\nIt would be very helpful if there was a possibility to overwrite the max line width so that it would not interfere with regex parsing.\r\n\r\nHere's my vs code task (works as long as the messages don't exceed max line width):\r\n\r\n```\r\n{\r\n\t\"version\": \"2.0.0\",\r\n\t\"tasks\": [\r\n\t\t{\r\n\t\t\t\"label\": \"run vale on file (CLI)\",\r\n\t\t\t\"group\": \"build\",\r\n\t\t\t\"type\": \"shell\",\r\n\t\t\t\"command\": \"vale\",\r\n\t\t\t\"args\": [\r\n\t\t\t\t\"--no-exit\",\r\n\t\t\t\t\"--output\",\r\n\t\t\t\t\"CLI\",\r\n\t\t\t\t\"${file}\",\r\n\t\t\t],\r\n\t\t\t\"problemMatcher\":\r\n\t\t\t{\r\n\t\t\t\t\"fileLocation\": \"absolute\",\r\n\t\t\t\t\"source\": \"vale\",\r\n\t\t\t\t\"applyTo\": \"allDocuments\",\r\n\t\t\t\t\"pattern\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"regexp\": \"^\\\\s+([^\\\\s].*)$\",\r\n\t\t\t\t\t\t\"file\": 1,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(error|warning|info|suggestion)\\\\s+(.*?)\\\\s\\\\s+(.*)$\",\r\n\t\t\t\t\t\t\"line\": 1,\r\n\t\t\t\t\t\t\"column\": 2,\r\n\t\t\t\t\t\t\"severity\": 3,\r\n\t\t\t\t\t\t\"message\": 4,\r\n\t\t\t\t\t\t\"code\": 5,\r\n\t\t\t\t\t\t\"loop\": true\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t\"presentation\": {\r\n\t\t\t\t\"echo\": true,\r\n\t\t\t\t\"reveal\": \"always\",\r\n\t\t\t\t\"focus\": false,\r\n\t\t\t\t\"panel\": \"shared\",\r\n\t\t\t\t\"showReuseMessage\": true,\r\n\t\t\t\t\"clear\": true,\r\n\t\t\t\t\"revealProblems\": \"onProblem\",\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nIf there was a way to set or disable the line width via command line argument it would render a separately maintained vs code extension pretty much obsolete.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/132"
   },
   {
    "Title": "ignore certain files",
    "Body": "Is it possible to ignore certain files/folders and file types in the .vale file?\r\nI would like to ignore .sty or .bst files in my LaTeX project and limit linting to specific subdirectories.\r\nSomething like .gitignore would be very powerful, could as well be part of the .vale file.\r\nexample usage:\r\n```\r\n\r\nIgnorePaths: (relative to .vale file)\r\n*.bst\r\n*_partial_name.sty\r\nresearch/*\r\nnotes/*.txt\r\n```\r\n\r\n- OS: Linux Mint\r\n- Install method: direct download + vs code extension\r\n- Vale version: 1.4.2\r\n\r\nThanks!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/131"
   },
   {
    "Title": "No Results from write-good.Eprime",
    "Body": "When I run `vale test.txt` against [the example text file](https://github.com/errata-ai/vale/blob/master/fixtures/styles/write-good/test.txt), I don't see any results from `write-good.E-Prime` even though I do have it configured in my `.ini` file, and I can confirm that when I see it listed by `vale ls`. \r\n\r\nThe expected behavior I think would be for a warning about the \"is\" in the first line of that file.\r\n\r\n- OS: Ubuntu\r\n- Install method: Manual\r\n- Vale version: 1.4.2\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/130"
   },
   {
    "Title": "Error with consistency style rule?",
    "Body": "I have been testing creating a new consistency check, and couldn't get it to work, so thought I'd just try the example rule from the [docs](https://errata-ai.github.io/vale/styles/#consistency).\r\n\r\nBut that doesn't trigger either. Here's my test markdown file:\r\n\r\n```\r\n# Test\r\n\r\nThe centre issue is that everything is going to the center.\r\n```\r\n\r\nIs the example config wrong, or something else? Latest vale, installed with Homebrew, running on a mac. Tried with VSC package and command line.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/129"
   },
   {
    "Title": "Docker image errors with \"no such file or directory\"",
    "Body": "If one runs the copy usage command on: https://hub.docker.com/r/jdkato/vale/\r\n\r\nIt simply errors with:\r\n\r\n```\r\ndocker run --rm -v $(pwd)/styles:/styles \\\r\n              --rm -v $(pwd)/fixtures/styles/demo:/docs \\\r\n              -w /docs \\\r\n              jdkato/vale .\r\nstandard_init_linux.go:207: exec user process caused \"no such file or directory\"\r\n```\r\n\r\nSame with any other command:\r\n\r\n```\r\ndocker run --rm -it jdkato/vale:latest /vale\r\nstandard_init_linux.go:207: exec user process caused \"no such file or directory\"\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/128"
   },
   {
    "Title": "Add suggestions to spellcheck",
    "Body": "The spellchecking functionality in Vale can only log that a word isn't known, but it would be helpful if it could suggest possible alternatives.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/127"
   },
   {
    "Title": "False positive double word in code fence block",
    "Body": "Not sure where this one is coming from, but it's flagging https://github.com/MicrosoftDocs/vsts-docs/blame/67fcf884eb51fb8ce58e4bd68875bd2243a1711f/docs/pipelines/process/expressions.md#L130\r\n```\r\ndocs/pipelines/process/expressions.md\r\n 130:1  error  'variables' is repeated!  vale.Repetition \r\n```\r\nThere is no duplicate word combo, even with odd whitespace between.\r\nRun on 1.4.0 on OSX",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/126"
   },
   {
    "Title": "Allow in-place edits for some style types",
    "Body": "First off, thanks so much for the amazing tool!\r\n\r\nI feel that the title is self-explanatory. Having an in-place edit mode would allow a plugin like [`danger-suggester`](https://github.com/r7kamura/danger-suggester) to work :)\r\n\r\nAt first guess, this could include `substitution` and `capitalization` types.\r\n\r\nCurious to hear whather you'd be open to accepting such a feature!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/125"
   },
   {
    "Title": "GitHub Actions \u0026 Docker Image",
    "Body": "Hello,\r\nI am wondering if the Docker Image for Vale has been used in GitHub Actions at all in conjunction with GitHub Checks. To give PRs submitted to docs repos on GitHub, contextual error messages inline of the PR/diff view of a GitHub PR.\r\n\r\nCurious to know if this has been done before or not.\r\n\r\nThanks,\r\nWarren :)\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/124"
   },
   {
    "Title": "Duplicate words missed inside code fences and frontmatter in Markdown",
    "Body": "Noticed this in the 1.4.0 on OSX. Can't recall if this worked correctly before\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/123"
   },
   {
    "Title": "Duplicate words being missed in YAML frontmatter of Markdown files",
    "Body": "I think it might have done this in a previous release, but I'm not seeing duplicates in 1.4.0 on OSX currently",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/122"
   },
   {
    "Title": "docs: Fix a broken link",
    "Body": "This link had a double set of parentheses which stopped it working correctly.\r\n\r\nI've read the Contributing guidelines and hope that I'm raising this with the appropriate commit comments etc. Please do correct me if I've made any errors.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/121"
   },
   {
    "Title": "Use Go 1.11 and Modules",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/120"
   },
   {
    "Title": "Vale should ignore quoted text in RST",
    "Body": "- OS (e.g., macOS, Windows, Linux, etc.): Linux\r\n- Install method (e.g., Go, Homebrew, direct download, etc.): go get\r\n- Vale version (the result of `vale -v`): vale version master\r\n\r\nI have some text in a quote block:\r\n```rst\r\n  | I have a very large collection\r\n```\r\n\r\nI have added the following configuration:\r\n```\r\nSkippedScopes = script, style, pre, figure, blockquote\r\n```\r\n\r\nBut vale still complains about the use of very.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/119"
   },
   {
    "Title": "Broken link in readme: \"enforcing a particular heading style\"",
    "Body": "This link is broken (it points to https://github.com/errata-ai/Microsoft/blob/master/src/18F/Headings.yml).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/118"
   },
   {
    "Title": "Creating a style that checks YAML tags in a markdown file.",
    "Body": "\u003c!-- If relevant, please consider including the following information:\r\n\r\n- OS (e.g., macOS, Windows, Linux, etc.)\r\n- Install method (e.g., Go, Homebrew, direct download, etc.)\r\n- Vale version (the result of `vale -v`)\r\n\r\nThanks! --\u003e\r\nHi there!\r\n\r\nI am quite new at using Vale, so this may be a stupid question. My issue is that I have several markdown files that contain YAML at the top, something like this:\r\n\r\n```\r\n---\r\nyamltag: true\r\n---\r\n# Heading here\r\n```\r\n\r\nI noticed though when I wrote a new style it would ignore the data wrapped inside '---'. \r\n\r\nI found this issue: https://github.com/errata-ai/vale/issues/24 and it sounds like it should be able to parse the lines?\r\n\r\nMy style .yml file looks like this:\r\n```\r\nextends: existence\r\nmessage: \"No yamltag has been set\"\r\nlevel: error\r\ntokens:\r\n  - yamltag\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/117"
   },
   {
    "Title": "Rules inspired by LanguageTool",
    "Body": "Your [Microsoft](https://github.com/errata-ai/Microsoft) repository includes a handful of rules. What about including rules what LanguageTool uses? It could further expand the power of vale.\r\nThe attached screenshot is an example the usefulness of LanguageTool (I used it as a Firefox plugin).\r\n![example](https://user-images.githubusercontent.com/12742890/55249065-804c0000-524b-11e9-89a6-bf3f41e8d4a4.PNG)\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/116"
   },
   {
    "Title": "BlockIgnores not working for .mdx files",
    "Body": "I can't get `BlockIgnores` to work. I want to ignore text in code blocks. I verified the regex on https://regex101.com/r/prulD0/2\r\n\r\n**My `.mdx` file.**\r\n```markdown\r\n---\r\ntitle: \"Doc title\"\r\ndescription: \"Title description.\"\r\ntags: [\"tag1\", \"tag2\"]\r\npublished: true\r\nfeatured: false\r\n---\r\n\r\nimport customComponent from \"components/customComponent\";\r\nimport customComponent2 from \"components/customComponent2\";\r\n\r\nCustomers interact with products using different input methods: keyboard, mouse, touch, voice, and more. So use generic verbs that work with any input method. Don't use input-specific verbs, such as click or swipe. Instead, use the verbs listed here.\r\n\r\nContent on the first screen (also called above the fold) is the most likely to be read. Many readers won’t scroll further without a compelling reason. So as always, keep it short, and lead with what’s most important to the customer. Keep in mind that what appears above the fold varies by device and screen resolution.\r\n\r\nNumerous studies have shown that readers look at specific areas of a page first. In left-to-right languages, people read in an F shape, giving the most attention to the upper-left corner of a page. Put your most important information there. Or try placing an offer or a Buy or Download button there. If the navigation is on the left, put your most important information in the upper-left corner of the text pane.\r\n\r\n1. Run the `install` script to configure XYZ, \r\n\r\n    ```bash\r\n    unzip -d foldername filename.zip\r\n\r\n    ./foldername/subfolder/install.sh\r\n    ```\r\n2. Run second command\r\n\t```bash\r\n\t\tcommand -i more | grep something\r\n\t```\r\n```\r\n\r\n**Vale config**\r\n```yaml\r\n\r\n# Example Vale config file (`.vale.ini` or `_vale.ini`)\r\n\r\n# Core settings\r\nStylesPath = vale\r\n\r\n# The minimum alert level to display (suggestion, warning, or error).\r\n#\r\n# CI builds will only fail on error-level alerts.\r\nMinAlertLevel = warning\r\n\r\n# Global settings (applied to every syntax)\r\n[*]\r\n# List of styles to load\r\nBasedOnStyles = Microsoft\r\n# Style.Rule = {YES, NO} to enable or disable a specific rule\r\n# vale.Editorializing = YES\r\n# You can also change the level associated with a rule\r\n# vale.Hedging = error\r\nBlockIgnores = (?s) *(\\x60\\x60\\x60[a-z]*\\n[\\s\\S]*?\\x60\\x60\\x60)\r\n\r\n# Syntax-specific settings\r\n# These overwrite any conflicting global settings\r\n# [*.{mdx}]\r\n```\r\n\r\n- OS `Ubuntu 18.04 on Windows`\r\n- Install method `Go`\r\n- Vale version `master`\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/115"
   },
   {
    "Title": "Support lint of XML files (configurable)",
    "Body": "RFE to support checking of DITA and DocBook XML files. Similar to HTML parsing, should be able to configure certain elements to be ignored (like can be done for HTML script, style, pre, code, and tt tags).\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/114"
   },
   {
    "Title": "configuration cached",
    "Body": "I recently upgraded Vale to v1.3.2 on Mac 64-bit.\r\n\r\nAs part of the upgrade, I changed the location where I put my styles files.\r\n\r\nI updated the StylesPath in my .vale.ini file, but when running vale, it still tries to use the old path (and doesn't use the new path).\r\n\r\nAre the settings cached somewhere that I can clear?\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/113"
   },
   {
    "Title": "Cannot build on alpine with clang",
    "Body": "- OS: Alpine Linux\r\n- Install method: go get in docker\r\n- Vale version: building head ( aff8077 )\r\n\r\nSetting requirements for build\r\n```\r\nRUN apk --no-cache add clang libc-dev binutils\r\nENV CC=clang\r\nENV CXX=clang++\r\n```\r\n\r\nReturns\r\n\r\n```\r\n \u003e [godeps 4/9] RUN go get -u github.com/errata-ai/vale:\r\n#24 7.622 # runtime/cgo\r\n#24 7.622 /usr/bin/ld: cannot find crtbeginS.o: No such file or directory\r\n#24 7.622 /usr/bin/ld: cannot find -lgcc\r\n#24 7.622 /usr/bin/ld: cannot find -lgcc_s\r\n#24 7.622 /usr/bin/ld: cannot find -lgcc\r\n#24 7.622 /usr/bin/ld: cannot find -lgcc_s\r\n#24 7.622 /usr/bin/ld: cannot find crtendS.o: No such file or directory\r\n```\r\n\r\nBut just switching to gcc fixes this\r\n\r\n```\r\nRUN apk --no-cache add gcc libc-dev binutils\r\n```\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/112"
   },
   {
    "Title": "fix: broken links",
    "Body": "This PR fixes two broken links.\r\nThe links are pointing now to https://github.com/testthedocs/vale-styles/tree/master/18F.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/111"
   },
   {
    "Title": "New extension point: sequence ",
    "Body": "I'm thinking about adding a new `sequence` extension point that serves two purposes:\r\n\r\n1. It should make up for Go's lack of support for lookarounds in patterns.\r\n2. It should incorporate POS tags, allowing for more grammar-focused rules.\r\n\r\nHere's what I'm thinking so far:\r\n\r\n```yml\r\n# Basic case: \r\n#\r\n# This will warn about using 'his' unless it's followed by 'or her'\r\n# (and vice versa).\r\nextends: sequence\r\nmessage: \"Don't use '%s'\"\r\n# How to split the tokens:\r\nsplit: '  ' \r\ntokens: \r\n  - \r\n    pattern: (?:his|her)\r\n    match: true\r\n    capture: true # Will be passed to `message`\r\n  - \r\n    pattern: or\r\n    match: false\r\n  - \r\n    pattern: (?:his|her)\r\n    match: false\r\n```\r\n\r\n```yml\r\n# POS case: This will match the word 'this', if it's followed by anything token \r\n# with POS != 'NN'.\r\nmessage: \"Don't use '%s'\"\r\nextends: sequence\r\n# How to split the tokens:\r\nsplit: '  ' \r\ntokens: \r\n  - pattern: him\r\n    match: true\r\n\r\n  - pos: NN\r\n    match: false\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/110"
   },
   {
    "Title": "Symlink the ini and StylePath behaviour",
    "Body": "Hello and thanks for this awesome tool.\r\n\r\nI'm trying to set up Vale in a large repo.\r\nSince I want it to work in any file I have opened in VSCode, I wanted to put the `ini` file in $HOME. \r\nI cannot do that because I want the `ini` file to be in my repo. So I symlinked it in `$HOME`.\r\n\r\nIn the `styles` sub-folder of where the `ini` file is, I have my styles:\r\n```\r\n.vale.ini\r\n└── styles\r\n        ├── mystyles\r\n        └── write-good\r\n```\r\n\r\nIn my config file I use:\r\n```\r\nStylesPath = styles\r\n...\r\n```\r\n\r\nThe issue is that when I run `vale ls-config`, `StylesPath` is set to `~/styles`. So it's relative to the symlink instead of being relative to the location of the real `ini` file.\r\n\r\nThen I also symlinked the `styles` folder, but still, my styles do not seem to be used.\r\n\r\nAny idea what I might be doing wrong?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/109"
   },
   {
    "Title": "Add link to Neomake support in Vim as well",
    "Body": "Available in https://github.com/neomake/neomake/blob/master/autoload/neomake/makers/ft/markdown.vim.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/108"
   },
   {
    "Title": "Clarifying spelling inheritance?",
    "Body": "When building out our tests, I ran into some issues with spelling ignore files that may or may not be a bug, but it didn't work the way I expected.\r\n\r\nWe have multiple styles that we layer atop each other, so we can make clear whether a rule comes from the Microsoft style guide, or our additions + extensions to the Microsoft guide. As a result, I created a Spelling.yml file for each style, with an ignore file for each, expecting that the list of ignored words would be the total of ignore-file-A + ignore-file-B. \r\n\r\nWhen we implemented the spelling tests, though, only the words in ignore-file-B were skipped during spellcheck. \r\n\r\nIs this expected behavior or did I misconfigure the .yml files in some way?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/107"
   },
   {
    "Title": "Rename DenzienLabels.yml to DenizenLabels.yml",
    "Body": "Typo in filename",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/106"
   },
   {
    "Title": "Vale finds issues outside of the specified scope",
    "Body": "OS: Windows 10\r\nInstalled from msi package\r\nversion 1.3.0.\r\n\r\nHi!\r\nI want to display warnings for links with the `here` text. The new version (1.3.0) supports applying rules for the **links** scope.\r\n\r\nThe problem is that vale may display error message in the wrong scope.\r\n\r\nMy rule code:\r\n```\r\nextends: existence\r\nmessage: \"Do not name links like '%s'.\"\r\nlevel: warning\r\nignorecase: true\r\nscope: link\r\ntokens:\r\n  - here\r\n```\r\n\r\nMy test text:\r\n```\r\nWrite us here: email@example.com. Click [here](https://www.example.com/) for more information.\r\n```\r\n\r\nThe result:\r\n![image](https://user-images.githubusercontent.com/20209898/51487024-48d85780-1db3-11e9-9e40-0a06ad86e9bb.png)\r\n\r\nWhen the sentences are separated with a new line, everything works correctly:\r\n![image](https://user-images.githubusercontent.com/20209898/51487167-ab315800-1db3-11e9-98ea-1d7840900c2d.png)\r\n\r\nPS. I could reproduce the issue with your [test example](https://github.com/errata-ai/vale/commit/4f962181bd5c96b9f185ad188067f315d70ff8ef#diff-b7caedea2d83a7b93024df87a3e5a886R5) by changing the sentence order:\r\n\r\n![image](https://user-images.githubusercontent.com/20209898/51487753-dec0b200-1db4-11e9-9929-ee87635657ef.png)\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/105"
   },
   {
    "Title": "Passing rst ignore comments through to output",
    "Body": "How much work would be required on the docutils end to pass the `..vale off` comments through to the output as `\u003c!-- vale off --\u003e` ? ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/104"
   },
   {
    "Title": "Clarify docs on ignoring content",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/103"
   },
   {
    "Title": "Ignore Markdown \"quoted\" text",
    "Body": "When linting documentation, I notice that quotes (paragraphs preceded by `\u003e`) are not ignored. For instance:\r\n\r\n\u003e Mature frameworks usually incorporate several design patterns. The patterns help make the framework’s architecture suitable to many different applications without redesign. An added benefit comes when the framework is documented with the design patterns it uses [BJ94]. People who know the patterns gain insight into the framework faster. Even people who don’t know the patterns can benefit from the structure they lend to the framework’s documentation. Enhancing documentation is important for all types of software, but it’s particularly important for frameworks. Frameworks often pose a steep learning curve that must be overcome before they’re useful. While design patterns might not flatten the learning curve entirely, they can make it less steep by making key elements of the framework’s design more explicit.\r\n\r\nWill yield (with my rules):\r\n\r\n```\r\n 46:659  warning  Craft sentences at 25 words or  documentation.SentenceLength\r\n                  fewer, whenever possible.\r\n 46:766  warning  Avoid using 'key' (unless it    documentation.Clarity\r\n                  unlocks something).\r\n```\r\n\r\nI don't actually want to address these warnings since it would involve modifying a third-party quote. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/102"
   },
   {
    "Title": "TokenIgnores invalid match",
    "Body": "I'm attempting to use this regex to disable checks on a specific line after I have reviewed the displayed warning/error: `TokenIgnores = (.*\u003c--!vale-disable--\u003e[\\n\\r])`\r\n\r\nThe expected behavior is to disable checks for the specific line that ends with the string `\u003c--!vale-disable--\u003e`.\r\n\r\nI am seeing inconsistent behavior in which errors are disabled.\r\n\r\nFor example, in this case the warning on the second line is disabled instead of the first line:\r\n```\r\n* Complete career objective statement \u003c--!vale-disable--\u003e\r\n    * Briefly describe your eventual career objective.\r\n    * So the cat was stolen.\r\n```\r\n\r\nIn this case all the warnings/errors are disabled:\r\n```\r\n* Complete career objective statement \u003c--!vale-disable--\u003e\r\n\r\n\r\n    * Briefly describe your eventual career objective.\r\n    * So the cat was stolen.\r\n```\r\n\r\nHere, the error is disabled on the correct line:\r\n```\r\n* Complete career objective statement\r\n    * Briefly describe your eventual career objective.\r\n    * So the cat was stolen. \u003c--!vale-disable--\u003e\r\n    * Briefly describe your eventual career objective.\r\n```\r\n\r\nThanks!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/101"
   },
   {
    "Title": "Add exit code/error when no configuration is loaded",
    "Body": "Current behaviour returns 0 files and no sign of error when config file is not found. See last reply in: #99 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/100"
   },
   {
    "Title": "Doesn't read file or stdin",
    "Body": "I am running Manjaro KDE, up-to-date as of January 7, 2019.\r\n\r\nVale version:  1.2.6\r\n\r\nI've have tried the release binary, AUR, and compiling from source. Passing files or text into vale returns only the typical 0 errors, 0 warnings and 0 suggestions in 0 Files (or stdin)\r\n\r\nI have not setup a config. Is this required? No error messages. I have attempted to run on README.md files, latex files, plain text files and org files. \r\n\r\nAny help is appreciated.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/99"
   },
   {
    "Title": "Support multiple Hunspell dictionaries",
    "Body": "Hunspell supports multiple dictionaries: a word is \"correct\" if it appears in one of the specified dictionaries.\r\n\r\nI've been using Hunspell for years, and have a number of custom enterprise-specific dictionaries that I use in addition to the standard `en_US-large` dictionary. My custom dictionaries make extensive use of their associated affix configuration.\r\n\r\nIt would be great if Vale could support multiple dictionaries. The `ignore` facility can work, but I need to expand all of the affix permutations to match the spell results I currently get from Hunspell.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/98"
   },
   {
    "Title": "Browser Integration",
    "Body": "[Continuing #10]\r\n\r\nThe basic idea here, as far as I see it, is to expose Vale's functionality through an API that we call in the browser extensions. This is similar to, for example, How [LanguageTool](https://languagetool.org/#firefox_chrome) implements their browser extensions.\r\n\r\nThat said, the challenge with Vale is figuring out how to handle its configuration options when running it remotely. My initial thought is that we should provide a selection of pre-made styles that users can choose from\u0026mdash;i.e., we wouldn't accept external customizations (with the possible exception of a spelling vocabulary file maintained in the extensions in-browser config).\r\n\r\n- [ ] Chrome\r\n- [ ] Firefox\r\n- [ ] Safari",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/97"
   },
   {
    "Title": "[Question] Customizing vale to handle java swagger core annotations",
    "Body": "I am working on an API specification, which is generated using swagger core annotations (https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X) in `java` files.\r\n\r\nIf I want to use vale for linting these annotations in `java` files, would following modifications be sufficient?\r\nin file `vale/core/format.go`: \r\n- creating a new regex for `blockstart` and `blockend` \r\n- updating `java` entry in `FormatByExtension` to handle those as new regex as comments.\r\n\r\nsample `java` file:\r\n```\r\npublic class ABCD{\r\n    @ApiModelProperty(value = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam mi nibh, malesuada sit amet viverra sit amet, rhoncus non massa. Pellentesque fringilla eros dolor.\")\r\n    private final Integer idABCD;\r\n\r\n    @ApiModelProperty(value = \"malesuada hendrerit. Vestibulum vel purus auctor arcu sodales vehicula in accumsan.\")\r\n    private final CD cd;\r\n\r\n    @ApiModelProperty(value = \"Praesent cursus sed ex at viverra. Nullam at libero est. Proin ut orci mattis dui tincidunt tincidunt. Morbi fringilla porttitor est, nec venenatis elit rutrum eget.\\n\" +\r\n            \"- Integer quis diam et dolor malesuada hendrerit. Vestibulum vel purus auctor arcu sodales vehicula in accumsan leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse id purus eu neque consequat consequat eu eget tellus. \" +\r\n            \"Nullam viverra eros rhoncus risus volutpat viverra. Vestibulum non neque et orci tincidunt porta at sed risus. In consequat congue neque sed mattis. \")\r\n    private final Integer XYZ;\r\n\r\n...\r\n\r\n```\r\n\r\nOr will it require more than that?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/96"
   },
   {
    "Title": "False positive for XML element with false value",
    "Body": "In https://github.com/MicrosoftDocs/windows-itpro-docs/blob/master/windows/client-management/mdm/healthattestation-csp.md\r\nIf flags one of the elements as repeated, but there is a value of false inside the element\r\n```\r\nwindows/client-management/mdm/healthattestation-csp.md\r\n 1141:3  error  'OSKernelDebuggingEnabled' is   vale.Repetition\r\n                repeated!\r\n```\r\n```xml\r\n     \u003cBootDebuggingEnabled\u003efalse\u003c/BootDebuggingEnabled\u003e\r\n     \u003cOSKernelDebuggingEnabled\u003efalse\u003c/OSKernelDebuggingEnabled\u003e\r\n     \u003cCodeIntegrityEnabled\u003etrue\u003c/CodeIntegrityEnabled\u003e\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/95"
   },
   {
    "Title": "StylesPath in config file doesn't expand user directory / $HOME",
    "Body": "Hey, I just struggled a bit with setting up my own style for a project I'm working on at the moment.\r\nOne problem that arose was that vale doesn't seem to expand either, `~/` nor `$HOME` to the users home directory. Since I synchronize my config files over several machines it would be very much appreciated if you could add this functionality.\r\n\r\nOn a side note: another problem was that vale only accepts `*.yml` but not `*.yaml` as an extension. Maybe this should be noted explicitly in the docs somewhere? Also, vale doesn't seem to follow symlinks in the StylesPath. (I'm not used to opening issues, should these points be put in seperate issues?)\r\n\r\nThanks in advance  :+1:  and sorry if I missed this in the docs, I scanned them several times but couln't find any allusion to this behaviour.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/94"
   },
   {
    "Title": "Bug: typo \"lesbiens\" in LGBTTerms rule file",
    "Body": "Expected: \"lesbians\"\r\n\r\nFound: \"lesbiens\"\r\n\r\nhttps://github.com/errata-ai/vale/blob/64d9f922d8612685e9b06bac8c46fed93c955deb/rule/proselint/LGBTTerms.yml#L8",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/93"
   },
   {
    "Title": "Including and excluding ignore files",
    "Body": "OK, here's my next issue / thought. And to recap what I'm trying to create.\r\n\r\nI have three spell check configurations with lists of ignore words for certain domains, let's say:\r\n\r\n- DevOps terms\r\n- Blockchain terms\r\n- Tech Writing terms\r\n\r\nAnd each of these YAML config files connect to their own ignore.txt file. In my mind this offers modularity as people can enable and disable the checks relative to their domain, but have a good resource for starting checks to use.\r\n\r\nNow, this all works, but let's take for example the following nonsense text:\r\n\r\n```\r\nCan Ethereum run in a rkt container\r\n```\r\n\r\n`Ethereum` is defined as a correct word in the ignore list for Blockchain, and `rkt` for DevOps, but they don't recognise each others words, so of course, each other test picks up the word as incorrect.\r\n\r\nNow I'm not sure what can be done about this, if there's a way to configure vale to make this work, or if it goes against intentions somewhat.\r\n\r\nI was wondering if there was a way to use the `filters` property to filter terms in the other ignore lists? Or maybe the best approach is to instead switch to using custom aff or dic files? Or a different approach?\r\n\r\nThanks again!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/92"
   },
   {
    "Title": "Spell checking `ignore`",
    "Body": "I've never been very sure how to get the `ignore` parameter to work correctly, as it seems to look for the file relative to file you are checking, not the _.vale.ini_ file, or any yaml checks.\r\n\r\nIdeally (and for portability among teams etc) I feel it should check for the file relative to the configuration files, or maybe using some sort of variable like `$VALE_CONFIG_PATH` etc. Does that make sense? Basically at the moment it seems I have to hard code the path to an ignore file, or keep all the ignore files in my project directories. Which makes sense to a point, but doesn't allow for easy config sharing.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/91"
   },
   {
    "Title": "Make write-good.Passive message more meaningful",
    "Body": "There was no mention of passive or active voice in the original message. I think my version is a little more helpful.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/90"
   },
   {
    "Title": "Fix typo convierge -\u003e concierge",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/89"
   },
   {
    "Title": "Exclude paths that are in .gitignore automatically",
    "Body": "I was trying to figure out the correct way to exclude results from packages like `node_modules`. I didn't figure out the syntax yet, but I figured that using the `.gitignore` paths to exclude results would make sense since the author has already indicated they are not sources.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/88"
   },
   {
    "Title": "Hanging on large text file",
    "Body": "After installing 1.0.5, I found that it would hang trying to scan this file https://github.com/w3c/html/blob/master/diff/html5to51diff.html\r\nIt is an 11.5MB text file, so it is a little unreasonable.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/87"
   },
   {
    "Title": "Docker image",
    "Body": "It'd be neat if there was an official Docker image on dockerhub for Vale. :)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/86"
   },
   {
    "Title": "CONTRIBUTING.md points to missing \"styles/Joblint\" folder",
    "Body": "https://github.com/errata-ai/vale/blame/master/.github/CONTRIBUTING.md#L106",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/85"
   },
   {
    "Title": "Config file globs vs CLI glob",
    "Body": "Think this might just be a docs issue, but the config file setting like from the README\r\n```ini\r\n# Only Markdown and .txt files; change to whatever you're using.\r\n[*.{md,txt}]\r\n# List of styles to load.\r\nBasedOnStyles = proselint, write-good, Joblint\r\n# Style.Rule = {YES, NO, suggestion, warning, error} to\r\n# enable/disable a rule or change its level.\r\nwrite-good.E-Prime = NO\r\n```\r\nwill test all files rather than just MD/TXT. I think the docs for config https://errata.ai/vale/config/ hints that this isn't the same as `vale --glob=*.{md,txt} .` but maybe you can confirm",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/84"
   },
   {
    "Title": "Please release 1.0.4",
    "Body": "I just spent about an hour trying to figure out why my configurations were not working only to discover that this commit 3e118bf5a70928a359adbb9b5fa48ca8b468df1f was not present in v1.0.3 (that I got via Homebrew).\r\n\r\nPlease release v1.0.4 just to prevent this kind of frustration for others.\r\n\r\nThanks!\r\n\r\n**details**\r\n\r\nI kept trying to configure my global setup but `vale dc` wasn't showing anything.  I tried all kinds of work arounds, fixes, etc.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/83"
   },
   {
    "Title": "Not finding Styles directory on Windows with latest version(s)",
    "Body": "I have the following set-up on Windows (64bit). I have downloaded the 1.0.3 Windows 64 exe (without installer) and have it in a directory setup like this:\r\n\r\n`/vale.exe`\r\n`/_vale.ini`\r\n`/Styles/Joblint/*.yml`\r\n\r\nIn my `_vale.ini` I have the styles path configured like this:\r\n\r\n`StylesPath = \"Styles\"`\r\n\r\nIn the previous version I was using, which was **v0.11.2**, then this worked. If I type `vale dc` I would get:\r\n\r\n` \"StylesPath\": \"C:\\\\Projects\\\\Vale\\\\Styles\"`\r\n\r\nVale picked up the Styles folder fine.\r\n\r\nBut in all the **V1.0.x** releases the `StylesPath` is not read. It is empty:\r\n\r\n` \"StylesPath\": \"\"`\r\n\r\nI have custom .yml files in the `C:\\Projects\\Vale\\Styles\\Joblint\\` folder that are not read in latest version, but where picked up in the older version. If I swap back to the older .exe it all works and the custom styles are picked up.\r\n\r\nCould you shed any light on this? For deployment reasons I really don't want to have to have the full path but use a relative one. How do I get Vale to read the Styles path as a relative path to the .exe and .ini ? Thanks.\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/82"
   },
   {
    "Title": "Configuration not loaded on Ubuntu 18.04",
    "Body": "Hi, this tool looks great! \r\n\r\nJust trying to get it to run, but not getting anywhere: no matter how I configure vale, I always get the same output:\r\n\r\n```\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nInstalled on Ubuntu 18.04 via snap as per the getting started instructions.\r\nOne should be able to use the styles 'vale', 'proselint', and 'write-good' without specifying a StylePath nor downloading/installing anything else, correct?\r\n\r\nI've simplified the .vale file as much as possible, and put it inside the same directory as my markdown file:\r\n```\r\n# Global settings (applied to every syntax)\r\n[*]\r\n\r\n# List of styles to load\r\nBasedOnStyles = vale\r\n```\r\nthe output of running ```vale myfile.md``` is always:\r\n```\r\n✔ 0 errors, 0 warnings and 0 suggestions in 1 file.\r\n```\r\n\r\nThe file contains a lot of text content, and I even introduced grammar errors, spelling errors, etc. I've tried with various markdown files, tried using proselint, and so on... whatever I do, I always get the same output.\r\n\r\nIs there any way to debug what is going on? It feels like whatever I put in the .vale file is always ignored...\r\n\r\nThanks.\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/81"
   },
   {
    "Title": "Improve our documentation",
    "Body": "We've been through a number of iterations on our documentation (hosted at a few different places) but, now that we've reached a stable release, I think it's time to stop moving around.\r\n\r\nThe final resting place for our docs will be at https://errata-ai.github.io/vale/, with the actual source included in this repo ([`docs/`](https://github.com/errata-ai/vale/tree/master/docs)). There's a lot that could be improved, but I'll start by listing topics that aren't documented (well) at all:\r\n\r\n- [x] The CLI arguments (and when to use them) [44aed256d18f382b8168aee5d38a32cb1043f61b].\r\n- [x] Vale's built-in rules\u0026mdash;e.g., [`Repetition`](https://github.com/errata-ai/vale/blob/master/rule/vale/Repetition.yml).\r\n- [x]  The [contributing guide](https://github.com/errata-ai/vale/blob/master/.github/CONTRIBUTING.md) (outdated) [44cc1ee803268284f154805baa3d03acf55b5040].\r\n- [ ] Discuss using Vale with languages other than English.\r\n- [x] Discuss using Vale with unsupported file formats.\r\n- [x] Discuss the performance tradeoffs of various features.\r\n- [ ] The [`pos` key](https://github.com/errata-ai/vale/blob/master/check/defintions.go#L54).\r\n- [x] Rule [templates](https://github.com/errata-ai/vale/blob/master/check/templates.go) (outdated) [47ed93b57ea4a4b6b0c30c8247aa75a4ac2bbd33].\r\n- [x] Using Vale and Docker\r\n- [x] Improve the [config](https://errata-ai.github.io/vale/config/) docs [e2b3737d974726a0ddcf09410d044947d5c223df; WIP]\r\n- [x] Create a Quickstart section [859a4ebba4873bd32214119323d1b90718187043]",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/80"
   },
   {
    "Title": "rst2html.py messages after update to 1.0.1",
    "Body": "This may have existed before and I just hadn't run it on the particular project\r\n```console\r\nvale .\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\nfork/exec /usr/local/bin/rst2html.py: no such file or directory\r\n```\r\nIt does go on to lint other files, it just seems to run into an issue/warnings. The .vale file is only looking for MD files, so I'm not sure why it's running the rst conversion\r\n```\r\n# This goes in a file named either `.vale` or `_vale`.\r\n\r\nStylesPath = path/to/some/directory\r\nMinAlertLevel = error # suggestion, warning or error\r\n\r\n[*.{md}] # Only Markdown and .txt files\r\n# List of styles to load\r\nBasedOnStyles = vale\r\n# Style.Rule = {YES, NO, suggestion, warning, error} to\r\n# enable/disable a rule or change its level.\r\nvale.Editorializing = NO\r\nvale.Redundancy = NO\r\nvale.Uncomparables = NO\r\n```\r\n\r\nVale 1.0.1 was updated through Brew",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/79"
   },
   {
    "Title": "Rename Guys.yaml to Guys.yml",
    "Body": "The incorrect file name causes the test to not be found.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/78"
   },
   {
    "Title": "Weasel spelt incorrectly",
    "Body": "Throughout the repo, 'weasel' is spelled 'weasal'.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/77"
   },
   {
    "Title": "Update So.yml",
    "Body": "Change rule so it also matches 'So' with a comma, i.e.\r\n\r\n`So` and `So,`",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/76"
   },
   {
    "Title": "Update Quotes.yml",
    "Body": "Allow for punctuation check in single and double quotes",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/75"
   },
   {
    "Title": "Multiple scopes",
    "Body": "Hey there @jdkato We've been working on some tooling using vale for our Test the docs project, I'll have a lot of feedback and maybe PRs soon, but one quick question.\r\n\r\nis it possible to define multiple scopes? For example in [EndingPreposition](https://github.com/errata-ai/vale/blob/master/styles/demo/EndingPreposition.yml):\r\n\r\n```\r\nmessage: \"Don't end a sentence with '%s'\"\r\nextends: existence\r\nlevel: suggestion\r\nscope: sentence\r\nraw:\r\n  - '\\b(?:at|from|of|to|in|for|on|by)[.!]'\r\n```\r\n\r\nThis detects prepositions at the end of a sentence, but not at the end of a paragraph. I guess I could create multiple rules, but that seems extraneous to me. 🤔 ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/74"
   },
   {
    "Title": "Can't regex match empty lines ",
    "Body": "I'm trying to set up a simple rule to check that the third line in an admonition block like this starts with exactly four spaces:\r\n```\r\n!!! note \"Getting started\"\r\n\r\n    If you are a developer working with (...)\r\n```\r\n\r\nI'm stuck because, no matter what regex pattern I try, nothing seems to match the empty line. For example, consider this:\r\n\r\n```\r\nextends: existence\r\nmessage: \"Broken admonition? Check indentation! (Look for: %s)\"\r\nignorecase: true\r\nnonword: true\r\nlevel: error\r\nraw:\r\n   - '!!!\\s(note|warning|tip)\\s\"[^\"]+\"'\r\n   - '\\W*'  # Matches any non-word character.\r\n#   - '\\w'  # Should match any word character, but when you uncomment this line, you'll get 0 matches.\r\n```\r\n\r\nAm I doing something wrong or is this a bug?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/73"
   },
   {
    "Title": "Feature request: CLI arg for config file path",
    "Body": "Hi! Vale looks like a super cool tool. I have a static analysis bot I'm working on that monitors repos via webhooks and runs static analysis tools on pull requests with reasonable defaults (if no config files already exist in the repo). In order to do this, I have default config files built into the tool, and I pass those into the static analysis tools at runtime. Unfortunately, it appears that Vale only looks for config files in the current directory, parent directory, or home directory. I can work around this by just copying config files in, but it would be easier with a CLI option :)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/72"
   },
   {
    "Title": "support Swagger formats (yml, json)",
    "Body": "Some of our teams are using Swagger, and I'd like to find a way to check their code doc. The source formats are in yml and json, so I'm hoping it won't be a stretch to add support for them?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/71"
   },
   {
    "Title": "[feature request] Add option for \"fix\"",
    "Body": "Searched the issue tracker first and didn't find anything, so hopefully I'm not repeating.\r\n\r\nFor some of the error rules, it seems like Vale should be able to heal/fix like ESLint does for certain rules.\r\nMainly I'm thinking about the case for `vale.Repetition`, but I think there may be other non-ambiguous rules that might benefit.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/70"
   },
   {
    "Title": "Is it possible to use a regex in message field?",
    "Body": "Is it possible to use regular expressions in the message field when customizing styles? \r\n\r\nI'd like to capture the entire sentence the offending word/phrase is part of, like so:\r\n\r\n`message: \"In '^.*(\\'%s\\').*\\.', '%s' is passive voice.\"`\r\n\r\nExample output:\r\n`In 'The cat is driven mad by the smell of catnip.', 'is driven' is passive voice.`\r\n\r\nI get a YAML syntax error when running vale with this customization.\r\n\r\n`base.Passive: yaml: line 1: found unknown escape character`\r\n\r\nIs this use supported and I'm just formatting it incorrectly? Or is this not allowed? ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/69"
   },
   {
    "Title": "Support lint of XML files",
    "Body": "Love how fast this linter is! Since you support HTML and some structured markup, it would be great if you could also support DocBook and DITA XML.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/68"
   },
   {
    "Title": "\"Edit\" link in docs returns 404",
    "Body": "When I click the Edit symbol on the top-right corner of any page in the docs (e.g. https://valelint.github.io/docs/styles/), I get a 404.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/67"
   },
   {
    "Title": "Cannot install with homebrew",
    "Body": "I tried the provided instructions. It failed at `brew tap errata-ai/vale` with the following output.\r\n```\r\nbrew tap errata-ai/vale\r\n==\u003e Tapping errata-ai/vale\r\nCloning into '/usr/local/Homebrew/Library/Taps/errata-ai/homebrew-vale'...\r\nUsername for 'https://github.com': yanf.guo@gmail.com\r\nPassword for 'https://yanf.guo@gmail.com@github.com':\r\nremote: Repository not found.\r\nfatal: repository 'https://github.com/errata-ai/homebrew-vale/' not found\r\nError: Failure while executing: git clone https://github.com/errata-ai/homebrew-vale /usr/local/Homebrew/Library/Taps/errata-ai/homebrew-vale --depth=1\r\n```\r\n\r\nFYI\r\n```\r\nbrew --version\r\nHomebrew 1.6.2-2-gaa5efa6\r\nHomebrew/homebrew-core (git revision e84b8; last commit 2018-04-24)\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/66"
   },
   {
    "Title": "Vale doesn't pick up config file under Windows",
    "Body": "Running Vale on Windows 10. I added vale.exe's directory to the PATH environment variable, so I can run vale.exe from anywhere. However, it doesn't pick up the .vale config file in the same directory. This means there's no global config file and I must place a seperate .vale file in every local folder.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/65"
   },
   {
    "Title": "Make spelling filters customizable",
    "Body": "- [x] Document default filters\r\n- [x] support adding new filters and disabling default ones",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/64"
   },
   {
    "Title": "Vale does not display version info",
    "Body": "```\r\n$ go/bin/vale -v\r\nvale version \r\n````",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/63"
   },
   {
    "Title": "Comments in rst broken",
    "Body": "Heya,\r\n\r\nLooks to me like \r\n\r\n```\r\n.. vale off\r\n\r\nThis is some text ACT test\r\n\r\nThis is some text ACT test\r\n\r\n.. vale on\r\n```\r\n\r\nisn't working at the mo. I also used it on WTD here https://github.com/writethedocs/www/commit/08ee26350149a1c23801567f4ac6bc6f2ad2b700 and they are also getting detected.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/62"
   },
   {
    "Title": "[WIP] Added Google style (based on Google style guide for developers)",
    "Body": "@jdkato Can you check this one?\r\n\r\nbased on https://developers.google.com/style/",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/61"
   },
   {
    "Title": "We should expose `alt` and `title` scopes",
    "Body": "We've recently added the ability to lint `alt` and `title` attributes (see #59),  so I think the next step is to expose them as their own scopes. This will allow styles to implement rules that only target them, which could prove useful for SEO purposes.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/60"
   },
   {
    "Title": "Add support for linting `alt`/ `title` attributes",
    "Body": "We currently ignore all HTML tag attributes but, unlike the others, `alt` and `title` actually contain real text.\r\n\r\nSome examples:\r\n\r\n###### Markdown\r\n\r\n```\r\n![Logo](/images/logo.png)\r\n```\r\n###### AsciiDoc \r\n\r\n```\r\nimage:logo.png[Logo]\r\n```\r\n\r\n###### reStructuredText\r\n\r\n```\r\n.. image:: /images/logo.png\r\n   :alt: Logo\r\n```\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/59"
   },
   {
    "Title": "Linting non-existing file returns 1 file",
    "Body": "Perhaps related to #22, linting a path that does not exist will yield `✔ 0 errors, 0 warnings and 0 suggestions in 1 file.`\r\n\r\nProbably should be zero files to avoid giving the impression that something was actually linted.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/58"
   },
   {
    "Title": "Language awareness or choice",
    "Body": "I am using the linter in a language other than English. I have disabled all the already available English styles. Linting in several languages would be possible if it were possible to assign styles to languages and to switch languages after. \r\nWhether you consider this feature worth to be implemented or not, this really is a great and easy tool to use. Thank you.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/57"
   },
   {
    "Title": "line output format: wrong (relative) filename",
    "Body": "Running `vale --output line /some/path/README.md` in `/some/path` will display:\r\n\r\n\u003e /README.md:22:45:vale.Hedging:Consider removing 'probably'\r\n\r\nThe leading slash is wrong here.\r\n\r\nIt looks like it is made relative to the current working directory, but then not sliced correctly: running it from `/some` will use `/path/README.md` (where is should be `path/README.md` for the correct relative path).\r\n\r\nThe default output format (\"CLI\") and \"JSON\" are using the full path however always.\r\n\r\nvale version 0.9.0",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/56"
   },
   {
    "Title": "Install styles",
    "Body": "Would it be possible to add a real install target to the makfile that also installs the existing styles (somewhere to `/usr/share/vale`)? Would be much easier to use them if they are immediately available.\r\n\r\nThis is the result of discussions regarding the package for archlinux: https://aur.archlinux.org/packages/vale/, where the policy is that packages generally only contain what upstream provides.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/55"
   },
   {
    "Title": "latex support",
    "Body": "Especially for academic writing this tool would be awesome, but with the only scope beeing text the styleguides are not very useful.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/54"
   },
   {
    "Title": "The Economist style guide link in README is broken",
    "Body": "Seems the economist changed the website and the existing link points to nowhere.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/53"
   },
   {
    "Title": "add tag to suppress Vale errors/warnings for specific case",
    "Body": "Some errors/warnings reported by Vale are perfectly valid English prose. Ultimately, Vale just provides suggestions, potential issues and only author should decide if text needs corrections of not.\r\n It would be very handy to have an ability to suppress such specific 'style smells' by using special tag, e.g.\r\n```\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml\u003e\r\n\u003cp\u003eIn many cases, ......be returned.\u003c!--novale.begin--\u003eNote that\u003c!--novale.end--\u003e the geocoder is very tolerant...\r\n\u003c/html\u003e\r\n```\r\nWhen processing the such tag vale should *not* report an issue:\r\n```\r\n1:426   warning  Consider removing 'Note that'  vale.Editorializing\r\n```\r\nSimilar tags could be added for other file formats(Java, C, PHP, e.t.c.)\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/52"
   },
   {
    "Title": "Vale does not recognise  javadoc comments ",
    "Body": "Together with C-style comments Java also [javadoc](http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#format) comments:\r\n\r\n\u003e The first line contains the begin-comment delimiter ( /**).\r\n\r\nExample:\r\n```\r\n/**\r\n * Returns an Image object that can then be painted on the screen. \r\n *\r\n * @param  url  an absolute URL giving the base location of the image\r\n * @param  name the location of the image, relative to the url argument\r\n * @return      the image at the specified URL\r\n * @see         Image\r\n */\r\n public Image getImage(URL url, String name) {\r\n  // methodimpl.\r\n }\r\n```\r\nWhen parsing javadoc comments as above in _java_ files, Vale complains about repeating star\r\n```\r\n 47:6   error    '*' is repeated!              vale.Repetition\r\n 83:6   error    '*' is repeated!              vale.Repetition\r\n 86:6   error    '*' is repeated!              vale.Repetition\r\n```\r\n\r\nAs javadoc-comments are widely used in java programs these false-positives errors greatly impede Vale result analysis.\r\nI think  that _core/format.go_ file needs to be modified. Now it treats java-comments as c-comments(obviously C does not support javadoc):\r\n```\r\nvar CommentsByNormedExt = map[string]map[string]string{\r\n\t\".c\": {\r\n\t\t\"inline\":     `(//.+)|(/\\*.+\\*/)`,\r\n\t\t\"blockStart\": `(/\\*.*)`,\r\n\t\t\"blockEnd\":   `(.*\\*/)`,\r\n\t},\r\n.....\r\n\t`\\.(?:java|bsh)$`:                             {\".c\", \"code\"},\r\n....\r\n}\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/51"
   },
   {
    "Title": "Installed via Homebrew, unable to configure any parser but vale",
    "Body": "I'm a new user, just having installed Vale via Homebrew. I can't get Vale to use other rulesets except the build-in one. In this example reproducing the error, I'm trying to lint a series of Asciidoc documents. I have my Vale configuration in a .vale file.\r\n\r\n▶ which vale\r\n/usr/local/bin/vale\r\n\r\nHere's my .vale file:\r\n\r\n[*]\r\nBasedOnStyles = proselint\r\n\r\n▶ vale dc\r\n{\r\n  \"Checks\": null,\r\n  \"GBaseStyles\": [\r\n    \"proselint\"\r\n  ],\r\n  \"GChecks\": {},\r\n  \"MinAlertLevel\": 1,\r\n  \"SBaseStyles\": {},\r\n  \"SChecks\": {},\r\n  \"StylesPath\": \"\",\r\n  \"RuleToLevel\": {},\r\n  \"Output\": \"CLI\",\r\n  \"Wrap\": false,\r\n  \"NoExit\": false,\r\n  \"Sorted\": false,\r\n  \"Normalize\": false,\r\n  \"Simple\": false,\r\n  \"InExt\": \".txt\"\r\n}\r\n▶ vale *.adoc\r\n✔ 0 errors, 0 warnings and 0 suggestions in 6 files.\r\n\r\nWhen I modify my .vale file to read:\r\n\r\n[*]\r\nBasedOnStyles = vale\r\n\r\nI get:\r\n\r\n▶ vale *.adoc\r\n[several items omitted]\r\n vol4.adoc\r\n 125:11  warning  Consider removing 'Tiny'       vale.Editorializing\r\n 196:47  warning  Consider removing 'excellent'  vale.Editorializing\r\n\r\n✖ 7 errors, 75 warnings and 0 suggestions in 6 files.\r\n\r\nIf vale is in the BasedOnStyles list in my configuration file, I get the 7 errors and 75 warnings shown above. If it's not, I get 0 of each. I've also tried setting StylesPath to a local directory, I've tried some Markdown files, and I've tried configuring it with other parsers than parselint like 18F and TheEconomist, but to no avail.\r\n\r\nIs there logging that would help track down the issue?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/50"
   },
   {
    "Title": "Add org-mode support",
    "Body": "There's a [library](https://github.com/chaseadamsio/goorgeous) that should make this addition fairly straight forward.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/49"
   },
   {
    "Title": "[Question] How to use Joblint via Vale?",
    "Body": "### 1. Briefly\n\nI don't understand, how I can use at the same time [**proselint**](http://proselint.com/) + [**Joblint**](http://joblint.org/) + write-good — linters with [**green development status**](https://github.com/ValeLint/vale#reference-styles) — for my documents via Vale.\n\n### 2. Settings\n\nContent of my `SashaEquality.md` file:\n\n```markdown\npolicewoman skillz\n```\n\n+ Windows 10 Enterprise LTSB 64-bit EN,\n+ Vale — 0.8.1,\n+ Joblint — 2.3.2,\n+ proselint — 0.8.0\n\n### 3. Expected behavior\n\n**If** `joblint SashaEquality.md`:\n\n```markdown\nD:\\Киролайна\u003ejoblint SashaEquality.md\n\nJoblint\n\nIssue tally:\nCulture  |█  (1)\n\n• Use of bro terminology (error)\n  policewoman skillz\n    ✔ Remove these words.\n    ✘ Bro culture terminology can really reduce the number of\n    people likely to show interest. It discriminates against anyone who\n    doesn't fit into a single gender-specific archetype.\n```\n\n### 4. Actual behavior\n\n**If** `vale SashaEquality.md`:\n\n```shell\nD:\\Киролайна\u003evale SashaEquality.md\n\n SashaEquality.md\n 1:1  error  Consider using 'police          vale.GenderBias\n             officer(s)' instead of\n             'policewoman'\n\n✖ 1 error, 0 warnings and 0 suggestions in 1 file.\n```\n\nI can see [**proselint error**](https://github.com/amperser/proselint/blob/master/proselint/checks/sexism/misc.py#L31), but I can't see Joblint error.\n\n### 5. Did not help\n\nI download `Joblint.zip` file and place it to `D:\\Киролайна\\Styles` folder. I create `.vale` file in `D:\\Киролайна` folder. It content:\n\n```python\n# Core settings\nStylesPath = D:\\Киролайна\\Styles\nMinAlertLevel = warning # suggestion, warning or error\n\n# Global settings (applied to every syntax)\n[*]\n# List of styles to load\nBasedOnStyles = Joblint\n# Style.Rule = {YES, NO} to enable or disable a specific rule\nvale.Editorializing = YES\n# You can also change the level associated with a rule\nvale.Hedging = error\n…\n\n# Syntax-specific settings\n# These overwrite any conflicting global settings\n[*.{md,txt}]\n…\n\n```\n\nNo effect.\n\nThanks.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/48"
   },
   {
    "Title": "Readability statistics ",
    "Body": "I'm thinking about including a new `readability` extension point that will allow users to set standards for metrics like Flesch-Kincaid, Gunning-Fog, and Coleman-Liau. For example,\r\n\r\n```yaml\r\nextends: readability\r\nlevel: warning\r\nmetric: Flesch-Kincaid\r\ngrade: 8\r\nscope: paragraph\r\n```\r\nThis would warn about any paragraphs that exceed a reading level of 8th grade.\r\n\r\nThe [`prose`](https://github.com/jdkato/prose#summarizing-godoc) library already supports these metrics, so it's just a matter of deciding on the check implementation details.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/47"
   },
   {
    "Title": "vale only lints first file?",
    "Body": "When passing multiple files to `vale`, as in\r\n\r\n```console\r\n$ vale --output JSON --no-exit foo.md bar.md\r\n```\r\n\r\n`vale` seems to lint only the first file.  I see errors in `foo.md` but no errors from `bar.md` (regardless of the `--output` option), although I'm sure `bar.md` has errors (which do appear if I lint `bar.md` specifically).\r\n\r\nIs this expected behaviour?  The `--help` output suggests that I should be able to pass multiple arguments:\r\n\r\n```\r\nNAME:\r\n   vale - A command-line linter for prose.\r\n\r\nUSAGE:\r\n   vale [global options] command [command options] [arguments...]\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/46"
   },
   {
    "Title": "Referencing key matches in values for swaps",
    "Body": "I'm working on a style to standardize some books on Python, and one place I need consistency is how I talk about \"blocks\" in the language. I want vale rules to make sure I use \"for-block\" rather than \"for block\", \"`for`-block\", or \"`for` block\". I want similar rules for \"if-block\", \"else-block\", and every other kind of block I might need to talk about.\r\n\r\nConceptually, I want swap rules like this:\r\n```\r\n(for|if|try|else) block: \\1-block\r\n`(for|if|try|else)`(?: |-)block: \\1-block\r\n``` \r\nThat is, I want to capture the type of block in the key regex and reference it in the value. As far as I can tell, this isn't supported in vale. Am I wrong and there's actually a way to do this?\r\n\r\nIf I'm right, would it be possible to add this?\r\n\r\nThis is far from critical for me, and it's probably a bit of an edge-case for most users. I can always just enumerate all of the different rules.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/45"
   },
   {
    "Title": "Allow rules to target code spans",
    "Body": "While most of the time we'll probably want to ignore code spans, there are cases (see #43 and [Rust's style guide](https://github.com/rust-lang/book/blob/master/second-edition/style-guide.md#prose)) where it'd be nice to have access to them without having to use `--ignore-syntax` (which negates the other benefits of Vale's syntax handling\u0026mdash;notably scoping and avoiding things like URLs).\r\n\r\nSo, I'm thinking of making this optional on a per-rule basis. For example, if we want to enforce omitting parentheses in code spans (as in the Rust style guide), we could write the following:\r\n\r\n```yaml\r\nextends: existence\r\nmessage: \"Remove parentheses from '%s'\"\r\ndescription: \"When talking about a method in prose, DO NOT include the parentheses.\"\r\nlevel: error\r\nnonword: true\r\ncode: true # this tells Vale to keep code spans\r\ntokens:\r\n  - '`\\w+\\(\\)`' # something like `read_line()` would be flagged.\r\n```\r\nThis is currently being explored on the [`feat/ignore`](https://github.com/ValeLint/vale/tree/feat/ignore) branch.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/44"
   },
   {
    "Title": "How to match backticks in styles?",
    "Body": "I think I'm just being dense, but I can't figure out how to match backticks (\"`\" characters) in a swap rule. I'm linting a book on Python, and we want to standardize how we spell e.g. \"for-loop\". So I want a rule like this (simplified from what we really want):\r\n```yaml\r\nswap:\r\n  'for loop': for-loop\r\n  '`for` loop': for-loop\r\n```\r\nBut this doesn't seem to work. The first rule works just fine, but the second one with backticks doesn't seem to fire. How can I make this work?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/43"
   },
   {
    "Title": "Improve Vale's out-of-the-box experience",
    "Body": "As a few Reddit users [mentioned here](https://www.reddit.com/r/emacs/comments/6b49nz/flycheck_integration_for_vale_a_natural_language/), Vale's out-of-the-box experience can be a bit off-putting due to its aggressiveness. I think part of this is a misunderstanding about Vale's purpose, but it probably should be addressed anyway.\r\n\r\n(Related to #30, although I think my opinion about offering \"non-subjective\" rules has changed; I'm not sure they exist.)\r\n\r\nHere are a few of my thoughts:\r\n\r\n- I'm tempted to ship without any rules enabled. My stance from the beginning has been that writing is too complex/nuanced to be able to offer general purpose, authoritative advice. Instead, Vale is designed to help its users adhere to an existing guide\u0026mdash;whether that's a simple style guide for an open source project's documentation or something more thorough like 18F.\r\n- Assuming we don't completely disable the built-in rules, I think we should strive to be very quiet by default. No one likes to receive a long list of suggestions about their writing and we only get one chance to make a first impression.\r\n- Regardless of whether they're controversial or imprecise, I think there are a number of rules that should come pre-implemented with Vale (even if they're likely to be disabled by default). My criteria for these are: (1) it's not easy to implement (e.g., `PassiveVoice`), (2) it's time-consuming to implement (e.g., `ComplexWords`), or (3) it's commonly mentioned in style guides (e.g., `GenderBias`). Basically, I'd like to make style creation as easy as possible. (See https://github.com/ValeLint/docs/issues/1 for more discussion on style creation.)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/42"
   },
   {
    "Title": "Added link to emacs package \"flycheck-vale\".",
    "Body": "I added the link in alphabetical order with the rest, but let me know if it should just go at the end instead. \r\n\r\nAnd thanks, vale is brilliant!",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/41"
   },
   {
    "Title": "Improve the scoping system",
    "Body": "From the [TextMate docs](http://blog.macromates.com/2005/introduction-to-scopes/):\r\n\r\n\u003e it's also possible to AND, OR, and subtract scope selectors, e.g.: (a | b) \u0026 c - d would select the scope which is not matched by d, and matched by both c, and a or b.\r\n\r\nI think instead of outright ignoring code spans, we should expose them as a scope (`text.code`, perhaps) that can be selectively ignored. For example,\r\n\r\n```yaml\r\nscope: text - code\r\n```\r\nwould exclude code spans for the particular rule.\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/40"
   },
   {
    "Title": "Feature request: way to manage globally installed rule sets",
    "Body": "Hello! I just learned about vale and am very excited about it. The first thing I noticed is that when you install from `brew install vale` it just provides the compiled bin with none of the optional rule sets. My workaround is to currently clone the entire vale repo and add \r\n\r\n`StylesPath = xxxxxx/vale/styles` in my `$HOME/.vale` \r\n\r\nIt would be cool if the distribution shipped with these styles. If they do and I'm not seeing it, please correct me. I'm going to be working off the source version for now. ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/39"
   },
   {
    "Title": "Spell checking ... ?",
    "Body": "My initial feelings on this were that it was out of scope: Vale is designed to work with the more subjective, stylistic parts of writing\u0026mdash;not spelling and grammar.\r\n\r\n*However*, I think its \"syntax awareness\" could prove useful here too. For example, checking source code comments and ignoring markup syntax and code blocks.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/38"
   },
   {
    "Title": "Improve styling of multiple options",
    "Body": "For example,\r\n\r\n```yaml\r\nmessage: Use \"%s\" instead of \"%s\"\r\nswap:\r\n  foo: bar or baz #  currently the only way to list multiple options\r\n```\r\nresults in `Use \"bar or baz\" instead of \"foo\"`. I think it would be better as something like:\r\n\r\n```yaml\r\nfoo: [bar, baz] # =\u003e Use \"bar\" or \"baz\" instead of \"foo\"\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/37"
   },
   {
    "Title": "Add more output options",
    "Body": "At the least, I'd like an option that incorporates `link` and `description`.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/36"
   },
   {
    "Title": "Spelling error in ridiculus",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/35"
   },
   {
    "Title": "Create a better benchmark suite",
    "Body": "As mentioned in #26, one of the goals of our test suite is to include better profiling information. Vale is pretty fast at the moment (especially when compared to other prose linters), and it'd be nice to be able to measure how changes impact this without having to profile the entire application. For starters, I think we should do this at the package level:\r\n\r\n- [ ] core\r\n- [x] lint\r\n- [ ] check\r\n- [ ] rule\r\n- [ ] ui",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/34"
   },
   {
    "Title": "Support in-text rule disabling",
    "Body": "I'm thinking something along the lines of\r\n\r\n```html\r\n\u003c!-- vale off --\u003e\r\nThis is some text\r\n\r\nmore text here...\r\n\u003c!-- vale on --\u003e\r\n```\r\n\r\nand\r\n\r\n```html\r\n\u003c!-- vale Style.Rule = NO --\u003e\r\nThis is some text\r\n```\r\nwhich would reset on the next blank line.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/33"
   },
   {
    "Title": "Support input from stdin",
    "Body": "I'm thinking something like:\r\n\r\n```bash\r\n# Will be treated as plain text\r\n$ vale 'This is some text to lint'\r\n...\r\n# Will be treated as Markdown\r\n$ vale --ext='.md' 'This is some text to lint'\r\n...\r\n# Will be treated as plain text\r\n$ echo 'this is more text' | vale\r\n...\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/32"
   },
   {
    "Title": "Create .github files",
    "Body": "`CONTRIBUTING.md`, `ISSUE_TEMPLATE.md`, and `PULL_REQUEST_TEMPLATE.md`.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/31"
   },
   {
    "Title": "Refine built-in rules",
    "Body": "I think Vale should ship with a minimal set of commonly used and/or non-subjective rules. Considering this, I think:\r\n\r\n- `PassiveVoice` should be decreased to a `suggestion`.\r\n- `MinAlertLevel` should default to `warning` (it's currently `suggestion`).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/30"
   },
   {
    "Title": "Expand scopes",
    "Body": "I'd like to add `quote` and `list` to the existing `sentence`, `paragraph`, `heading` and `comment`.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/29"
   },
   {
    "Title": "Add basic rule template generation",
    "Body": "I think it might be nice if you could type something like `vale new RuleName/ExtensionPoint` and get a file named `RuleName.yml` with the basic structure + useful comments about the particular extension point. \r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/28"
   },
   {
    "Title": "Possible bug",
    "Body": "This line \r\n\r\nhttps://travis-ci.org/writethedocs/www/builds/212845872#L253\r\n\r\ncontains `warningm` which looks like it could a parsing bug somewhere.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/27"
   },
   {
    "Title": "Tests? Possible issue with GenderBias",
    "Body": "Are there some tests I can run that'll convince me all checks are working? :-p\r\n\r\nI'm currently manually testing GenderBias and it does not seem to be working perfectly.\r\n\r\nI does not trigger on `doorman` but should. (Also typo in concierge.)\r\n\r\nThanks :-)\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/26"
   },
   {
    "Title": "Support linting embedded markup  ",
    "Body": "For example, comments written for `rustdoc`:\r\n\r\n```rust\r\n/// # Examples\r\n///\r\n/// ```\r\n/// use std::rc::Rc;\r\n///\r\n/// let five = Rc::new(5);\r\n/// ```\r\n``` ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/25"
   },
   {
    "Title": "Support for linting json and yaml content. ",
    "Body": "A lot of static site and documentation builders have content in json / yaml.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/24"
   },
   {
    "Title": "add a `capitalization` check",
    "Body": "I'm thinking this will serve two purposes:\r\n\r\n1. When we're looking for specific spelling of a word (e.g., JavaScript), we'll simply pass the desired string:\r\n\r\n    ```yaml\r\n    extends: capitalization\r\n    tokens:\r\n    # flags any X such that X.lower() == javascript \u0026\u0026 X != JavaScript\r\n    - JavaScript\r\n    ```\r\n\r\n2. It will support variables representing generic cases  (`$lower`, `$upper`, `$title`, etc.) so that we could, for example, check that all headings are in title case.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/23"
   },
   {
    "Title": "Improve error reporting",
    "Body": "We currently do a decent job of handling errors but most of it is done silently. Some areas that could use better reporting (perhaps with [jWalterWeatherman](https://github.com/spf13/jWalterWeatherman)) are:\r\n\r\n- [ ] configuration: malformed glob patterns, invalid paths, unrecognized rules, rule name collisions\r\n- [ ] rules: missing keys, malformed regular expressions, YAML syntax errors\r\n- [ ] linting: unsupported file formats, file I/O errors, parsing errors",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/22"
   },
   {
    "Title": "Process files concurrently",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/21"
   },
   {
    "Title": "Generate a human readable style guide from the YML",
    "Body": "Would be a nice enhancement.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/20"
   },
   {
    "Title": "Improve markup processing",
    "Body": "- [x] HTML: via [golang.org/x/net/html](https://godoc.org/golang.org/x/net/html).\r\n- [x] Markdown: via [Blackfriday](https://github.com/russross/blackfriday).\r\n- [x] reStructuredText: via [rst2html](http://docutils.sourceforge.net/docs/user/tools.html#rst2html-py).\r\n- [x] AsciiDoc: via [AsciiDoctor](http://asciidoctor.org/).\r\n- [x] LaTeX: via [Pandoc](http://pandoc.org/).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/19"
   },
   {
    "Title": "Support changing the severity level of built-in rules",
    "Body": "For example,\r\n\r\n```yaml\r\nvale.PassiveVoice = warning # instead of just `= YES`\r\n```",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/18"
   },
   {
    "Title": "Linux should not install to home dir",
    "Body": "I'm fairly sure *most* people do not want the default install location to be `macOS and Linux: ~/vale`\r\n\r\nMaybe `~/bin/vale` ?",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/17"
   },
   {
    "Title": "Multiline matches are handled incorrectly",
    "Body": "Something like\r\n\r\n\u003e ATM **\\n** machine\r\n\r\nwill be flagged, but we only return one line\u0026mdash;so, the second element of Span is always incorrect (it's really on the next line).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/16"
   },
   {
    "Title": "Use multiple check definition structs?",
    "Body": "We currently use a single struct to represent all checks because a rule's `type` is specified in the definition itself. It looks like we could use [mapstructure](https://github.com/mitchellh/mapstructure) to split this up.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/15"
   },
   {
    "Title": "Add a `description` key to rule definitions",
    "Body": "In many cases, I think it would be desirable to have a longer description than what `message` currently provides. While not very partical in a CLI environment, it could be useful in editor tooltips or Word add-in views.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/14"
   },
   {
    "Title": "Include reference styles in other languages",
    "Body": "(**Note**: this depends on further development of the prose library.)\r\n\r\n`lintProse` is our only English-specific component.\r\n\r\n1. We could add a `Language` configuration key:\r\n\r\n   ```ini\r\n   # .vale\r\n   Language = German\r\n   ...\r\n   ```\r\n2. We could compile for different languages.\r\n3. Languages could be specified on a per-rule basis. (This would probably be the most ideal solution...)",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/13"
   },
   {
    "Title": "Improve handling of rule citations",
    "Body": "Rule definitions already have a `link` key\u0026mdash;we just need to include it in the CLI output somehow.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/12"
   },
   {
    "Title": "Improve LaTeX support",
    "Body": "We lint line-by-line at the moment (it only gets scoped as `text`).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/11"
   },
   {
    "Title": "Integrate with existing tools",
    "Body": "## Editors + CLI tools\r\n\r\n- [x] Sublime Text (https://github.com/ValeLint/SubVale)\r\n- [x] Atom (https://github.com/TimKam/atomic-vale)\r\n- [x] VS Code (https://github.com/lunaryorn/vscode-vale)\r\n- [ ] coala CI\r\n- [x] Vim (via [ALE](https://github.com/w0rp/ale), thanks to @chew-z)\r\n- [x] Emacs (https://github.com/abingham/flycheck-vale)\r\n- [ ] JetBrains\r\n\r\n## Other\r\n\r\nThe following would be nice to have, but will probably need to access Vale through an API of some sort (see [languagetool-msword10-addin](https://github.com/jaumeortola/languagetool-msword10-addin), for example).\r\n\r\n- [ ] Chrome + Firefox + Thunderbird\r\n- [ ] MS Word\r\n- [ ] WordPress\r\n- [ ] Slack",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/10"
   },
   {
    "Title": "Support predefined variables in rule definitions",
    "Body": "For example, `$word`, `$noun`, `$verb`, etc.\r\n\r\nRelated to #1.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/9"
   },
   {
    "Title": "Duplicate matches on the same line aren't handled correctly",
    "Body": "For example in,\r\n\r\n\u003e  **all of** the teams in **all of** the use cases of your team.\r\n\r\nwe return the location of the first match twice.\r\n\r\n\r\n\r\n",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/8"
   },
   {
    "Title": "Create a Windows installer",
    "Body": "Consider [go-msi](https://github.com/mh-cbon/go-msi) and [Inno Setup](http://www.jrsoftware.org/isinfo.php).",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/7"
   },
   {
    "Title": "Add to Homebrew",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/6"
   },
   {
    "Title": "Create a website",
    "Body": "Some features to consider are:\r\n\r\n- A demo textarea (using [GopherJS](https://github.com/gopherjs/gopherjs)?);\r\n- an interactive style creator (similar to [clang-format](https://clangformat.com/)?);\r\n- a searchable list of styles; and\r\n- documentation to replace the wiki.\r\n ",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/5"
   },
   {
    "Title": "Improve test coverage",
    "Body": "We mostly have integration tests now (through cucumber). We need more unit tests.",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/4"
   },
   {
    "Title": "Replace Cucumber/Aruba with pure Go tests",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/3"
   },
   {
    "Title": "Port codetype",
    "Body": "For ambiguous cases like .m (is it Objective-C or MATLAB?)...",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/2"
   },
   {
    "Title": "POS Tagger",
    "Body": "",
    "URL": "https://api.github.com/repos/errata-ai/vale/issues/1"
   }
]
